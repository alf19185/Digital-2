

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 16 22:50:20 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.31
    18                           ; Generated 13/10/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208                           
   209                           	psect	nvCOMMON
   210  007A                     __pnvCOMMON:
   211  007A                     _dummy:
   212  007A                     	ds	1
   213  0006                     _PORTBbits	set	6
   214  0014                     _SSPCON	set	20
   215  0014                     _SSPCONbits	set	20
   216  0008                     _PORTD	set	8
   217  0007                     _PORTC	set	7
   218  0006                     _PORTB	set	6
   219  0005                     _PORTA	set	5
   220  0009                     _PORTE	set	9
   221  0013                     _SSPBUF	set	19
   222  000B                     _INTCONbits	set	11
   223  0081                     _OPTION_REGbits	set	129
   224  0094                     _SSPSTAT	set	148
   225  0089                     _TRISE	set	137
   226  0086                     _TRISB	set	134
   227  0085                     _TRISA	set	133
   228  0087                     _TRISC	set	135
   229  0088                     _TRISD	set	136
   230  0094                     _SSPSTATbits	set	148
   231  0189                     _ANSELH	set	393
   232  0188                     _ANSEL	set	392
   233                           
   234                           	psect	cinit
   235  000F                     start_initialization:	
   236                           ; #config settings
   237                           
   238  000F                     __initialization:
   239                           
   240                           ; Clear objects allocated to COMMON
   241  000F  01F0               	clrf	__pbssCOMMON& (0+127)
   242  0010  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   243  0011  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   244  0012  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   245  0013  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   246  0014                     end_of_initialization:	
   247                           ;End of C runtime variable initialization code
   248                           
   249  0014                     __end_of__initialization:
   250  0014  0183               	clrf	3
   251  0015  120A  118A  288C   	ljmp	_main	;jump to C main() function
   252                           
   253                           	psect	bssCOMMON
   254  0070                     __pbssCOMMON:
   255  0070                     _CONT:
   256  0070                     	ds	1
   257  0071                     _rxByteMaster:
   258  0071                     	ds	1
   259  0072                     _FLAG_DOWN:
   260  0072                     	ds	1
   261  0073                     _FLAG_UP:
   262  0073                     	ds	1
   263  0074                     _FLAG_PUSH:
   264  0074                     	ds	1
   265                           
   266                           	psect	cstackCOMMON
   267  0075                     __pcstackCOMMON:
   268  0075                     ?_SETUP:
   269  0075                     ?_UP:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0075                     ?_DOWN:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0075                     ?_ISR:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0075                     ??_ISR:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0075                     ?_main:	
   282                           ; 1 bytes @ 0x0
   283                           
   284                           
   285                           ; 1 bytes @ 0x0
   286  0075                     	ds	2
   287  0077                     ??_SETUP:
   288  0077                     ??_UP:	
   289                           ; 1 bytes @ 0x2
   290                           
   291  0077                     ??_DOWN:	
   292                           ; 1 bytes @ 0x2
   293                           
   294                           
   295                           ; 1 bytes @ 0x2
   296  0077                     	ds	2
   297  0079                     ??_main:
   298                           
   299                           ; 1 bytes @ 0x4
   300  0079                     	ds	1
   301                           
   302                           	psect	maintext
   303  008C                     __pmaintext:	
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 58 in file "Principal_Slave2.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;		None
   314 ;; Return value:  Size  Location     Type
   315 ;;                  1    wreg      void 
   316 ;; Registers used:
   317 ;;		wreg, status,2, status,0, pclath, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : B00/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   323 ;;      Params:         0       0       0       0       0
   324 ;;      Locals:         0       0       0       0       0
   325 ;;      Temps:          1       0       0       0       0
   326 ;;      Totals:         1       0       0       0       0
   327 ;;Total ram usage:        1 bytes
   328 ;; Hardware stack levels required when called:    2
   329 ;; This function calls:
   330 ;;		_DOWN
   331 ;;		_SETUP
   332 ;;		_UP
   333 ;; This function is called by:
   334 ;;		Startup code after reset
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338                           
   339                           ;psect for function _main
   340  008C                     _main:
   341  008C                     l790:	
   342                           ;incstack = 0
   343                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   344                           
   345                           
   346                           ;Principal_Slave2.c: 60:     SETUP();
   347  008C  120A  118A  20BD  120A  118A  	fcall	_SETUP
   348  0091                     l792:
   349                           
   350                           ;Principal_Slave2.c: 61:     dummy=SSPBUF;
   351  0091  1283               	bcf	3,5	;RP0=0, select bank0
   352  0092  1303               	bcf	3,6	;RP1=0, select bank0
   353  0093  0813               	movf	19,w	;volatile
   354  0094  00F9               	movwf	??_main
   355  0095  0879               	movf	??_main,w
   356  0096  00FA               	movwf	_dummy
   357  0097                     l794:
   358                           
   359                           ;Principal_Slave2.c: 65:        UP();
   360  0097  120A  118A  2018  120A  118A  	fcall	_UP
   361  009C                     l796:
   362                           
   363                           ;Principal_Slave2.c: 66:        DOWN();
   364  009C  120A  118A  2053  120A  118A  	fcall	_DOWN
   365  00A1                     l798:
   366                           
   367                           ;Principal_Slave2.c: 69:     if (SSPSTATbits.BF == 0) {
   368  00A1  1683               	bsf	3,5	;RP0=1, select bank1
   369  00A2  1303               	bcf	3,6	;RP1=0, select bank1
   370  00A3  1814               	btfsc	20,0	;volatile
   371  00A4  28A6               	goto	u141
   372  00A5  28A7               	goto	u140
   373  00A6                     u141:
   374  00A6  28AB               	goto	l802
   375  00A7                     u140:
   376  00A7                     l800:
   377                           
   378                           ;Principal_Slave2.c: 70:         SSPBUF = CONT;
   379  00A7  0870               	movf	_CONT,w
   380  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   381  00A9  1303               	bcf	3,6	;RP1=0, select bank0
   382  00AA  0093               	movwf	19	;volatile
   383  00AB                     l802:
   384                           
   385                           ;Principal_Slave2.c: 74:     if (SSPSTATbits.BF ) {
   386  00AB  1683               	bsf	3,5	;RP0=1, select bank1
   387  00AC  1303               	bcf	3,6	;RP1=0, select bank1
   388  00AD  1C14               	btfss	20,0	;volatile
   389  00AE  28B0               	goto	u151
   390  00AF  28B1               	goto	u150
   391  00B0                     u151:
   392  00B0  2897               	goto	l794
   393  00B1                     u150:
   394  00B1                     l804:
   395                           
   396                           ;Principal_Slave2.c: 76:           rxByteMaster = SSPBUF;
   397  00B1  1283               	bcf	3,5	;RP0=0, select bank0
   398  00B2  1303               	bcf	3,6	;RP1=0, select bank0
   399  00B3  0813               	movf	19,w	;volatile
   400  00B4  00F9               	movwf	??_main
   401  00B5  0879               	movf	??_main,w
   402  00B6  00F1               	movwf	_rxByteMaster
   403                           
   404                           ;Principal_Slave2.c: 79:           SSPBUF = CONT;
   405  00B7  0870               	movf	_CONT,w
   406  00B8  0093               	movwf	19	;volatile
   407  00B9  2897               	goto	l794
   408  00BA  120A  118A  280C   	ljmp	start
   409  00BD                     __end_of_main:
   410                           
   411                           	psect	text1
   412  0018                     __ptext1:	
   413 ;; *************** function _UP *****************
   414 ;; Defined at:
   415 ;;		line 121 in file "Principal_Slave2.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;		None
   420 ;; Return value:  Size  Location     Type
   421 ;;                  1    wreg      void 
   422 ;; Registers used:
   423 ;;		wreg, status,2, status,0
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   429 ;;      Params:         0       0       0       0       0
   430 ;;      Locals:         0       0       0       0       0
   431 ;;      Temps:          2       0       0       0       0
   432 ;;      Totals:         2       0       0       0       0
   433 ;;Total ram usage:        2 bytes
   434 ;; Hardware stack levels used:    1
   435 ;; Hardware stack levels required when called:    1
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           
   444                           ;psect for function _UP
   445  0018                     _UP:
   446  0018                     l730:	
   447                           ;incstack = 0
   448                           ; Regs used in _UP: [wreg+status,2+status,0]
   449                           
   450                           
   451                           ;Principal_Slave2.c: 123:     if (FLAG_PUSH == 1){
   452  0018  0374               	decf	_FLAG_PUSH,w
   453  0019  1D03               	btfss	3,2
   454  001A  281C               	goto	u11
   455  001B  281D               	goto	u10
   456  001C                     u11:
   457  001C  283D               	goto	l748
   458  001D                     u10:
   459  001D                     l732:
   460                           
   461                           ;Principal_Slave2.c: 124:         if (FLAG_UP == 0){
   462  001D  0873               	movf	_FLAG_UP,w
   463  001E  1D03               	btfss	3,2
   464  001F  2821               	goto	u21
   465  0020  2822               	goto	u20
   466  0021                     u21:
   467  0021  283D               	goto	l748
   468  0022                     u20:
   469  0022                     l734:
   470                           
   471                           ;Principal_Slave2.c: 125:             if (PORTBbits.RB0 == 0){
   472  0022  1283               	bcf	3,5	;RP0=0, select bank0
   473  0023  1303               	bcf	3,6	;RP1=0, select bank0
   474  0024  1806               	btfsc	6,0	;volatile
   475  0025  2827               	goto	u31
   476  0026  2828               	goto	u30
   477  0027                     u31:
   478  0027  283D               	goto	l748
   479  0028                     u30:
   480  0028                     l736:
   481                           
   482                           ;Principal_Slave2.c: 126:                 _delay((unsigned long)((10)*(8000000/4000.0)))
      +                          ;
   483  0028  301A               	movlw	26
   484  0029  00F8               	movwf	??_UP+1
   485  002A  30F8               	movlw	248
   486  002B  00F7               	movwf	??_UP
   487  002C                     u167:
   488  002C  0BF7               	decfsz	??_UP,f
   489  002D  282C               	goto	u167
   490  002E  0BF8               	decfsz	??_UP+1,f
   491  002F  282C               	goto	u167
   492  0030  0000               	nop
   493  0031                     l738:
   494                           
   495                           ;Principal_Slave2.c: 128:                 CONT++;
   496  0031  3001               	movlw	1
   497  0032  00F7               	movwf	??_UP
   498  0033  0877               	movf	??_UP,w
   499  0034  07F0               	addwf	_CONT,f
   500  0035                     l740:
   501                           
   502                           ;Principal_Slave2.c: 129:                 PORTD = CONT ;
   503  0035  0870               	movf	_CONT,w
   504  0036  1283               	bcf	3,5	;RP0=0, select bank0
   505  0037  1303               	bcf	3,6	;RP1=0, select bank0
   506  0038  0088               	movwf	8	;volatile
   507  0039                     l742:
   508                           
   509                           ;Principal_Slave2.c: 130:                 FLAG_PUSH = 0;
   510  0039  01F4               	clrf	_FLAG_PUSH
   511  003A                     l744:
   512                           
   513                           ;Principal_Slave2.c: 131:                 FLAG_UP = 1;
   514  003A  01F3               	clrf	_FLAG_UP
   515  003B  0AF3               	incf	_FLAG_UP,f
   516  003C                     l746:
   517                           
   518                           ;Principal_Slave2.c: 132:                 INTCONbits.RBIE = 1;
   519  003C  158B               	bsf	11,3	;volatile
   520  003D                     l748:
   521                           
   522                           ;Principal_Slave2.c: 137:     if (FLAG_UP == 1){
   523  003D  0373               	decf	_FLAG_UP,w
   524  003E  1D03               	btfss	3,2
   525  003F  2841               	goto	u41
   526  0040  2842               	goto	u40
   527  0041                     u41:
   528  0041  2852               	goto	l88
   529  0042                     u40:
   530  0042                     l750:
   531                           
   532                           ;Principal_Slave2.c: 138:         if (PORTBbits.RB0 == 1){
   533  0042  1283               	bcf	3,5	;RP0=0, select bank0
   534  0043  1303               	bcf	3,6	;RP1=0, select bank0
   535  0044  1C06               	btfss	6,0	;volatile
   536  0045  2847               	goto	u51
   537  0046  2848               	goto	u50
   538  0047                     u51:
   539  0047  2852               	goto	l88
   540  0048                     u50:
   541  0048                     l752:
   542                           
   543                           ;Principal_Slave2.c: 139:         _delay((unsigned long)((10)*(8000000/4000.0)));
   544  0048  301A               	movlw	26
   545  0049  00F8               	movwf	??_UP+1
   546  004A  30F8               	movlw	248
   547  004B  00F7               	movwf	??_UP
   548  004C                     u177:
   549  004C  0BF7               	decfsz	??_UP,f
   550  004D  284C               	goto	u177
   551  004E  0BF8               	decfsz	??_UP+1,f
   552  004F  284C               	goto	u177
   553  0050  0000               	nop
   554  0051                     l754:
   555                           
   556                           ;Principal_Slave2.c: 140:         FLAG_UP = 0;
   557  0051  01F3               	clrf	_FLAG_UP
   558  0052                     l88:
   559  0052  0008               	return
   560  0053                     __end_of_UP:
   561                           
   562                           	psect	text2
   563  00BD                     __ptext2:	
   564 ;; *************** function _SETUP *****************
   565 ;; Defined at:
   566 ;;		line 90 in file "Principal_Slave2.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;		None
   569 ;; Auto vars:     Size  Location     Type
   570 ;;		None
   571 ;; Return value:  Size  Location     Type
   572 ;;                  1    wreg      void 
   573 ;; Registers used:
   574 ;;		wreg, status,2
   575 ;; Tracked objects:
   576 ;;		On entry : 0/0
   577 ;;		On exit  : 0/0
   578 ;;		Unchanged: 0/0
   579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   580 ;;      Params:         0       0       0       0       0
   581 ;;      Locals:         0       0       0       0       0
   582 ;;      Temps:          0       0       0       0       0
   583 ;;      Totals:         0       0       0       0       0
   584 ;;Total ram usage:        0 bytes
   585 ;; Hardware stack levels used:    1
   586 ;; Hardware stack levels required when called:    1
   587 ;; This function calls:
   588 ;;		Nothing
   589 ;; This function is called by:
   590 ;;		_main
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           
   595                           ;psect for function _SETUP
   596  00BD                     _SETUP:
   597  00BD                     l688:	
   598                           ;incstack = 0
   599                           ; Regs used in _SETUP: [wreg+status,2]
   600                           
   601                           
   602                           ;Principal_Slave2.c: 92:     TRISD = 0;
   603  00BD  1683               	bsf	3,5	;RP0=1, select bank1
   604  00BE  1303               	bcf	3,6	;RP1=0, select bank1
   605  00BF  0188               	clrf	8	;volatile
   606  00C0                     l690:
   607                           
   608                           ;Principal_Slave2.c: 93:     TRISC = 0b00011000;
   609  00C0  3018               	movlw	24
   610  00C1  0087               	movwf	7	;volatile
   611  00C2                     l692:
   612                           
   613                           ;Principal_Slave2.c: 94:     TRISA = 0b00100000;
   614  00C2  3020               	movlw	32
   615  00C3  0085               	movwf	5	;volatile
   616  00C4                     l694:
   617                           
   618                           ;Principal_Slave2.c: 95:     TRISB = 0b00000101;
   619  00C4  3005               	movlw	5
   620  00C5  0086               	movwf	6	;volatile
   621  00C6                     l696:
   622                           
   623                           ;Principal_Slave2.c: 96:     TRISE = 0;
   624  00C6  0189               	clrf	9	;volatile
   625  00C7                     l698:
   626                           
   627                           ;Principal_Slave2.c: 97:     PORTE = 0;
   628  00C7  1283               	bcf	3,5	;RP0=0, select bank0
   629  00C8  1303               	bcf	3,6	;RP1=0, select bank0
   630  00C9  0189               	clrf	9	;volatile
   631  00CA                     l700:
   632                           
   633                           ;Principal_Slave2.c: 98:     PORTA = 0;
   634  00CA  0185               	clrf	5	;volatile
   635  00CB                     l702:
   636                           
   637                           ;Principal_Slave2.c: 99:     PORTB = 0;
   638  00CB  0186               	clrf	6	;volatile
   639  00CC                     l704:
   640                           
   641                           ;Principal_Slave2.c: 100:     PORTC = 0;
   642  00CC  0187               	clrf	7	;volatile
   643  00CD                     l706:
   644                           
   645                           ;Principal_Slave2.c: 101:     PORTD = 0;
   646  00CD  0188               	clrf	8	;volatile
   647  00CE                     l708:
   648                           
   649                           ;Principal_Slave2.c: 102:     ANSEL = 0;
   650  00CE  1683               	bsf	3,5	;RP0=1, select bank3
   651  00CF  1703               	bsf	3,6	;RP1=1, select bank3
   652  00D0  0188               	clrf	8	;volatile
   653  00D1                     l710:
   654                           
   655                           ;Principal_Slave2.c: 103:     ANSELH = 0;
   656  00D1  0189               	clrf	9	;volatile
   657  00D2                     l712:
   658                           
   659                           ;Principal_Slave2.c: 105:     SSPCONbits.SSPEN = 0;
   660  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   661  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   662  00D4  1294               	bcf	20,5	;volatile
   663  00D5                     l714:
   664                           
   665                           ;Principal_Slave2.c: 106:     SSPSTAT = 0X00;
   666  00D5  1683               	bsf	3,5	;RP0=1, select bank1
   667  00D6  1303               	bcf	3,6	;RP1=0, select bank1
   668  00D7  0194               	clrf	20	;volatile
   669                           
   670                           ;Principal_Slave2.c: 107:     SSPCON= 0X14;
   671  00D8  3014               	movlw	20
   672  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   673  00DA  1303               	bcf	3,6	;RP1=0, select bank0
   674  00DB  0094               	movwf	20	;volatile
   675  00DC                     l716:
   676                           
   677                           ;Principal_Slave2.c: 108:     SSPCONbits.SSPEN = 1;
   678  00DC  1694               	bsf	20,5	;volatile
   679  00DD                     l718:
   680                           
   681                           ;Principal_Slave2.c: 111:     OPTION_REGbits.nRBPU = 1;
   682  00DD  1683               	bsf	3,5	;RP0=1, select bank1
   683  00DE  1303               	bcf	3,6	;RP1=0, select bank1
   684  00DF  1781               	bsf	1,7	;volatile
   685  00E0                     l720:
   686                           
   687                           ;Principal_Slave2.c: 112:     INTCONbits.GIE = 1;
   688  00E0  178B               	bsf	11,7	;volatile
   689  00E1                     l722:
   690                           
   691                           ;Principal_Slave2.c: 113:     INTCONbits.PEIE = 1;
   692  00E1  170B               	bsf	11,6	;volatile
   693  00E2                     l724:
   694                           
   695                           ;Principal_Slave2.c: 114:     INTCONbits.RBIE = 1;
   696  00E2  158B               	bsf	11,3	;volatile
   697  00E3                     l726:
   698                           
   699                           ;Principal_Slave2.c: 115:     INTCONbits.RBIF = 1;
   700  00E3  140B               	bsf	11,0	;volatile
   701  00E4                     l80:
   702  00E4  0008               	return
   703  00E5                     __end_of_SETUP:
   704                           
   705                           	psect	text3
   706  0053                     __ptext3:	
   707 ;; *************** function _DOWN *****************
   708 ;; Defined at:
   709 ;;		line 147 in file "Principal_Slave2.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;		None
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, status,2, status,0
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   723 ;;      Params:         0       0       0       0       0
   724 ;;      Locals:         0       0       0       0       0
   725 ;;      Temps:          2       0       0       0       0
   726 ;;      Totals:         2       0       0       0       0
   727 ;;Total ram usage:        2 bytes
   728 ;; Hardware stack levels used:    1
   729 ;; Hardware stack levels required when called:    1
   730 ;; This function calls:
   731 ;;		Nothing
   732 ;; This function is called by:
   733 ;;		_main
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           
   738                           ;psect for function _DOWN
   739  0053                     _DOWN:
   740  0053                     l756:	
   741                           ;incstack = 0
   742                           ; Regs used in _DOWN: [wreg+status,2+status,0]
   743                           
   744                           
   745                           ;Principal_Slave2.c: 149:     if (FLAG_PUSH == 1){
   746  0053  0374               	decf	_FLAG_PUSH,w
   747  0054  1D03               	btfss	3,2
   748  0055  2857               	goto	u61
   749  0056  2858               	goto	u60
   750  0057                     u61:
   751  0057  2876               	goto	l774
   752  0058                     u60:
   753  0058                     l758:
   754                           
   755                           ;Principal_Slave2.c: 150:         if (FLAG_DOWN == 0){
   756  0058  0872               	movf	_FLAG_DOWN,w
   757  0059  1D03               	btfss	3,2
   758  005A  285C               	goto	u71
   759  005B  285D               	goto	u70
   760  005C                     u71:
   761  005C  2876               	goto	l774
   762  005D                     u70:
   763  005D                     l760:
   764                           
   765                           ;Principal_Slave2.c: 151:             if (PORTBbits.RB2 == 0){
   766  005D  1283               	bcf	3,5	;RP0=0, select bank0
   767  005E  1303               	bcf	3,6	;RP1=0, select bank0
   768  005F  1906               	btfsc	6,2	;volatile
   769  0060  2862               	goto	u81
   770  0061  2863               	goto	u80
   771  0062                     u81:
   772  0062  2876               	goto	l774
   773  0063                     u80:
   774  0063                     l762:
   775                           
   776                           ;Principal_Slave2.c: 152:                 _delay((unsigned long)((10)*(8000000/4000.0)))
      +                          ;
   777  0063  301A               	movlw	26
   778  0064  00F8               	movwf	??_DOWN+1
   779  0065  30F8               	movlw	248
   780  0066  00F7               	movwf	??_DOWN
   781  0067                     u187:
   782  0067  0BF7               	decfsz	??_DOWN,f
   783  0068  2867               	goto	u187
   784  0069  0BF8               	decfsz	??_DOWN+1,f
   785  006A  2867               	goto	u187
   786  006B  0000               	nop
   787  006C                     l764:
   788                           
   789                           ;Principal_Slave2.c: 153:                 CONT--;
   790  006C  3001               	movlw	1
   791  006D  02F0               	subwf	_CONT,f
   792  006E                     l766:
   793                           
   794                           ;Principal_Slave2.c: 154:                 PORTD = CONT ;
   795  006E  0870               	movf	_CONT,w
   796  006F  1283               	bcf	3,5	;RP0=0, select bank0
   797  0070  1303               	bcf	3,6	;RP1=0, select bank0
   798  0071  0088               	movwf	8	;volatile
   799  0072                     l768:
   800                           
   801                           ;Principal_Slave2.c: 155:                 FLAG_PUSH = 0;
   802  0072  01F4               	clrf	_FLAG_PUSH
   803  0073                     l770:
   804                           
   805                           ;Principal_Slave2.c: 156:                 FLAG_DOWN = 1;
   806  0073  01F2               	clrf	_FLAG_DOWN
   807  0074  0AF2               	incf	_FLAG_DOWN,f
   808  0075                     l772:
   809                           
   810                           ;Principal_Slave2.c: 157:                 INTCONbits.RBIE = 1;
   811  0075  158B               	bsf	11,3	;volatile
   812  0076                     l774:
   813                           
   814                           ;Principal_Slave2.c: 162:     if (FLAG_DOWN == 1){
   815  0076  0372               	decf	_FLAG_DOWN,w
   816  0077  1D03               	btfss	3,2
   817  0078  287A               	goto	u91
   818  0079  287B               	goto	u90
   819  007A                     u91:
   820  007A  288B               	goto	l96
   821  007B                     u90:
   822  007B                     l776:
   823                           
   824                           ;Principal_Slave2.c: 163:         if (PORTBbits.RB2 == 1){
   825  007B  1283               	bcf	3,5	;RP0=0, select bank0
   826  007C  1303               	bcf	3,6	;RP1=0, select bank0
   827  007D  1D06               	btfss	6,2	;volatile
   828  007E  2880               	goto	u101
   829  007F  2881               	goto	u100
   830  0080                     u101:
   831  0080  288B               	goto	l96
   832  0081                     u100:
   833  0081                     l778:
   834                           
   835                           ;Principal_Slave2.c: 164:         _delay((unsigned long)((10)*(8000000/4000.0)));
   836  0081  301A               	movlw	26
   837  0082  00F8               	movwf	??_DOWN+1
   838  0083  30F8               	movlw	248
   839  0084  00F7               	movwf	??_DOWN
   840  0085                     u197:
   841  0085  0BF7               	decfsz	??_DOWN,f
   842  0086  2885               	goto	u197
   843  0087  0BF8               	decfsz	??_DOWN+1,f
   844  0088  2885               	goto	u197
   845  0089  0000               	nop
   846  008A                     l780:
   847                           
   848                           ;Principal_Slave2.c: 165:         FLAG_DOWN = 0;
   849  008A  01F2               	clrf	_FLAG_DOWN
   850  008B                     l96:
   851  008B  0008               	return
   852  008C                     __end_of_DOWN:
   853                           
   854                           	psect	text4
   855  00E5                     __ptext4:	
   856 ;; *************** function _ISR *****************
   857 ;; Defined at:
   858 ;;		line 46 in file "Principal_Slave2.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;		None
   861 ;; Auto vars:     Size  Location     Type
   862 ;;		None
   863 ;; Return value:  Size  Location     Type
   864 ;;                  1    wreg      void 
   865 ;; Registers used:
   866 ;;		wreg, status,2, status,0
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   872 ;;      Params:         0       0       0       0       0
   873 ;;      Locals:         0       0       0       0       0
   874 ;;      Temps:          2       0       0       0       0
   875 ;;      Totals:         2       0       0       0       0
   876 ;;Total ram usage:        2 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		Interrupt level 1
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           
   886                           ;psect for function _ISR
   887  00E5                     _ISR:
   888  00E5                     i1l782:
   889                           
   890                           ;Principal_Slave2.c: 48:     if (INTCONbits.RBIF == 1 && INTCONbits.RBIE == 1){
   891  00E5  1C0B               	btfss	11,0	;volatile
   892  00E6  28E8               	goto	u11_21
   893  00E7  28E9               	goto	u11_20
   894  00E8                     u11_21:
   895  00E8  28F5               	goto	i1l67
   896  00E9                     u11_20:
   897  00E9                     i1l784:
   898  00E9  1D8B               	btfss	11,3	;volatile
   899  00EA  28EC               	goto	u12_21
   900  00EB  28ED               	goto	u12_20
   901  00EC                     u12_21:
   902  00EC  28F5               	goto	i1l67
   903  00ED                     u12_20:
   904  00ED                     i1l786:
   905                           
   906                           ;Principal_Slave2.c: 51:         if (FLAG_PUSH == 0){
   907  00ED  0874               	movf	_FLAG_PUSH,w
   908  00EE  1D03               	btfss	3,2
   909  00EF  28F1               	goto	u13_21
   910  00F0  28F2               	goto	u13_20
   911  00F1                     u13_21:
   912  00F1  28F5               	goto	i1l67
   913  00F2                     u13_20:
   914  00F2                     i1l788:
   915                           
   916                           ;Principal_Slave2.c: 52:             FLAG_PUSH = 1;
   917  00F2  01F4               	clrf	_FLAG_PUSH
   918  00F3  0AF4               	incf	_FLAG_PUSH,f
   919                           
   920                           ;Principal_Slave2.c: 53:             INTCONbits.RBIE = 0;
   921  00F4  118B               	bcf	11,3	;volatile
   922  00F5                     i1l67:
   923  00F5  0876               	movf	??_ISR+1,w
   924  00F6  008A               	movwf	10
   925  00F7  0E75               	swapf	??_ISR,w
   926  00F8  0083               	movwf	3
   927  00F9  0EFE               	swapf	btemp,f
   928  00FA  0E7E               	swapf	btemp,w
   929  00FB  0009               	retfie
   930  00FC                     __end_of_ISR:
   931  007E                     btemp	set	126	;btemp
   932  007E                     wtemp0	set	126
   933                           
   934                           	psect	intentry
   935  0004                     __pintentry:	
   936                           ;incstack = 0
   937                           ; Regs used in _ISR: [wreg+status,2+status,0]
   938                           
   939  0004                     interrupt_function:
   940  007E                     saved_w	set	btemp
   941  0004  00FE               	movwf	btemp
   942  0005  0E03               	swapf	3,w
   943  0006  00F5               	movwf	??_ISR
   944  0007  080A               	movf	10,w
   945  0008  00F6               	movwf	??_ISR+1
   946  0009  120A  118A  28E5   	ljmp	_ISR
   947                           
   948                           	psect	config
   949                           
   950                           ;Config register CONFIG1 @ 0x2007
   951                           ;	Oscillator Selection bits
   952                           ;	FOSC = EXTRC_CLKOUT, RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
      +                          OSC1/CLKIN
   953                           ;	Watchdog Timer Enable bit
   954                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   955                           ;	Power-up Timer Enable bit
   956                           ;	PWRTE = OFF, PWRT disabled
   957                           ;	RE3/MCLR pin function select bit
   958                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   959                           ;	Code Protection bit
   960                           ;	CP = OFF, Program memory code protection is disabled
   961                           ;	Data Code Protection bit
   962                           ;	CPD = OFF, Data memory code protection is disabled
   963                           ;	Brown Out Reset Selection bits
   964                           ;	BOREN = OFF, BOR disabled
   965                           ;	Internal External Switchover bit
   966                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   967                           ;	Fail-Safe Clock Monitor Enabled bit
   968                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   969                           ;	Low Voltage Programming Enable bit
   970                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   971                           ;	In-Circuit Debugger Mode bit
   972                           ;	DEBUG = 0x1, unprogrammed default
   973  2007                     	org	8199
   974  2007  20D7               	dw	8407
   975                           
   976                           ;Config register CONFIG2 @ 0x2008
   977                           ;	Brown-out Reset Selection bit
   978                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   979                           ;	Flash Program Memory Self Write Enable bits
   980                           ;	WRT = OFF, Write protection off
   981  2008                     	org	8200
   982  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_DOWN
    _main->_UP

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              4 COMMON     1     1      0
                               _DOWN
                              _SETUP
                                 _UP
 ---------------------------------------------------------------------------------
 (1) _UP                                                   2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SETUP                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOWN                                                 2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DOWN
   _SETUP
   _UP

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 16 22:50:20 2021

            _SSPSTATbits 0094                       l80 00E4                       l96 008B  
                     l88 0052                       u10 001D                       u11 001C  
                     u20 0022                       u21 0021                       u30 0028  
                     u31 0027                       u40 0042                       u41 0041  
                     u50 0048                       u51 0047                       u60 0058  
                     u61 0057                       u70 005D                       u71 005C  
                     u80 0063                       u81 0062                       u90 007B  
                     _UP 0018                       u91 007A                      ?_UP 0075  
                    l700 00CA                      l710 00D1                      l702 00CB  
                    l720 00E0                      l712 00D2                      l704 00CC  
                    l800 00A7                      l722 00E1                      l714 00D5  
                    l706 00CD                      l730 0018                      l802 00AB  
                    l724 00E2                      l716 00DC                      l708 00CE  
                    l740 0035                      l732 001D                      l804 00B1  
                    l726 00E3                      l718 00DD                      l750 0042  
                    l742 0039                      l734 0022                      l760 005D  
                    l752 0048                      l744 003A                      l736 0028  
                    l770 0073                      l762 0063                      l690 00C0  
                    l754 0051                      l746 003C                      l738 0031  
                    l780 008A                      l772 0075                      l764 006C  
                    l756 0053                      l692 00C2                      l748 003D  
                    l766 006E                      l758 0058                      l774 0076  
                    l694 00C4                      l790 008C                      l776 007B  
                    l768 0072                      l696 00C6                      l688 00BD  
                    l792 0091                      l778 0081                      l698 00C7  
                    l794 0097                      l796 009C                      l798 00A1  
                    u100 0081                      u101 0080                      u140 00A7  
                    u141 00A6                      u150 00B1                      u151 00B0  
                    u167 002C                      u177 004C                      u187 0067  
                    _ISR 00E5                      u197 0085                     ??_UP 0077  
                   ?_ISR 0075                     _CONT 0070                     _DOWN 0053  
                   i1l67 00F5                     _main 008C                     btemp 007E  
                   start 000C                    ??_ISR 0075                    ?_DOWN 0075  
                  ?_main 0075                    _ANSEL 0188                    i1l782 00E5  
                  i1l784 00E9                    i1l786 00ED                    i1l788 00F2  
                  u11_20 00E9                    u11_21 00E8                    u12_20 00ED  
                  u12_21 00EC                    u13_20 00F2                    u13_21 00F1  
                  _SETUP 00BD                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _PORTE 0009  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TRISE 0089                    _dummy 007A  
                  pclath 000A                    status 0003                    wtemp0 007E  
           __end_of_DOWN 008C          __initialization 000F             __end_of_main 00BD  
                 ??_DOWN 0077                   ??_main 0079                   ?_SETUP 0075  
                 _ANSELH 0189                   _SSPBUF 0013                   _SSPCON 0014  
                 saved_w 007E  __end_of__initialization 0014            __end_of_SETUP 00E5  
         __pcstackCOMMON 0075               __end_of_UP 0053                  ??_SETUP 0077  
         _OPTION_REGbits 0081               __pnvCOMMON 007A               __pmaintext 008C  
             __pintentry 0004                  _FLAG_UP 0073                  _SSPSTAT 0094  
              _FLAG_DOWN 0072                _FLAG_PUSH 0074                  __ptext1 0018  
                __ptext2 00BD                  __ptext3 0053                  __ptext4 00E5  
           __size_of_ISR 0017     end_of_initialization 0014                _PORTBbits 0006  
    start_initialization 000F              __end_of_ISR 00FC              __pbssCOMMON 0070  
              ___latbits 0002           __size_of_SETUP 0028              __size_of_UP 003B  
      interrupt_function 0004             _rxByteMaster 0071            __size_of_DOWN 0039  
          __size_of_main 0031               _INTCONbits 000B                 intlevel1 0000  
             _SSPCONbits 0014  
