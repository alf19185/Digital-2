

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 15 18:12:08 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.31
    17                           ; Generated 13/10/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0006                     _PORTBbits	set	6
   208  0014                     _SSPCON	set	20
   209  0014                     _SSPCONbits	set	20
   210  0008                     _PORTD	set	8
   211  0007                     _PORTC	set	7
   212  0006                     _PORTB	set	6
   213  0005                     _PORTA	set	5
   214  0009                     _PORTE	set	9
   215  0013                     _SSPBUF	set	19
   216  000B                     _INTCONbits	set	11
   217  0081                     _OPTION_REGbits	set	129
   218  0094                     _SSPSTAT	set	148
   219  0089                     _TRISE	set	137
   220  0086                     _TRISB	set	134
   221  0085                     _TRISA	set	133
   222  0087                     _TRISC	set	135
   223  0088                     _TRISD	set	136
   224  0094                     _SSPSTATbits	set	148
   225  0189                     _ANSELH	set	393
   226  0188                     _ANSEL	set	392
   227                           
   228                           	psect	cinit
   229  000F                     start_initialization:	
   230                           ; #config settings
   231                           
   232  000F                     __initialization:
   233                           
   234                           ; Clear objects allocated to COMMON
   235  000F  01F0               	clrf	__pbssCOMMON& (0+127)
   236  0010  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   237  0011  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   238  0012  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   239  0013  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   240  0014                     end_of_initialization:	
   241                           ;End of C runtime variable initialization code
   242                           
   243  0014                     __end_of__initialization:
   244  0014  0183               	clrf	3
   245  0015  120A  118A  288C   	ljmp	_main	;jump to C main() function
   246                           
   247                           	psect	bssCOMMON
   248  0070                     __pbssCOMMON:
   249  0070                     _CONT:
   250  0070                     	ds	1
   251  0071                     _rxByteMaster:
   252  0071                     	ds	1
   253  0072                     _FLAG_DOWN:
   254  0072                     	ds	1
   255  0073                     _FLAG_UP:
   256  0073                     	ds	1
   257  0074                     _FLAG_PUSH:
   258  0074                     	ds	1
   259                           
   260                           	psect	cstackCOMMON
   261  0075                     __pcstackCOMMON:
   262  0075                     ?_SETUP:
   263  0075                     ?_UP:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0075                     ?_DOWN:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0075                     ?_ISR:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0075                     ??_ISR:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0075                     ?_main:	
   276                           ; 1 bytes @ 0x0
   277                           
   278                           
   279                           ; 1 bytes @ 0x0
   280  0075                     	ds	2
   281  0077                     ??_SETUP:
   282  0077                     ??_UP:	
   283                           ; 1 bytes @ 0x2
   284                           
   285  0077                     ??_DOWN:	
   286                           ; 1 bytes @ 0x2
   287                           
   288                           
   289                           ; 1 bytes @ 0x2
   290  0077                     	ds	2
   291  0079                     ??_main:
   292                           
   293                           ; 1 bytes @ 0x4
   294  0079                     	ds	1
   295                           
   296                           	psect	maintext
   297  008C                     __pmaintext:	
   298 ;;
   299 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   300 ;;
   301 ;; *************** function _main *****************
   302 ;; Defined at:
   303 ;;		line 57 in file "Principal_Slave2.c"
   304 ;; Parameters:    Size  Location     Type
   305 ;;		None
   306 ;; Auto vars:     Size  Location     Type
   307 ;;		None
   308 ;; Return value:  Size  Location     Type
   309 ;;                  1    wreg      void 
   310 ;; Registers used:
   311 ;;		wreg, status,2, status,0, pclath, cstack
   312 ;; Tracked objects:
   313 ;;		On entry : B00/0
   314 ;;		On exit  : 0/0
   315 ;;		Unchanged: 0/0
   316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   317 ;;      Params:         0       0       0       0       0
   318 ;;      Locals:         0       0       0       0       0
   319 ;;      Temps:          1       0       0       0       0
   320 ;;      Totals:         1       0       0       0       0
   321 ;;Total ram usage:        1 bytes
   322 ;; Hardware stack levels required when called:    2
   323 ;; This function calls:
   324 ;;		_DOWN
   325 ;;		_SETUP
   326 ;;		_UP
   327 ;; This function is called by:
   328 ;;		Startup code after reset
   329 ;; This function uses a non-reentrant model
   330 ;;
   331                           
   332                           
   333                           ;psect for function _main
   334  008C                     _main:
   335  008C                     l788:	
   336                           ;incstack = 0
   337                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   338                           
   339                           
   340                           ;Principal_Slave2.c: 59:     SETUP();
   341  008C  120A  118A  20B7  120A  118A  	fcall	_SETUP
   342  0091                     l70:	
   343                           ;Principal_Slave2.c: 61:     while(1){
   344                           
   345                           
   346                           ;Principal_Slave2.c: 63:        UP();
   347  0091  120A  118A  2018  120A  118A  	fcall	_UP
   348                           
   349                           ;Principal_Slave2.c: 64:        DOWN();
   350  0096  120A  118A  2053  120A  118A  	fcall	_DOWN
   351  009B                     l790:
   352                           
   353                           ;Principal_Slave2.c: 67:     if (SSPSTATbits.BF == 0) {
   354  009B  1683               	bsf	3,5	;RP0=1, select bank1
   355  009C  1303               	bcf	3,6	;RP1=0, select bank1
   356  009D  1814               	btfsc	20,0	;volatile
   357  009E  28A0               	goto	u141
   358  009F  28A1               	goto	u140
   359  00A0                     u141:
   360  00A0  28A5               	goto	l794
   361  00A1                     u140:
   362  00A1                     l792:
   363                           
   364                           ;Principal_Slave2.c: 68:         SSPBUF = CONT;
   365  00A1  0870               	movf	_CONT,w
   366  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   367  00A3  1303               	bcf	3,6	;RP1=0, select bank0
   368  00A4  0093               	movwf	19	;volatile
   369  00A5                     l794:
   370                           
   371                           ;Principal_Slave2.c: 72:     if (SSPSTATbits.BF ) {
   372  00A5  1683               	bsf	3,5	;RP0=1, select bank1
   373  00A6  1303               	bcf	3,6	;RP1=0, select bank1
   374  00A7  1C14               	btfss	20,0	;volatile
   375  00A8  28AA               	goto	u151
   376  00A9  28AB               	goto	u150
   377  00AA                     u151:
   378  00AA  2891               	goto	l70
   379  00AB                     u150:
   380  00AB                     l796:
   381                           
   382                           ;Principal_Slave2.c: 74:           rxByteMaster = SSPBUF;
   383  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   384  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   385  00AD  0813               	movf	19,w	;volatile
   386  00AE  00F9               	movwf	??_main
   387  00AF  0879               	movf	??_main,w
   388  00B0  00F1               	movwf	_rxByteMaster
   389                           
   390                           ;Principal_Slave2.c: 77:           SSPBUF = CONT;
   391  00B1  0870               	movf	_CONT,w
   392  00B2  0093               	movwf	19	;volatile
   393  00B3  2891               	goto	l70
   394  00B4  120A  118A  280C   	ljmp	start
   395  00B7                     __end_of_main:
   396                           
   397                           	psect	text1
   398  0018                     __ptext1:	
   399 ;; *************** function _UP *****************
   400 ;; Defined at:
   401 ;;		line 119 in file "Principal_Slave2.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;		None
   404 ;; Auto vars:     Size  Location     Type
   405 ;;		None
   406 ;; Return value:  Size  Location     Type
   407 ;;                  1    wreg      void 
   408 ;; Registers used:
   409 ;;		wreg, status,2, status,0
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   415 ;;      Params:         0       0       0       0       0
   416 ;;      Locals:         0       0       0       0       0
   417 ;;      Temps:          2       0       0       0       0
   418 ;;      Totals:         2       0       0       0       0
   419 ;;Total ram usage:        2 bytes
   420 ;; Hardware stack levels used:    1
   421 ;; Hardware stack levels required when called:    1
   422 ;; This function calls:
   423 ;;		Nothing
   424 ;; This function is called by:
   425 ;;		_main
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           
   430                           ;psect for function _UP
   431  0018                     _UP:
   432  0018                     l728:	
   433                           ;incstack = 0
   434                           ; Regs used in _UP: [wreg+status,2+status,0]
   435                           
   436                           
   437                           ;Principal_Slave2.c: 121:     if (FLAG_PUSH == 1){
   438  0018  0374               	decf	_FLAG_PUSH,w
   439  0019  1D03               	btfss	3,2
   440  001A  281C               	goto	u11
   441  001B  281D               	goto	u10
   442  001C                     u11:
   443  001C  283D               	goto	l746
   444  001D                     u10:
   445  001D                     l730:
   446                           
   447                           ;Principal_Slave2.c: 122:         if (FLAG_UP == 0){
   448  001D  0873               	movf	_FLAG_UP,w
   449  001E  1D03               	btfss	3,2
   450  001F  2821               	goto	u21
   451  0020  2822               	goto	u20
   452  0021                     u21:
   453  0021  283D               	goto	l746
   454  0022                     u20:
   455  0022                     l732:
   456                           
   457                           ;Principal_Slave2.c: 123:             if (PORTBbits.RB0 == 0){
   458  0022  1283               	bcf	3,5	;RP0=0, select bank0
   459  0023  1303               	bcf	3,6	;RP1=0, select bank0
   460  0024  1806               	btfsc	6,0	;volatile
   461  0025  2827               	goto	u31
   462  0026  2828               	goto	u30
   463  0027                     u31:
   464  0027  283D               	goto	l746
   465  0028                     u30:
   466  0028                     l734:
   467                           
   468                           ;Principal_Slave2.c: 124:                 _delay((unsigned long)((10)*(8000000/4000.0)))
      +                          ;
   469  0028  301A               	movlw	26
   470  0029  00F8               	movwf	??_UP+1
   471  002A  30F8               	movlw	248
   472  002B  00F7               	movwf	??_UP
   473  002C                     u167:
   474  002C  0BF7               	decfsz	??_UP,f
   475  002D  282C               	goto	u167
   476  002E  0BF8               	decfsz	??_UP+1,f
   477  002F  282C               	goto	u167
   478  0030  0000               	nop
   479  0031                     l736:
   480                           
   481                           ;Principal_Slave2.c: 126:                 CONT++;
   482  0031  3001               	movlw	1
   483  0032  00F7               	movwf	??_UP
   484  0033  0877               	movf	??_UP,w
   485  0034  07F0               	addwf	_CONT,f
   486  0035                     l738:
   487                           
   488                           ;Principal_Slave2.c: 127:                 PORTD = CONT ;
   489  0035  0870               	movf	_CONT,w
   490  0036  1283               	bcf	3,5	;RP0=0, select bank0
   491  0037  1303               	bcf	3,6	;RP1=0, select bank0
   492  0038  0088               	movwf	8	;volatile
   493  0039                     l740:
   494                           
   495                           ;Principal_Slave2.c: 128:                 FLAG_PUSH = 0;
   496  0039  01F4               	clrf	_FLAG_PUSH
   497  003A                     l742:
   498                           
   499                           ;Principal_Slave2.c: 129:                 FLAG_UP = 1;
   500  003A  01F3               	clrf	_FLAG_UP
   501  003B  0AF3               	incf	_FLAG_UP,f
   502  003C                     l744:
   503                           
   504                           ;Principal_Slave2.c: 130:                 INTCONbits.RBIE = 1;
   505  003C  158B               	bsf	11,3	;volatile
   506  003D                     l746:
   507                           
   508                           ;Principal_Slave2.c: 135:     if (FLAG_UP == 1){
   509  003D  0373               	decf	_FLAG_UP,w
   510  003E  1D03               	btfss	3,2
   511  003F  2841               	goto	u41
   512  0040  2842               	goto	u40
   513  0041                     u41:
   514  0041  2852               	goto	l86
   515  0042                     u40:
   516  0042                     l748:
   517                           
   518                           ;Principal_Slave2.c: 136:         if (PORTBbits.RB0 == 1){
   519  0042  1283               	bcf	3,5	;RP0=0, select bank0
   520  0043  1303               	bcf	3,6	;RP1=0, select bank0
   521  0044  1C06               	btfss	6,0	;volatile
   522  0045  2847               	goto	u51
   523  0046  2848               	goto	u50
   524  0047                     u51:
   525  0047  2852               	goto	l86
   526  0048                     u50:
   527  0048                     l750:
   528                           
   529                           ;Principal_Slave2.c: 137:         _delay((unsigned long)((10)*(8000000/4000.0)));
   530  0048  301A               	movlw	26
   531  0049  00F8               	movwf	??_UP+1
   532  004A  30F8               	movlw	248
   533  004B  00F7               	movwf	??_UP
   534  004C                     u177:
   535  004C  0BF7               	decfsz	??_UP,f
   536  004D  284C               	goto	u177
   537  004E  0BF8               	decfsz	??_UP+1,f
   538  004F  284C               	goto	u177
   539  0050  0000               	nop
   540  0051                     l752:
   541                           
   542                           ;Principal_Slave2.c: 138:         FLAG_UP = 0;
   543  0051  01F3               	clrf	_FLAG_UP
   544  0052                     l86:
   545  0052  0008               	return
   546  0053                     __end_of_UP:
   547                           
   548                           	psect	text2
   549  00B7                     __ptext2:	
   550 ;; *************** function _SETUP *****************
   551 ;; Defined at:
   552 ;;		line 88 in file "Principal_Slave2.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;		None
   555 ;; Auto vars:     Size  Location     Type
   556 ;;		None
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      void 
   559 ;; Registers used:
   560 ;;		wreg, status,2
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   566 ;;      Params:         0       0       0       0       0
   567 ;;      Locals:         0       0       0       0       0
   568 ;;      Temps:          0       0       0       0       0
   569 ;;      Totals:         0       0       0       0       0
   570 ;;Total ram usage:        0 bytes
   571 ;; Hardware stack levels used:    1
   572 ;; Hardware stack levels required when called:    1
   573 ;; This function calls:
   574 ;;		Nothing
   575 ;; This function is called by:
   576 ;;		_main
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           
   581                           ;psect for function _SETUP
   582  00B7                     _SETUP:
   583  00B7                     l686:	
   584                           ;incstack = 0
   585                           ; Regs used in _SETUP: [wreg+status,2]
   586                           
   587                           
   588                           ;Principal_Slave2.c: 90:     TRISD = 0;
   589  00B7  1683               	bsf	3,5	;RP0=1, select bank1
   590  00B8  1303               	bcf	3,6	;RP1=0, select bank1
   591  00B9  0188               	clrf	8	;volatile
   592  00BA                     l688:
   593                           
   594                           ;Principal_Slave2.c: 91:     TRISC = 0b00011000;
   595  00BA  3018               	movlw	24
   596  00BB  0087               	movwf	7	;volatile
   597  00BC                     l690:
   598                           
   599                           ;Principal_Slave2.c: 92:     TRISA = 0b00100000;
   600  00BC  3020               	movlw	32
   601  00BD  0085               	movwf	5	;volatile
   602  00BE                     l692:
   603                           
   604                           ;Principal_Slave2.c: 93:     TRISB = 0b00000101;
   605  00BE  3005               	movlw	5
   606  00BF  0086               	movwf	6	;volatile
   607  00C0                     l694:
   608                           
   609                           ;Principal_Slave2.c: 94:     TRISE = 0;
   610  00C0  0189               	clrf	9	;volatile
   611  00C1                     l696:
   612                           
   613                           ;Principal_Slave2.c: 95:     PORTE = 0;
   614  00C1  1283               	bcf	3,5	;RP0=0, select bank0
   615  00C2  1303               	bcf	3,6	;RP1=0, select bank0
   616  00C3  0189               	clrf	9	;volatile
   617  00C4                     l698:
   618                           
   619                           ;Principal_Slave2.c: 96:     PORTA = 0;
   620  00C4  0185               	clrf	5	;volatile
   621  00C5                     l700:
   622                           
   623                           ;Principal_Slave2.c: 97:     PORTB = 0;
   624  00C5  0186               	clrf	6	;volatile
   625  00C6                     l702:
   626                           
   627                           ;Principal_Slave2.c: 98:     PORTC = 0;
   628  00C6  0187               	clrf	7	;volatile
   629  00C7                     l704:
   630                           
   631                           ;Principal_Slave2.c: 99:     PORTD = 0;
   632  00C7  0188               	clrf	8	;volatile
   633  00C8                     l706:
   634                           
   635                           ;Principal_Slave2.c: 100:     ANSEL = 0;
   636  00C8  1683               	bsf	3,5	;RP0=1, select bank3
   637  00C9  1703               	bsf	3,6	;RP1=1, select bank3
   638  00CA  0188               	clrf	8	;volatile
   639  00CB                     l708:
   640                           
   641                           ;Principal_Slave2.c: 101:     ANSELH = 0;
   642  00CB  0189               	clrf	9	;volatile
   643  00CC                     l710:
   644                           
   645                           ;Principal_Slave2.c: 103:     SSPCONbits.SSPEN = 0;
   646  00CC  1283               	bcf	3,5	;RP0=0, select bank0
   647  00CD  1303               	bcf	3,6	;RP1=0, select bank0
   648  00CE  1294               	bcf	20,5	;volatile
   649  00CF                     l712:
   650                           
   651                           ;Principal_Slave2.c: 104:     SSPSTAT = 0X00;
   652  00CF  1683               	bsf	3,5	;RP0=1, select bank1
   653  00D0  1303               	bcf	3,6	;RP1=0, select bank1
   654  00D1  0194               	clrf	20	;volatile
   655                           
   656                           ;Principal_Slave2.c: 105:     SSPCON= 0X14;
   657  00D2  3014               	movlw	20
   658  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   659  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   660  00D5  0094               	movwf	20	;volatile
   661  00D6                     l714:
   662                           
   663                           ;Principal_Slave2.c: 106:     SSPCONbits.SSPEN = 1;
   664  00D6  1694               	bsf	20,5	;volatile
   665  00D7                     l716:
   666                           
   667                           ;Principal_Slave2.c: 109:     OPTION_REGbits.nRBPU = 1;
   668  00D7  1683               	bsf	3,5	;RP0=1, select bank1
   669  00D8  1303               	bcf	3,6	;RP1=0, select bank1
   670  00D9  1781               	bsf	1,7	;volatile
   671  00DA                     l718:
   672                           
   673                           ;Principal_Slave2.c: 110:     INTCONbits.GIE = 1;
   674  00DA  178B               	bsf	11,7	;volatile
   675  00DB                     l720:
   676                           
   677                           ;Principal_Slave2.c: 111:     INTCONbits.PEIE = 1;
   678  00DB  170B               	bsf	11,6	;volatile
   679  00DC                     l722:
   680                           
   681                           ;Principal_Slave2.c: 112:     INTCONbits.RBIE = 1;
   682  00DC  158B               	bsf	11,3	;volatile
   683  00DD                     l724:
   684                           
   685                           ;Principal_Slave2.c: 113:     INTCONbits.RBIF = 1;
   686  00DD  140B               	bsf	11,0	;volatile
   687  00DE                     l78:
   688  00DE  0008               	return
   689  00DF                     __end_of_SETUP:
   690                           
   691                           	psect	text3
   692  0053                     __ptext3:	
   693 ;; *************** function _DOWN *****************
   694 ;; Defined at:
   695 ;;		line 145 in file "Principal_Slave2.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, status,2, status,0
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         0       0       0       0       0
   711 ;;      Temps:          2       0       0       0       0
   712 ;;      Totals:         2       0       0       0       0
   713 ;;Total ram usage:        2 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; Hardware stack levels required when called:    1
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_main
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           
   724                           ;psect for function _DOWN
   725  0053                     _DOWN:
   726  0053                     l754:	
   727                           ;incstack = 0
   728                           ; Regs used in _DOWN: [wreg+status,2+status,0]
   729                           
   730                           
   731                           ;Principal_Slave2.c: 147:     if (FLAG_PUSH == 1){
   732  0053  0374               	decf	_FLAG_PUSH,w
   733  0054  1D03               	btfss	3,2
   734  0055  2857               	goto	u61
   735  0056  2858               	goto	u60
   736  0057                     u61:
   737  0057  2876               	goto	l772
   738  0058                     u60:
   739  0058                     l756:
   740                           
   741                           ;Principal_Slave2.c: 148:         if (FLAG_DOWN == 0){
   742  0058  0872               	movf	_FLAG_DOWN,w
   743  0059  1D03               	btfss	3,2
   744  005A  285C               	goto	u71
   745  005B  285D               	goto	u70
   746  005C                     u71:
   747  005C  2876               	goto	l772
   748  005D                     u70:
   749  005D                     l758:
   750                           
   751                           ;Principal_Slave2.c: 149:             if (PORTBbits.RB2 == 0){
   752  005D  1283               	bcf	3,5	;RP0=0, select bank0
   753  005E  1303               	bcf	3,6	;RP1=0, select bank0
   754  005F  1906               	btfsc	6,2	;volatile
   755  0060  2862               	goto	u81
   756  0061  2863               	goto	u80
   757  0062                     u81:
   758  0062  2876               	goto	l772
   759  0063                     u80:
   760  0063                     l760:
   761                           
   762                           ;Principal_Slave2.c: 150:                 _delay((unsigned long)((10)*(8000000/4000.0)))
      +                          ;
   763  0063  301A               	movlw	26
   764  0064  00F8               	movwf	??_DOWN+1
   765  0065  30F8               	movlw	248
   766  0066  00F7               	movwf	??_DOWN
   767  0067                     u187:
   768  0067  0BF7               	decfsz	??_DOWN,f
   769  0068  2867               	goto	u187
   770  0069  0BF8               	decfsz	??_DOWN+1,f
   771  006A  2867               	goto	u187
   772  006B  0000               	nop
   773  006C                     l762:
   774                           
   775                           ;Principal_Slave2.c: 151:                 CONT--;
   776  006C  3001               	movlw	1
   777  006D  02F0               	subwf	_CONT,f
   778  006E                     l764:
   779                           
   780                           ;Principal_Slave2.c: 152:                 PORTD = CONT ;
   781  006E  0870               	movf	_CONT,w
   782  006F  1283               	bcf	3,5	;RP0=0, select bank0
   783  0070  1303               	bcf	3,6	;RP1=0, select bank0
   784  0071  0088               	movwf	8	;volatile
   785  0072                     l766:
   786                           
   787                           ;Principal_Slave2.c: 153:                 FLAG_PUSH = 0;
   788  0072  01F4               	clrf	_FLAG_PUSH
   789  0073                     l768:
   790                           
   791                           ;Principal_Slave2.c: 154:                 FLAG_DOWN = 1;
   792  0073  01F2               	clrf	_FLAG_DOWN
   793  0074  0AF2               	incf	_FLAG_DOWN,f
   794  0075                     l770:
   795                           
   796                           ;Principal_Slave2.c: 155:                 INTCONbits.RBIE = 1;
   797  0075  158B               	bsf	11,3	;volatile
   798  0076                     l772:
   799                           
   800                           ;Principal_Slave2.c: 160:     if (FLAG_DOWN == 1){
   801  0076  0372               	decf	_FLAG_DOWN,w
   802  0077  1D03               	btfss	3,2
   803  0078  287A               	goto	u91
   804  0079  287B               	goto	u90
   805  007A                     u91:
   806  007A  288B               	goto	l94
   807  007B                     u90:
   808  007B                     l774:
   809                           
   810                           ;Principal_Slave2.c: 161:         if (PORTBbits.RB2 == 1){
   811  007B  1283               	bcf	3,5	;RP0=0, select bank0
   812  007C  1303               	bcf	3,6	;RP1=0, select bank0
   813  007D  1D06               	btfss	6,2	;volatile
   814  007E  2880               	goto	u101
   815  007F  2881               	goto	u100
   816  0080                     u101:
   817  0080  288B               	goto	l94
   818  0081                     u100:
   819  0081                     l776:
   820                           
   821                           ;Principal_Slave2.c: 162:         _delay((unsigned long)((10)*(8000000/4000.0)));
   822  0081  301A               	movlw	26
   823  0082  00F8               	movwf	??_DOWN+1
   824  0083  30F8               	movlw	248
   825  0084  00F7               	movwf	??_DOWN
   826  0085                     u197:
   827  0085  0BF7               	decfsz	??_DOWN,f
   828  0086  2885               	goto	u197
   829  0087  0BF8               	decfsz	??_DOWN+1,f
   830  0088  2885               	goto	u197
   831  0089  0000               	nop
   832  008A                     l778:
   833                           
   834                           ;Principal_Slave2.c: 163:         FLAG_DOWN = 0;
   835  008A  01F2               	clrf	_FLAG_DOWN
   836  008B                     l94:
   837  008B  0008               	return
   838  008C                     __end_of_DOWN:
   839                           
   840                           	psect	text4
   841  00DF                     __ptext4:	
   842 ;; *************** function _ISR *****************
   843 ;; Defined at:
   844 ;;		line 45 in file "Principal_Slave2.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   858 ;;      Params:         0       0       0       0       0
   859 ;;      Locals:         0       0       0       0       0
   860 ;;      Temps:          2       0       0       0       0
   861 ;;      Totals:         2       0       0       0       0
   862 ;;Total ram usage:        2 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		Interrupt level 1
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           
   872                           ;psect for function _ISR
   873  00DF                     _ISR:
   874  00DF                     i1l780:
   875                           
   876                           ;Principal_Slave2.c: 47:     if (INTCONbits.RBIF == 1 && INTCONbits.RBIE == 1){
   877  00DF  1C0B               	btfss	11,0	;volatile
   878  00E0  28E2               	goto	u11_21
   879  00E1  28E3               	goto	u11_20
   880  00E2                     u11_21:
   881  00E2  28EF               	goto	i1l65
   882  00E3                     u11_20:
   883  00E3                     i1l782:
   884  00E3  1D8B               	btfss	11,3	;volatile
   885  00E4  28E6               	goto	u12_21
   886  00E5  28E7               	goto	u12_20
   887  00E6                     u12_21:
   888  00E6  28EF               	goto	i1l65
   889  00E7                     u12_20:
   890  00E7                     i1l784:
   891                           
   892                           ;Principal_Slave2.c: 50:         if (FLAG_PUSH == 0){
   893  00E7  0874               	movf	_FLAG_PUSH,w
   894  00E8  1D03               	btfss	3,2
   895  00E9  28EB               	goto	u13_21
   896  00EA  28EC               	goto	u13_20
   897  00EB                     u13_21:
   898  00EB  28EF               	goto	i1l65
   899  00EC                     u13_20:
   900  00EC                     i1l786:
   901                           
   902                           ;Principal_Slave2.c: 51:             FLAG_PUSH = 1;
   903  00EC  01F4               	clrf	_FLAG_PUSH
   904  00ED  0AF4               	incf	_FLAG_PUSH,f
   905                           
   906                           ;Principal_Slave2.c: 52:             INTCONbits.RBIE = 0;
   907  00EE  118B               	bcf	11,3	;volatile
   908  00EF                     i1l65:
   909  00EF  0876               	movf	??_ISR+1,w
   910  00F0  008A               	movwf	10
   911  00F1  0E75               	swapf	??_ISR,w
   912  00F2  0083               	movwf	3
   913  00F3  0EFE               	swapf	btemp,f
   914  00F4  0E7E               	swapf	btemp,w
   915  00F5  0009               	retfie
   916  00F6                     __end_of_ISR:
   917  007E                     btemp	set	126	;btemp
   918  007E                     wtemp0	set	126
   919                           
   920                           	psect	intentry
   921  0004                     __pintentry:	
   922                           ;incstack = 0
   923                           ; Regs used in _ISR: [wreg+status,2+status,0]
   924                           
   925  0004                     interrupt_function:
   926  007E                     saved_w	set	btemp
   927  0004  00FE               	movwf	btemp
   928  0005  0E03               	swapf	3,w
   929  0006  00F5               	movwf	??_ISR
   930  0007  080A               	movf	10,w
   931  0008  00F6               	movwf	??_ISR+1
   932  0009  120A  118A  28DF   	ljmp	_ISR
   933                           
   934                           	psect	config
   935                           
   936                           ;Config register CONFIG1 @ 0x2007
   937                           ;	Oscillator Selection bits
   938                           ;	FOSC = EXTRC_CLKOUT, RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/
      +                          OSC1/CLKIN
   939                           ;	Watchdog Timer Enable bit
   940                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   941                           ;	Power-up Timer Enable bit
   942                           ;	PWRTE = OFF, PWRT disabled
   943                           ;	RE3/MCLR pin function select bit
   944                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   945                           ;	Code Protection bit
   946                           ;	CP = OFF, Program memory code protection is disabled
   947                           ;	Data Code Protection bit
   948                           ;	CPD = OFF, Data memory code protection is disabled
   949                           ;	Brown Out Reset Selection bits
   950                           ;	BOREN = OFF, BOR disabled
   951                           ;	Internal External Switchover bit
   952                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   953                           ;	Fail-Safe Clock Monitor Enabled bit
   954                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   955                           ;	Low Voltage Programming Enable bit
   956                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   957                           ;	In-Circuit Debugger Mode bit
   958                           ;	DEBUG = 0x1, unprogrammed default
   959  2007                     	org	8199
   960  2007  20D7               	dw	8407
   961                           
   962                           ;Config register CONFIG2 @ 0x2008
   963                           ;	Brown-out Reset Selection bit
   964                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   965                           ;	Flash Program Memory Self Write Enable bits
   966                           ;	WRT = OFF, Write protection off
   967  2008                     	org	8200
   968  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_DOWN
    _main->_UP

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              4 COMMON     1     1      0
                               _DOWN
                              _SETUP
                                 _UP
 ---------------------------------------------------------------------------------
 (1) _UP                                                   2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SETUP                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DOWN                                                 2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DOWN
   _SETUP
   _UP

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       A      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 15 18:12:08 2021

            _SSPSTATbits 0094                       l70 0091                       l94 008B  
                     l78 00DE                       l86 0052                       u10 001D  
                     u11 001C                       u20 0022                       u21 0021  
                     u30 0028                       u31 0027                       u40 0042  
                     u41 0041                       u50 0048                       u51 0047  
                     u60 0058                       u61 0057                       u70 005D  
                     u71 005C                       u80 0063                       u81 0062  
                     u90 007B                       _UP 0018                       u91 007A  
                    ?_UP 0075                      l700 00C5                      l710 00CC  
                    l702 00C6                      l720 00DB                      l712 00CF  
                    l704 00C7                      l722 00DC                      l714 00D6  
                    l706 00C8                      l730 001D                      l724 00DD  
                    l716 00D7                      l708 00CB                      l740 0039  
                    l732 0022                      l718 00DA                      l750 0048  
                    l742 003A                      l734 0028                      l760 0063  
                    l752 0051                      l744 003C                      l736 0031  
                    l728 0018                      l770 0075                      l762 006C  
                    l754 0053                      l690 00BC                      l738 0035  
                    l746 003D                      l764 006E                      l756 0058  
                    l772 0076                      l692 00BE                      l748 0042  
                    l774 007B                      l766 0072                      l758 005D  
                    l694 00C0                      l686 00B7                      l790 009B  
                    l776 0081                      l768 0073                      l696 00C1  
                    l688 00BA                      l792 00A1                      l778 008A  
                    l698 00C4                      l794 00A5                      l796 00AB  
                    l788 008C                      u100 0081                      u101 0080  
                    u140 00A1                      u141 00A0                      u150 00AB  
                    u151 00AA                      u167 002C                      u177 004C  
                    u187 0067                      _ISR 00DF                      u197 0085  
                   ??_UP 0077                     ?_ISR 0075                     _CONT 0070  
                   _DOWN 0053                     i1l65 00EF                     _main 008C  
                   btemp 007E                     start 000C                    ??_ISR 0075  
                  ?_DOWN 0075                    ?_main 0075                    _ANSEL 0188  
                  i1l780 00DF                    i1l782 00E3                    i1l784 00E7  
                  i1l786 00EC                    u11_20 00E3                    u11_21 00E2  
                  u12_20 00E7                    u12_21 00E6                    u13_20 00EC  
                  u13_21 00EB                    _SETUP 00B7                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _PORTE 0009                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  pclath 000A                    status 0003                    wtemp0 007E  
           __end_of_DOWN 008C          __initialization 000F             __end_of_main 00B7  
                 ??_DOWN 0077                   ??_main 0079                   ?_SETUP 0075  
                 _ANSELH 0189                   _SSPBUF 0013                   _SSPCON 0014  
                 saved_w 007E  __end_of__initialization 0014            __end_of_SETUP 00DF  
         __pcstackCOMMON 0075               __end_of_UP 0053                  ??_SETUP 0077  
         _OPTION_REGbits 0081               __pmaintext 008C               __pintentry 0004  
                _FLAG_UP 0073                  _SSPSTAT 0094                _FLAG_DOWN 0072  
              _FLAG_PUSH 0074                  __ptext1 0018                  __ptext2 00B7  
                __ptext3 0053                  __ptext4 00DF             __size_of_ISR 0017  
   end_of_initialization 0014                _PORTBbits 0006      start_initialization 000F  
            __end_of_ISR 00F6              __pbssCOMMON 0070                ___latbits 0002  
         __size_of_SETUP 0028              __size_of_UP 003B        interrupt_function 0004  
           _rxByteMaster 0071            __size_of_DOWN 0039            __size_of_main 002B  
             _INTCONbits 000B                 intlevel1 0000               _SSPCONbits 0014  
