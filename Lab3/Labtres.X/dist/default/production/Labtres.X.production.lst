

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Feb 07 23:10:25 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.31
    36                           ; Generated 13/10/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0088                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  008F                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0095                     	;# 
   123  0096                     	;# 
   124  0097                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  0105                     	;# 
   134  0107                     	;# 
   135  0108                     	;# 
   136  0109                     	;# 
   137  010C                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0187                     	;# 
   144  0188                     	;# 
   145  0189                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0088                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  008F                     	;# 
   271  0090                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  009F                     	;# 
   289  0105                     	;# 
   290  0107                     	;# 
   291  0108                     	;# 
   292  0109                     	;# 
   293  010C                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  010F                     	;# 
   298  0185                     	;# 
   299  0187                     	;# 
   300  0188                     	;# 
   301  0189                     	;# 
   302  018C                     	;# 
   303  018D                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0006                     	;# 
   311  0007                     	;# 
   312  0008                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  000E                     	;# 
   320  000F                     	;# 
   321  0010                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0014                     	;# 
   326  0015                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  001D                     	;# 
   337  001E                     	;# 
   338  001F                     	;# 
   339  0081                     	;# 
   340  0085                     	;# 
   341  0086                     	;# 
   342  0087                     	;# 
   343  0088                     	;# 
   344  0089                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  008F                     	;# 
   349  0090                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  0105                     	;# 
   368  0107                     	;# 
   369  0108                     	;# 
   370  0109                     	;# 
   371  010C                     	;# 
   372  010C                     	;# 
   373  010D                     	;# 
   374  010E                     	;# 
   375  010F                     	;# 
   376  0185                     	;# 
   377  0187                     	;# 
   378  0188                     	;# 
   379  0189                     	;# 
   380  018C                     	;# 
   381  018D                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0088                     	;# 
   422  0089                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  008F                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0094                     	;# 
   434  0095                     	;# 
   435  0096                     	;# 
   436  0097                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009A                     	;# 
   440  009B                     	;# 
   441  009C                     	;# 
   442  009D                     	;# 
   443  009E                     	;# 
   444  009F                     	;# 
   445  0105                     	;# 
   446  0107                     	;# 
   447  0108                     	;# 
   448  0109                     	;# 
   449  010C                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  010F                     	;# 
   454  0185                     	;# 
   455  0187                     	;# 
   456  0188                     	;# 
   457  0189                     	;# 
   458  018C                     	;# 
   459  018D                     	;# 
   460                           
   461                           	psect	idataBANK0
   462  0742                     __pidataBANK0:
   463                           
   464                           ;initializer for _valorSerial
   465  0742  3445               	retlw	69
   466                           
   467                           ;initializer for _banderaADC
   468  0743  3401               	retlw	1
   469  001E                     _ADRESH	set	30
   470  000B                     _INTCONbits	set	11
   471  0019                     _TXREG	set	25
   472  001A                     _RCREG	set	26
   473  0018                     _RCSTAbits	set	24
   474  0007                     _PORTCbits	set	7
   475  001F                     _ADCON0bits	set	31
   476  0007                     _PORTC	set	7
   477  0008                     _PORTD	set	8
   478  000C                     _PIR1bits	set	12
   479  009E                     _ADRESL	set	158
   480  0089                     _TRISEbits	set	137
   481  0085                     _TRISAbits	set	133
   482  009F                     _ADCON1bits	set	159
   483  009A                     _SPBRGH	set	154
   484  0099                     _SPBRG	set	153
   485  0098                     _TXSTAbits	set	152
   486  0087                     _TRISC	set	135
   487  0088                     _TRISD	set	136
   488  008C                     _PIE1bits	set	140
   489  0188                     _ANSELbits	set	392
   490  0187                     _BAUDCTLbits	set	391
   491                           
   492                           	psect	strings
   493  0702                     __pstrings:
   494  0702                     stringtab:
   495  0702                     __stringtab:
   496  0702                     stringcode:	
   497                           ;	String table - string pointers are 1 byte each
   498                           
   499  0702                     stringdir:
   500  0702  3007               	movlw	high stringdir
   501  0703  008A               	movwf	10
   502  0704  0804               	movf	4,w
   503  0705  0A84               	incf	4,f
   504  0706  0782               	addwf	2,f
   505  0707                     __stringbase:
   506  0707  3400               	retlw	0
   507  0708                     __end_of__stringtab:
   508  0708                     STR_1:
   509  0708  3453               	retlw	83	;'S'
   510  0709  3431               	retlw	49	;'1'
   511  070A  3420               	retlw	32	;' '
   512  070B  3420               	retlw	32	;' '
   513  070C  3420               	retlw	32	;' '
   514  070D  3420               	retlw	32	;' '
   515  070E  3453               	retlw	83	;'S'
   516  070F  3432               	retlw	50	;'2'
   517  0710  3420               	retlw	32	;' '
   518  0711  3420               	retlw	32	;' '
   519  0712  3420               	retlw	32	;' '
   520  0713  3420               	retlw	32	;' '
   521  0714  3453               	retlw	83	;'S'
   522  0715  3433               	retlw	51	;'3'
   523  0716  3400               	retlw	0
   524                           
   525                           	psect	cinit
   526  000F                     start_initialization:	
   527                           ; #config settings
   528                           
   529  000F                     __initialization:
   530                           
   531                           ; Initialize objects allocated to BANK0
   532  000F  120A  118A  2742  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   533  0014  00DF               	movwf	__pdataBANK0& (0+127)
   534  0015  120A  118A  2743  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   535  001A  00E0               	movwf	(__pdataBANK0+1)& (0+127)
   536                           
   537                           ; Clear objects allocated to BANK0
   538  001B  1383               	bcf	3,7	;select IRP bank0
   539  001C  3020               	movlw	low __pbssBANK0
   540  001D  0084               	movwf	4
   541  001E  3045               	movlw	low (__pbssBANK0+37)
   542  001F  120A  118A  273A  120A  118A  	fcall	clear_ram0
   543                           
   544                           ; Clear objects allocated to COMMON
   545  0024  01FA               	clrf	__pbssCOMMON& (0+127)
   546  0025  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   547  0026                     end_of_initialization:	
   548                           ;End of C runtime variable initialization code
   549                           
   550  0026                     __end_of__initialization:
   551  0026  0183               	clrf	3
   552  0027  120A  118A  282A   	ljmp	_main	;jump to C main() function
   553                           
   554                           	psect	bssCOMMON
   555  007A                     __pbssCOMMON:
   556  007A                     _valorADC_CH0:
   557  007A                     	ds	1
   558  007B                     _valorADC_CH5:
   559  007B                     	ds	1
   560                           
   561                           	psect	bssBANK0
   562  0020                     __pbssBANK0:
   563  0020                     _linea2:
   564  0020                     	ds	12
   565  002C                     _str:
   566  002C                     	ds	6
   567  0032                     uint_to_array@F1341:
   568  0032                     	ds	6
   569  0038                     mapear@F1350:
   570  0038                     	ds	6
   571  003E                     _contador:
   572  003E                     	ds	1
   573  003F                     _banderaSerial:
   574  003F                     	ds	1
   575  0040                     _pot2:
   576  0040                     	ds	1
   577  0041                     _pot1:
   578  0041                     	ds	1
   579  0042                     _num3:
   580  0042                     	ds	1
   581  0043                     _num2:
   582  0043                     	ds	1
   583  0044                     _num1:
   584  0044                     	ds	1
   585                           
   586                           	psect	dataBANK0
   587  005F                     __pdataBANK0:
   588  005F                     _valorSerial:
   589  005F                     	ds	1
   590  0060                     _banderaADC:
   591  0060                     	ds	1
   592                           
   593                           	psect	clrtext
   594  073A                     clear_ram0:	
   595                           ;	Called with FSR containing the base address, and
   596                           ;	W with the last address+1
   597                           
   598  073A  0064               	clrwdt	;clear the watchdog before getting into this loop
   599  073B                     clrloop0:
   600  073B  0180               	clrf	0	;clear RAM location pointed to by FSR
   601  073C  0A84               	incf	4,f	;increment pointer
   602  073D  0604               	xorwf	4,w	;XOR with final address
   603  073E  1903               	btfsc	3,2	;have we reached the end yet?
   604  073F  3400               	retlw	0	;all done for this memory range, return
   605  0740  0604               	xorwf	4,w	;XOR again to restore value
   606  0741  2F3B               	goto	clrloop0	;do the next byte
   607                           
   608                           	psect	cstackCOMMON
   609  0070                     __pcstackCOMMON:
   610  0070                     ?_LCD_init:
   611  0070                     ?_LCD_Write_String:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_usart_init:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_usartRC_Read:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_AnalogRead_8:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ?_ADC_CHselect:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ?_LCD_Write_Character:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     ?_uint_to_char:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ?_uint_to_array:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ?_ISR_ADC:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0070                     ??_ISR_ADC:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0070                     ?_main:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0070                     ?_LCD_Cmd:	
   645                           ; 1 bytes @ 0x0
   646                           
   647                           
   648                           ; 1 bytes @ 0x0
   649  0070                     	ds	2
   650  0072                     ?_ADConfig:
   651  0072                     ??_usart_init:	
   652                           ; 1 bytes @ 0x2
   653                           
   654  0072                     ??_usartRC_Read:	
   655                           ; 1 bytes @ 0x2
   656                           
   657  0072                     ?_enviar:	
   658                           ; 1 bytes @ 0x2
   659                           
   660  0072                     ??_AnalogRead_8:	
   661                           ; 1 bytes @ 0x2
   662                           
   663  0072                     ??_ADC_CHselect:	
   664                           ; 1 bytes @ 0x2
   665                           
   666  0072                     ??_LCD_Write_Character:	
   667                           ; 1 bytes @ 0x2
   668                           
   669  0072                     ??_uint_to_char:	
   670                           ; 1 bytes @ 0x2
   671                           
   672  0072                     ??_LCD_Cmd:	
   673                           ; 1 bytes @ 0x2
   674                           
   675  0072                     ?___wmul:	
   676                           ; 1 bytes @ 0x2
   677                           
   678  0072                     enviar@valor2:	
   679                           ; 2 bytes @ 0x2
   680                           
   681  0072                     ADConfig@canal:	
   682                           ; 1 bytes @ 0x2
   683                           
   684  0072                     ___wmul@multiplier:	
   685                           ; 1 bytes @ 0x2
   686                           
   687                           
   688                           ; 2 bytes @ 0x2
   689  0072                     	ds	1
   690  0073                     ??_enviar:
   691  0073                     LCD_Write_Character@caracter:	
   692                           ; 1 bytes @ 0x3
   693                           
   694  0073                     ADConfig@justificado:	
   695                           ; 1 bytes @ 0x3
   696                           
   697                           
   698                           ; 1 bytes @ 0x3
   699  0073                     	ds	1
   700  0074                     ??_ADConfig:
   701  0074                     ??_LCD_Write_String:	
   702                           ; 1 bytes @ 0x4
   703                           
   704  0074                     LCD_Cmd@comando:	
   705                           ; 1 bytes @ 0x4
   706                           
   707  0074                     uint_to_char@numero:	
   708                           ; 1 bytes @ 0x4
   709                           
   710  0074                     usartRC_Read@lectura:	
   711                           ; 1 bytes @ 0x4
   712                           
   713  0074                     enviar@valor1:	
   714                           ; 1 bytes @ 0x4
   715                           
   716  0074                     AnalogRead_8@just:	
   717                           ; 1 bytes @ 0x4
   718                           
   719  0074                     ADC_CHselect@canal:	
   720                           ; 1 bytes @ 0x4
   721                           
   722  0074                     LCD_Write_String@n:	
   723                           ; 1 bytes @ 0x4
   724                           
   725  0074                     ___wmul@multiplicand:	
   726                           ; 2 bytes @ 0x4
   727                           
   728                           
   729                           ; 2 bytes @ 0x4
   730  0074                     	ds	1
   731  0075                     ??_LCD_init:
   732  0075                     ?_LCD_Set_Cursor:	
   733                           ; 1 bytes @ 0x5
   734                           
   735  0075                     LCD_Set_Cursor@columna:	
   736                           ; 1 bytes @ 0x5
   737                           
   738  0075                     uint_to_char@numChr:	
   739                           ; 1 bytes @ 0x5
   740                           
   741  0075                     AnalogRead_8@conversion:	
   742                           ; 1 bytes @ 0x5
   743                           
   744                           
   745                           ; 1 bytes @ 0x5
   746  0075                     	ds	1
   747  0076                     ??_LCD_Set_Cursor:
   748  0076                     ??___wmul:	
   749                           ; 1 bytes @ 0x6
   750                           
   751  0076                     LCD_Write_String@a:	
   752                           ; 1 bytes @ 0x6
   753                           
   754  0076                     ADConfig@oscFreq:	
   755                           ; 1 bytes @ 0x6
   756                           
   757  0076                     ___wmul@product:	
   758                           ; 1 bytes @ 0x6
   759                           
   760                           
   761                           ; 2 bytes @ 0x6
   762  0076                     	ds	2
   763  0078                     ?_mapear:
   764  0078                     ??___awdiv:	
   765                           ; 1 bytes @ 0x8
   766                           
   767  0078                     mapear@limReal:	
   768                           ; 1 bytes @ 0x8
   769                           
   770  0078                     LCD_Set_Cursor@linea:	
   771                           ; 1 bytes @ 0x8
   772                           
   773                           
   774                           ; 1 bytes @ 0x8
   775  0078                     	ds	1
   776  0079                     mapear@limSup:
   777  0079                     LCD_Set_Cursor@corrimiento:	
   778                           ; 1 bytes @ 0x9
   779                           
   780                           
   781                           ; 1 bytes @ 0x9
   782  0079                     	ds	1
   783                           
   784                           	psect	cstackBANK0
   785  0045                     __pcstackBANK0:
   786  0045                     ??_mapear:
   787  0045                     ?___awdiv:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0045                     ___awdiv@divisor:	
   791                           ; 2 bytes @ 0x0
   792                           
   793                           
   794                           ; 2 bytes @ 0x0
   795  0045                     	ds	2
   796  0047                     ___awdiv@dividend:
   797                           
   798                           ; 2 bytes @ 0x2
   799  0047                     	ds	2
   800  0049                     mapear@valor:
   801  0049                     ___awdiv@counter:	
   802                           ; 1 bytes @ 0x4
   803                           
   804                           
   805                           ; 1 bytes @ 0x4
   806  0049                     	ds	1
   807  004A                     ___awdiv@sign:
   808  004A                     mapear@resultado:	
   809                           ; 1 bytes @ 0x5
   810                           
   811                           
   812                           ; 6 bytes @ 0x5
   813  004A                     	ds	1
   814  004B                     ___awdiv@quotient:
   815                           
   816                           ; 2 bytes @ 0x6
   817  004B                     	ds	2
   818  004D                     ??_uint_to_array:
   819                           
   820                           ; 1 bytes @ 0x8
   821  004D                     	ds	3
   822  0050                     mapear@dividendo:
   823                           
   824                           ; 2 bytes @ 0xB
   825  0050                     	ds	3
   826  0053                     uint_to_array@decenas:
   827                           
   828                           ; 1 bytes @ 0xE
   829  0053                     	ds	1
   830  0054                     uint_to_array@resultado:
   831                           
   832                           ; 6 bytes @ 0xF
   833  0054                     	ds	6
   834  005A                     uint_to_array@centenas:
   835                           
   836                           ; 1 bytes @ 0x15
   837  005A                     	ds	1
   838  005B                     uint_to_array@numero:
   839                           
   840                           ; 1 bytes @ 0x16
   841  005B                     	ds	1
   842  005C                     ??_main:
   843                           
   844                           ; 1 bytes @ 0x17
   845  005C                     	ds	3
   846                           
   847                           	psect	maintext
   848  002A                     __pmaintext:	
   849 ;;
   850 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   851 ;;
   852 ;; *************** function _main *****************
   853 ;; Defined at:
   854 ;;		line 59 in file "Principal3.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : B00/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   868 ;;      Params:         0       0       0       0       0
   869 ;;      Locals:         0       0       0       0       0
   870 ;;      Temps:          0       3       0       0       0
   871 ;;      Totals:         0       3       0       0       0
   872 ;;Total ram usage:        3 bytes
   873 ;; Hardware stack levels required when called:    3
   874 ;; This function calls:
   875 ;;		_ADC_CHselect
   876 ;;		_ADConfig
   877 ;;		_AnalogRead_8
   878 ;;		_LCD_Set_Cursor
   879 ;;		_LCD_Write_Character
   880 ;;		_LCD_Write_String
   881 ;;		_LCD_init
   882 ;;		_enviar
   883 ;;		_mapear
   884 ;;		_uint_to_array
   885 ;;		_uint_to_char
   886 ;;		_usartRC_Read
   887 ;;		_usart_init
   888 ;; This function is called by:
   889 ;;		Startup code after reset
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           
   894                           ;psect for function _main
   895  002A                     _main:
   896  002A                     l2299:	
   897                           ;incstack = 0
   898                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   899                           
   900                           
   901                           ;Principal3.c: 60:                     LCD_Write_Character('.');
   902  002A  1683               	bsf	3,5	;RP0=1, select bank1
   903  002B  1303               	bcf	3,6	;RP1=0, select bank1
   904  002C  0188               	clrf	8	;volatile
   905  002D                     l2301:
   906                           
   907                           ;Principal3.c: 61:                     LCD_Write_Character(uint_to_char(num1[1]));
   908  002D  3080               	movlw	128
   909  002E  0087               	movwf	7	;volatile
   910  002F                     l2303:
   911                           
   912                           ;Principal3.c: 63:                     LCD_Write_Character('V');
   913  002F  1283               	bcf	3,5	;RP0=0, select bank0
   914  0030  1303               	bcf	3,6	;RP1=0, select bank0
   915  0031  0188               	clrf	8	;volatile
   916  0032                     l2305:
   917                           
   918                           ;Principal3.c: 64: 
   919  0032  0187               	clrf	7	;volatile
   920  0033                     l2307:
   921                           
   922                           ;Principal3.c: 65: 
   923  0033  120A  118A  24D9  120A  118A  	fcall	_LCD_init
   924  0038                     l2309:
   925                           
   926                           ;Principal3.c: 66: 
   927  0038  3005               	movlw	5
   928  0039  1283               	bcf	3,5	;RP0=0, select bank0
   929  003A  1303               	bcf	3,6	;RP1=0, select bank0
   930  003B  00DC               	movwf	??_main
   931  003C  085C               	movf	??_main,w
   932  003D  00F2               	movwf	ADConfig@canal
   933  003E  3048               	movlw	72
   934  003F  00DD               	movwf	??_main+1
   935  0040  085D               	movf	??_main+1,w
   936  0041  00F3               	movwf	ADConfig@justificado
   937  0042  3004               	movlw	4
   938  0043  120A  118A  21DB  120A  118A  	fcall	_ADConfig
   939  0048                     l2311:
   940                           
   941                           ;Principal3.c: 67:                     break;
   942  0048  01F5               	clrf	LCD_Set_Cursor@columna
   943  0049  0AF5               	incf	LCD_Set_Cursor@columna,f
   944  004A  3001               	movlw	1
   945  004B  120A  118A  25EF  120A  118A  	fcall	_LCD_Set_Cursor
   946  0050                     l2313:
   947                           
   948                           ;Principal3.c: 68:                 case 0:
   949  0050  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   950  0051  120A  118A  26A3  120A  118A  	fcall	_LCD_Write_String
   951  0056                     l2315:
   952                           
   953                           ;Principal3.c: 69:                     valorADC_CH0 = AnalogRead_8('H');
   954  0056  120A  118A  2717  120A  118A  	fcall	_usart_init
   955  005B                     l2317:
   956                           
   957                           ;Principal3.c: 73:                     LCD_Write_Character(uint_to_char(num2[0]));
   958  005B  1283               	bcf	3,5	;RP0=0, select bank0
   959  005C  1303               	bcf	3,6	;RP1=0, select bank0
   960  005D  1E8C               	btfss	12,5	;volatile
   961  005E  2860               	goto	u741
   962  005F  2861               	goto	u740
   963  0060                     u741:
   964  0060  2871               	goto	l2323
   965  0061                     u740:
   966  0061                     l2319:
   967                           
   968                           ;Principal3.c: 74:                     LCD_Write_Character('.');
   969  0061  120A  118A  2650  120A  118A  	fcall	_usartRC_Read
   970  0066                     l2321:
   971                           
   972                           ;Principal3.c: 75:                     LCD_Write_Character(uint_to_char(num2[1]));
   973  0066  3007               	movlw	7
   974  0067  1283               	bcf	3,5	;RP0=0, select bank0
   975  0068  1303               	bcf	3,6	;RP1=0, select bank0
   976  0069  00DD               	movwf	??_main+1
   977  006A  307C               	movlw	124
   978  006B  00DC               	movwf	??_main
   979  006C                     u777:
   980  006C  0BDC               	decfsz	??_main,f
   981  006D  286C               	goto	u777
   982  006E  0BDD               	decfsz	??_main+1,f
   983  006F  286C               	goto	u777
   984  0070  0000               	nop
   985  0071                     l2323:
   986                           
   987                           ;Principal3.c: 78: 
   988  0071  1283               	bcf	3,5	;RP0=0, select bank0
   989  0072  1303               	bcf	3,6	;RP1=0, select bank0
   990  0073  1E0C               	btfss	12,4	;volatile
   991  0074  2876               	goto	u751
   992  0075  2877               	goto	u750
   993  0076                     u751:
   994  0076  2881               	goto	l2327
   995  0077                     u750:
   996  0077                     l2325:
   997                           
   998                           ;Principal3.c: 79: 
   999  0077  087A               	movf	_valorADC_CH0,w
  1000  0078  00DC               	movwf	??_main
  1001  0079  085C               	movf	??_main,w
  1002  007A  00F2               	movwf	enviar@valor2
  1003  007B  087B               	movf	_valorADC_CH5,w
  1004  007C  120A  118A  25A3  120A  118A  	fcall	_enviar
  1005  0081                     l2327:
  1006                           
  1007                           ;Principal3.c: 82: 
  1008  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0082  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0083  0360               	decf	_banderaADC,w
  1011  0084  1D03               	btfss	3,2
  1012  0085  2887               	goto	u761
  1013  0086  2888               	goto	u760
  1014  0087                     u761:
  1015  0087  2984               	goto	l2375
  1016  0088                     u760:
  1017  0088  2967               	goto	l2365
  1018  0089                     l2331:
  1019                           
  1020                           ;Principal3.c: 85:                     valorADC_CH5 = 0;
  1021  0089  3048               	movlw	72
  1022  008A  120A  118A  26C8  120A  118A  	fcall	_AnalogRead_8
  1023  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1024  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1025  0091  00DC               	movwf	??_main
  1026  0092  085C               	movf	??_main,w
  1027  0093  00FB               	movwf	_valorADC_CH5
  1028                           
  1029                           ;Principal3.c: 86:             }
  1030  0094  3000               	movlw	0
  1031  0095  120A  118A  235E  120A  118A  	fcall	_ADC_CHselect
  1032  009A                     l2333:
  1033                           
  1034                           ;Principal3.c: 87: 
  1035  009A  30FF               	movlw	255
  1036  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1037  009C  1303               	bcf	3,6	;RP1=0, select bank0
  1038  009D  00DC               	movwf	??_main
  1039  009E  085C               	movf	??_main,w
  1040  009F  00F8               	movwf	mapear@limReal
  1041  00A0  3005               	movlw	5
  1042  00A1  00DD               	movwf	??_main+1
  1043  00A2  085D               	movf	??_main+1,w
  1044  00A3  00F9               	movwf	mapear@limSup
  1045  00A4  087B               	movf	_valorADC_CH5,w
  1046  00A5  120A  118A  22BA  120A  118A  	fcall	_mapear
  1047  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1048  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1049  00AC  00DE               	movwf	??_main+2
  1050  00AD  085E               	movf	??_main+2,w
  1051  00AE  00C4               	movwf	_num1
  1052  00AF                     l2335:
  1053                           
  1054                           ;Principal3.c: 88:             banderaADC = 0;
  1055  00AF  01F5               	clrf	LCD_Set_Cursor@columna
  1056  00B0  3002               	movlw	2
  1057  00B1  120A  118A  25EF  120A  118A  	fcall	_LCD_Set_Cursor
  1058  00B6                     l2337:
  1059                           
  1060                           ;Principal3.c: 89:             PIR1bits.ADIF = 0;
  1061  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1062  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1063  00B8  0844               	movf	_num1,w
  1064  00B9  0084               	movwf	4
  1065  00BA  1383               	bcf	3,7	;select IRP bank0
  1066  00BB  0800               	movf	0,w
  1067  00BC  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1068  00C1  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1069  00C6                     l2339:
  1070                           
  1071                           ;Principal3.c: 90:             PIE1bits.ADIE = 1;
  1072  00C6  302E               	movlw	46
  1073  00C7  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1074  00CC                     l2341:
  1075                           
  1076                           ;Principal3.c: 91:             ADCON0bits.GO_nDONE = 1;
  1077  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1078  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1079  00CE  0844               	movf	_num1,w
  1080  00CF  3E02               	addlw	2
  1081  00D0  0084               	movwf	4
  1082  00D1  1383               	bcf	3,7	;select IRP bank0
  1083  00D2  0800               	movf	0,w
  1084  00D3  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1085  00D8  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1086  00DD                     l2343:
  1087                           
  1088                           ;Principal3.c: 92:         }
  1089  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1090  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1091  00DF  0844               	movf	_num1,w
  1092  00E0  3E04               	addlw	4
  1093  00E1  0084               	movwf	4
  1094  00E2  1383               	bcf	3,7	;select IRP bank0
  1095  00E3  0800               	movf	0,w
  1096  00E4  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1097  00E9  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1098  00EE                     l2345:
  1099                           
  1100                           ;Principal3.c: 93: 
  1101  00EE  3056               	movlw	86
  1102  00EF  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1103                           
  1104                           ;Principal3.c: 97:             LCD_Write_Character(uint_to_char(num3[0]));
  1105  00F4  297A               	goto	l2367
  1106  00F5                     l2347:
  1107                           
  1108                           ;Principal3.c: 99:             LCD_Write_Character(uint_to_char(num3[2]));
  1109  00F5  3048               	movlw	72
  1110  00F6  120A  118A  26C8  120A  118A  	fcall	_AnalogRead_8
  1111  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1112  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1113  00FD  00DC               	movwf	??_main
  1114  00FE  085C               	movf	??_main,w
  1115  00FF  00FA               	movwf	_valorADC_CH0
  1116                           
  1117                           ;Principal3.c: 100:             enviar (valorADC_CH0,valorADC_CH5);
  1118  0100  3001               	movlw	1
  1119  0101  120A  118A  235E  120A  118A  	fcall	_ADC_CHselect
  1120  0106                     l2349:
  1121  0106  30FF               	movlw	255
  1122  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0108  1303               	bcf	3,6	;RP1=0, select bank0
  1124  0109  00DC               	movwf	??_main
  1125  010A  085C               	movf	??_main,w
  1126  010B  00F8               	movwf	mapear@limReal
  1127  010C  3005               	movlw	5
  1128  010D  00DD               	movwf	??_main+1
  1129  010E  085D               	movf	??_main+1,w
  1130  010F  00F9               	movwf	mapear@limSup
  1131  0110  087A               	movf	_valorADC_CH0,w
  1132  0111  120A  118A  22BA  120A  118A  	fcall	_mapear
  1133  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1134  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1135  0118  00DE               	movwf	??_main+2
  1136  0119  085E               	movf	??_main+2,w
  1137  011A  00C3               	movwf	_num2
  1138  011B                     l2351:
  1139  011B  3006               	movlw	6
  1140  011C  00DC               	movwf	??_main
  1141  011D  085C               	movf	??_main,w
  1142  011E  00F5               	movwf	LCD_Set_Cursor@columna
  1143  011F  3002               	movlw	2
  1144  0120  120A  118A  25EF  120A  118A  	fcall	_LCD_Set_Cursor
  1145  0125                     l2353:
  1146  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1147  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0127  0843               	movf	_num2,w
  1149  0128  0084               	movwf	4
  1150  0129  1383               	bcf	3,7	;select IRP bank0
  1151  012A  0800               	movf	0,w
  1152  012B  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1153  0130  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1154  0135                     l2355:
  1155  0135  302E               	movlw	46
  1156  0136  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1157  013B                     l2357:
  1158  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1159  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1160  013D  0843               	movf	_num2,w
  1161  013E  3E02               	addlw	2
  1162  013F  0084               	movwf	4
  1163  0140  1383               	bcf	3,7	;select IRP bank0
  1164  0141  0800               	movf	0,w
  1165  0142  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1166  0147  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1167  014C                     l2359:
  1168  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1169  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1170  014E  0843               	movf	_num2,w
  1171  014F  3E04               	addlw	4
  1172  0150  0084               	movwf	4
  1173  0151  1383               	bcf	3,7	;select IRP bank0
  1174  0152  0800               	movf	0,w
  1175  0153  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1176  0158  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1177  015D                     l2361:
  1178  015D  3056               	movlw	86
  1179  015E  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1180  0163  297A               	goto	l2367
  1181  0164                     l2363:
  1182  0164  01FA               	clrf	_valorADC_CH0
  1183  0165  01FB               	clrf	_valorADC_CH5
  1184  0166  297A               	goto	l2367
  1185  0167                     l2365:
  1186  0167  0C1F               	rrf	31,w	;volatile
  1187  0168  00DC               	movwf	??_main
  1188  0169  0C5C               	rrf	??_main,w
  1189  016A  390F               	andlw	15
  1190  016B  00DD               	movwf	??_main+1
  1191  016C  01DE               	clrf	??_main+2
  1192                           
  1193                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1194                           ; Switch size 1, requested type "simple"
  1195                           ; Number of cases is 1, Range of values is 0 to 0
  1196                           ; switch strategies available:
  1197                           ; Name         Instructions Cycles
  1198                           ; simple_byte            4     3 (average)
  1199                           ; direct_byte           11     8 (fixed)
  1200                           ; jumptable            260     6 (fixed)
  1201                           ;	Chosen strategy is simple_byte
  1202  016D  085E               	movf	??_main+2,w
  1203  016E  3A00               	xorlw	0	; case 0
  1204  016F  1903               	skipnz
  1205  0170  2972               	goto	l2583
  1206  0171  2964               	goto	l2363
  1207  0172                     l2583:
  1208                           
  1209                           ; Switch size 1, requested type "simple"
  1210                           ; Number of cases is 2, Range of values is 0 to 5
  1211                           ; switch strategies available:
  1212                           ; Name         Instructions Cycles
  1213                           ; simple_byte            7     4 (average)
  1214                           ; direct_byte           26     8 (fixed)
  1215                           ; jumptable            260     6 (fixed)
  1216                           ;	Chosen strategy is simple_byte
  1217  0172  085D               	movf	??_main+1,w
  1218  0173  3A00               	xorlw	0	; case 0
  1219  0174  1903               	skipnz
  1220  0175  28F5               	goto	l2347
  1221  0176  3A05               	xorlw	5	; case 5
  1222  0177  1903               	skipnz
  1223  0178  2889               	goto	l2331
  1224  0179  2964               	goto	l2363
  1225  017A                     l2367:
  1226  017A  1283               	bcf	3,5	;RP0=0, select bank0
  1227  017B  1303               	bcf	3,6	;RP1=0, select bank0
  1228  017C  01E0               	clrf	_banderaADC
  1229  017D                     l2369:
  1230  017D  130C               	bcf	12,6	;volatile
  1231  017E                     l2371:
  1232  017E  1683               	bsf	3,5	;RP0=1, select bank1
  1233  017F  1303               	bcf	3,6	;RP1=0, select bank1
  1234  0180  170C               	bsf	12,6	;volatile
  1235  0181                     l2373:
  1236  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1237  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1238  0183  149F               	bsf	31,1	;volatile
  1239  0184                     l2375:
  1240  0184  083E               	movf	_contador,w
  1241  0185  120A  118A  23E9  120A  118A  	fcall	_uint_to_array
  1242  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1243  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1244  018C  00DC               	movwf	??_main
  1245  018D  085C               	movf	??_main,w
  1246  018E  00C2               	movwf	_num3
  1247  018F                     l2377:
  1248  018F  300D               	movlw	13
  1249  0190  00DC               	movwf	??_main
  1250  0191  085C               	movf	??_main,w
  1251  0192  00F5               	movwf	LCD_Set_Cursor@columna
  1252  0193  3002               	movlw	2
  1253  0194  120A  118A  25EF  120A  118A  	fcall	_LCD_Set_Cursor
  1254  0199                     l2379:
  1255  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1256  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1257  019B  0842               	movf	_num3,w
  1258  019C  0084               	movwf	4
  1259  019D  1383               	bcf	3,7	;select IRP bank0
  1260  019E  0800               	movf	0,w
  1261  019F  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1262  01A4  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1263  01A9                     l2381:
  1264  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1265  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1266  01AB  0842               	movf	_num3,w
  1267  01AC  3E02               	addlw	2
  1268  01AD  0084               	movwf	4
  1269  01AE  1383               	bcf	3,7	;select IRP bank0
  1270  01AF  0800               	movf	0,w
  1271  01B0  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1272  01B5  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1273  01BA                     l2383:
  1274  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1275  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1276  01BC  0842               	movf	_num3,w
  1277  01BD  3E04               	addlw	4
  1278  01BE  0084               	movwf	4
  1279  01BF  1383               	bcf	3,7	;select IRP bank0
  1280  01C0  0800               	movf	0,w
  1281  01C1  120A  118A  2540  120A  118A  	fcall	_uint_to_char
  1282  01C6  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  1283  01CB                     l2385:
  1284  01CB  087B               	movf	_valorADC_CH5,w
  1285  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1286  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1287  01CE  00DC               	movwf	??_main
  1288  01CF  085C               	movf	??_main,w
  1289  01D0  00F2               	movwf	enviar@valor2
  1290  01D1  087A               	movf	_valorADC_CH0,w
  1291  01D2  120A  118A  25A3  120A  118A  	fcall	_enviar
  1292  01D7  285B               	goto	l2317
  1293  01D8  120A  118A  280C   	ljmp	start
  1294  01DB                     __end_of_main:
  1295                           
  1296                           	psect	text1
  1297  0717                     __ptext1:	
  1298 ;; *************** function _usart_init *****************
  1299 ;; Defined at:
  1300 ;;		line 10 in file "USART.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;		None
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;		None
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      unsigned char 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1314 ;;      Params:         0       0       0       0       0
  1315 ;;      Locals:         0       0       0       0       0
  1316 ;;      Temps:          0       0       0       0       0
  1317 ;;      Totals:         0       0       0       0       0
  1318 ;;Total ram usage:        0 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:    1
  1321 ;; This function calls:
  1322 ;;		Nothing
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           
  1329                           ;psect for function _usart_init
  1330  0717                     _usart_init:
  1331  0717                     l1749:	
  1332                           ;incstack = 0
  1333                           ; Regs used in _usart_init: [wreg+status,2]
  1334                           
  1335                           
  1336                           ;USART.c: 12:     TXSTAbits.TX9 = 0;
  1337  0717  1683               	bsf	3,5	;RP0=1, select bank1
  1338  0718  1303               	bcf	3,6	;RP1=0, select bank1
  1339  0719  1318               	bcf	24,6	;volatile
  1340                           
  1341                           ;USART.c: 13:     TXSTAbits.SYNC = 0;
  1342  071A  1218               	bcf	24,4	;volatile
  1343                           
  1344                           ;USART.c: 14:     TXSTAbits.BRGH = 1;
  1345  071B  1518               	bsf	24,2	;volatile
  1346                           
  1347                           ;USART.c: 15:     BAUDCTLbits.BRG16 = 0;
  1348  071C  1683               	bsf	3,5	;RP0=1, select bank3
  1349  071D  1703               	bsf	3,6	;RP1=1, select bank3
  1350  071E  1187               	bcf	7,3	;volatile
  1351  071F                     l1751:
  1352                           
  1353                           ;USART.c: 16:     SPBRG = 25;
  1354  071F  3019               	movlw	25
  1355  0720  1683               	bsf	3,5	;RP0=1, select bank1
  1356  0721  1303               	bcf	3,6	;RP1=0, select bank1
  1357  0722  0099               	movwf	25	;volatile
  1358  0723                     l1753:
  1359                           
  1360                           ;USART.c: 17:     SPBRGH = 0;
  1361  0723  019A               	clrf	26	;volatile
  1362  0724                     l1755:
  1363                           
  1364                           ;USART.c: 18:     TXSTAbits.TXEN = 1;
  1365  0724  1698               	bsf	24,5	;volatile
  1366  0725                     l1757:
  1367                           
  1368                           ;USART.c: 19:     RCSTAbits.SPEN = 1;
  1369  0725  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0726  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0727  1798               	bsf	24,7	;volatile
  1372  0728                     l1759:
  1373                           
  1374                           ;USART.c: 20:     RCSTAbits.RX9 = 0;
  1375  0728  1318               	bcf	24,6	;volatile
  1376  0729                     l1761:
  1377                           
  1378                           ;USART.c: 21:     RCSTAbits.CREN = 1;
  1379  0729  1618               	bsf	24,4	;volatile
  1380  072A                     l201:
  1381  072A  0008               	return
  1382  072B                     __end_of_usart_init:
  1383                           
  1384                           	psect	text2
  1385  0650                     __ptext2:	
  1386 ;; *************** function _usartRC_Read *****************
  1387 ;; Defined at:
  1388 ;;		line 25 in file "USART.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  lectura         1    4[COMMON] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      unsigned char 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1402 ;;      Params:         0       0       0       0       0
  1403 ;;      Locals:         1       0       0       0       0
  1404 ;;      Temps:          2       0       0       0       0
  1405 ;;      Totals:         3       0       0       0       0
  1406 ;;Total ram usage:        3 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    1
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _usartRC_Read
  1418  0650                     _usartRC_Read:
  1419  0650                     l1763:	
  1420                           ;incstack = 0
  1421                           ; Regs used in _usartRC_Read: [wreg-fsr0h+status,2+status,0]
  1422                           
  1423                           
  1424                           ;USART.c: 27:     uint8_t lectura = RCREG;
  1425  0650  1283               	bcf	3,5	;RP0=0, select bank0
  1426  0651  1303               	bcf	3,6	;RP1=0, select bank0
  1427  0652  081A               	movf	26,w	;volatile
  1428  0653  00F2               	movwf	??_usartRC_Read
  1429  0654  0872               	movf	??_usartRC_Read,w
  1430  0655  00F4               	movwf	usartRC_Read@lectura
  1431                           
  1432                           ;USART.c: 28:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1433  0656  3007               	movlw	7
  1434  0657  00F3               	movwf	??_usartRC_Read+1
  1435  0658  307D               	movlw	125
  1436  0659  00F2               	movwf	??_usartRC_Read
  1437  065A                     u787:
  1438  065A  0BF2               	decfsz	??_usartRC_Read,f
  1439  065B  2E5A               	goto	u787
  1440  065C  0BF3               	decfsz	??_usartRC_Read+1,f
  1441  065D  2E5A               	goto	u787
  1442                           
  1443                           ;USART.c: 29:     lectura = RCREG;
  1444  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1445  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1446  0660  081A               	movf	26,w	;volatile
  1447  0661  00F2               	movwf	??_usartRC_Read
  1448  0662  0872               	movf	??_usartRC_Read,w
  1449  0663  00F4               	movwf	usartRC_Read@lectura
  1450                           
  1451                           ;USART.c: 31:     switch (lectura){
  1452  0664  2E6D               	goto	l1769
  1453  0665                     l1765:
  1454                           
  1455                           ;USART.c: 33:                     contador ++;
  1456  0665  3001               	movlw	1
  1457  0666  00F2               	movwf	??_usartRC_Read
  1458  0667  0872               	movf	??_usartRC_Read,w
  1459  0668  07BE               	addwf	_contador,f
  1460                           
  1461                           ;USART.c: 35:                     break;
  1462  0669  2E7D               	goto	l209
  1463  066A                     l1767:
  1464                           
  1465                           ;USART.c: 37:                     contador --;
  1466  066A  3001               	movlw	1
  1467  066B  02BE               	subwf	_contador,f
  1468                           
  1469                           ;USART.c: 39:                     break;
  1470  066C  2E7D               	goto	l209
  1471  066D                     l1769:
  1472  066D  0874               	movf	usartRC_Read@lectura,w
  1473  066E  00F2               	movwf	??_usartRC_Read
  1474  066F  01F3               	clrf	??_usartRC_Read+1
  1475                           
  1476                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1477                           ; Switch size 1, requested type "simple"
  1478                           ; Number of cases is 1, Range of values is 0 to 0
  1479                           ; switch strategies available:
  1480                           ; Name         Instructions Cycles
  1481                           ; simple_byte            4     3 (average)
  1482                           ; direct_byte           11     8 (fixed)
  1483                           ; jumptable            260     6 (fixed)
  1484                           ;	Chosen strategy is simple_byte
  1485  0670  0873               	movf	??_usartRC_Read+1,w
  1486  0671  3A00               	xorlw	0	; case 0
  1487  0672  1903               	skipnz
  1488  0673  2E75               	goto	l2585
  1489  0674  2E7D               	goto	l209
  1490  0675                     l2585:
  1491                           
  1492                           ; Switch size 1, requested type "simple"
  1493                           ; Number of cases is 2, Range of values is 43 to 45
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte            7     4 (average)
  1497                           ; direct_byte           20    11 (fixed)
  1498                           ; jumptable            263     9 (fixed)
  1499                           ;	Chosen strategy is simple_byte
  1500  0675  0872               	movf	??_usartRC_Read,w
  1501  0676  3A2B               	xorlw	43	; case 43
  1502  0677  1903               	skipnz
  1503  0678  2E65               	goto	l1765
  1504  0679  3A06               	xorlw	6	; case 45
  1505  067A  1903               	skipnz
  1506  067B  2E6A               	goto	l1767
  1507  067C  2E7D               	goto	l209
  1508  067D                     l209:
  1509  067D  0008               	return
  1510  067E                     __end_of_usartRC_Read:
  1511                           
  1512                           	psect	text3
  1513  0540                     __ptext3:	
  1514 ;; *************** function _uint_to_char *****************
  1515 ;; Defined at:
  1516 ;;		line 108 in file "LCD.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  numero          1    wreg     unsigned char 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  numero          1    4[COMMON] unsigned char 
  1521 ;;  numChr          1    5[COMMON] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      unsigned char 
  1524 ;; Registers used:
  1525 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1531 ;;      Params:         0       0       0       0       0
  1532 ;;      Locals:         2       0       0       0       0
  1533 ;;      Temps:          2       0       0       0       0
  1534 ;;      Totals:         4       0       0       0       0
  1535 ;;Total ram usage:        4 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    1
  1538 ;; This function calls:
  1539 ;;		Nothing
  1540 ;; This function is called by:
  1541 ;;		_main
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           
  1546                           ;psect for function _uint_to_char
  1547  0540                     _uint_to_char:
  1548                           
  1549                           ;incstack = 0
  1550                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
  1551                           ;uint_to_char@numero stored from wreg
  1552  0540  00F4               	movwf	uint_to_char@numero
  1553  0541                     l1871:
  1554                           
  1555                           ;LCD.c: 110:     switch (numero){
  1556  0541  2D79               	goto	l1895
  1557  0542                     l1873:
  1558                           
  1559                           ;LCD.c: 112:             numChr = 48;
  1560  0542  3030               	movlw	48
  1561  0543  00F2               	movwf	??_uint_to_char
  1562  0544  0872               	movf	??_uint_to_char,w
  1563  0545  00F5               	movwf	uint_to_char@numChr
  1564                           
  1565                           ;LCD.c: 113:             break;
  1566  0546  2DA1               	goto	l1897
  1567  0547                     l1875:
  1568                           
  1569                           ;LCD.c: 115:             numChr = 49;
  1570  0547  3031               	movlw	49
  1571  0548  00F2               	movwf	??_uint_to_char
  1572  0549  0872               	movf	??_uint_to_char,w
  1573  054A  00F5               	movwf	uint_to_char@numChr
  1574                           
  1575                           ;LCD.c: 116:             break;
  1576  054B  2DA1               	goto	l1897
  1577  054C                     l1877:
  1578                           
  1579                           ;LCD.c: 118:             numChr = 50;
  1580  054C  3032               	movlw	50
  1581  054D  00F2               	movwf	??_uint_to_char
  1582  054E  0872               	movf	??_uint_to_char,w
  1583  054F  00F5               	movwf	uint_to_char@numChr
  1584                           
  1585                           ;LCD.c: 119:             break;
  1586  0550  2DA1               	goto	l1897
  1587  0551                     l1879:
  1588                           
  1589                           ;LCD.c: 121:             numChr = 51;
  1590  0551  3033               	movlw	51
  1591  0552  00F2               	movwf	??_uint_to_char
  1592  0553  0872               	movf	??_uint_to_char,w
  1593  0554  00F5               	movwf	uint_to_char@numChr
  1594                           
  1595                           ;LCD.c: 122:             break;
  1596  0555  2DA1               	goto	l1897
  1597  0556                     l1881:
  1598                           
  1599                           ;LCD.c: 124:             numChr = 52;
  1600  0556  3034               	movlw	52
  1601  0557  00F2               	movwf	??_uint_to_char
  1602  0558  0872               	movf	??_uint_to_char,w
  1603  0559  00F5               	movwf	uint_to_char@numChr
  1604                           
  1605                           ;LCD.c: 125:             break;
  1606  055A  2DA1               	goto	l1897
  1607  055B                     l1883:
  1608                           
  1609                           ;LCD.c: 127:             numChr = 53;
  1610  055B  3035               	movlw	53
  1611  055C  00F2               	movwf	??_uint_to_char
  1612  055D  0872               	movf	??_uint_to_char,w
  1613  055E  00F5               	movwf	uint_to_char@numChr
  1614                           
  1615                           ;LCD.c: 128:             break;
  1616  055F  2DA1               	goto	l1897
  1617  0560                     l1885:
  1618                           
  1619                           ;LCD.c: 130:             numChr = 54;
  1620  0560  3036               	movlw	54
  1621  0561  00F2               	movwf	??_uint_to_char
  1622  0562  0872               	movf	??_uint_to_char,w
  1623  0563  00F5               	movwf	uint_to_char@numChr
  1624                           
  1625                           ;LCD.c: 131:             break;
  1626  0564  2DA1               	goto	l1897
  1627  0565                     l1887:
  1628                           
  1629                           ;LCD.c: 133:             numChr = 55;
  1630  0565  3037               	movlw	55
  1631  0566  00F2               	movwf	??_uint_to_char
  1632  0567  0872               	movf	??_uint_to_char,w
  1633  0568  00F5               	movwf	uint_to_char@numChr
  1634                           
  1635                           ;LCD.c: 134:             break;
  1636  0569  2DA1               	goto	l1897
  1637  056A                     l1889:
  1638                           
  1639                           ;LCD.c: 136:             numChr = 56;
  1640  056A  3038               	movlw	56
  1641  056B  00F2               	movwf	??_uint_to_char
  1642  056C  0872               	movf	??_uint_to_char,w
  1643  056D  00F5               	movwf	uint_to_char@numChr
  1644                           
  1645                           ;LCD.c: 137:             break;
  1646  056E  2DA1               	goto	l1897
  1647  056F                     l1891:
  1648                           
  1649                           ;LCD.c: 139:             numChr = 57;
  1650  056F  3039               	movlw	57
  1651  0570  00F2               	movwf	??_uint_to_char
  1652  0571  0872               	movf	??_uint_to_char,w
  1653  0572  00F5               	movwf	uint_to_char@numChr
  1654                           
  1655                           ;LCD.c: 140:             break;
  1656  0573  2DA1               	goto	l1897
  1657  0574                     l1893:
  1658                           
  1659                           ;LCD.c: 142:             numChr = 214;
  1660  0574  30D6               	movlw	214
  1661  0575  00F2               	movwf	??_uint_to_char
  1662  0576  0872               	movf	??_uint_to_char,w
  1663  0577  00F5               	movwf	uint_to_char@numChr
  1664                           
  1665                           ;LCD.c: 143:     }
  1666  0578  2DA1               	goto	l1897
  1667  0579                     l1895:
  1668  0579  0874               	movf	uint_to_char@numero,w
  1669  057A  00F2               	movwf	??_uint_to_char
  1670  057B  01F3               	clrf	??_uint_to_char+1
  1671                           
  1672                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1673                           ; Switch size 1, requested type "simple"
  1674                           ; Number of cases is 1, Range of values is 0 to 0
  1675                           ; switch strategies available:
  1676                           ; Name         Instructions Cycles
  1677                           ; simple_byte            4     3 (average)
  1678                           ; direct_byte           11     8 (fixed)
  1679                           ; jumptable            260     6 (fixed)
  1680                           ;	Chosen strategy is simple_byte
  1681  057C  0873               	movf	??_uint_to_char+1,w
  1682  057D  3A00               	xorlw	0	; case 0
  1683  057E  1903               	skipnz
  1684  057F  2D81               	goto	l2587
  1685  0580  2D74               	goto	l1893
  1686  0581                     l2587:
  1687                           
  1688                           ; Switch size 1, requested type "simple"
  1689                           ; Number of cases is 10, Range of values is 0 to 9
  1690                           ; switch strategies available:
  1691                           ; Name         Instructions Cycles
  1692                           ; simple_byte           31    16 (average)
  1693                           ; direct_byte           38     8 (fixed)
  1694                           ; jumptable            260     6 (fixed)
  1695                           ;	Chosen strategy is simple_byte
  1696  0581  0872               	movf	??_uint_to_char,w
  1697  0582  3A00               	xorlw	0	; case 0
  1698  0583  1903               	skipnz
  1699  0584  2D42               	goto	l1873
  1700  0585  3A01               	xorlw	1	; case 1
  1701  0586  1903               	skipnz
  1702  0587  2D47               	goto	l1875
  1703  0588  3A03               	xorlw	3	; case 2
  1704  0589  1903               	skipnz
  1705  058A  2D4C               	goto	l1877
  1706  058B  3A01               	xorlw	1	; case 3
  1707  058C  1903               	skipnz
  1708  058D  2D51               	goto	l1879
  1709  058E  3A07               	xorlw	7	; case 4
  1710  058F  1903               	skipnz
  1711  0590  2D56               	goto	l1881
  1712  0591  3A01               	xorlw	1	; case 5
  1713  0592  1903               	skipnz
  1714  0593  2D5B               	goto	l1883
  1715  0594  3A03               	xorlw	3	; case 6
  1716  0595  1903               	skipnz
  1717  0596  2D60               	goto	l1885
  1718  0597  3A01               	xorlw	1	; case 7
  1719  0598  1903               	skipnz
  1720  0599  2D65               	goto	l1887
  1721  059A  3A0F               	xorlw	15	; case 8
  1722  059B  1903               	skipnz
  1723  059C  2D6A               	goto	l1889
  1724  059D  3A01               	xorlw	1	; case 9
  1725  059E  1903               	skipnz
  1726  059F  2D6F               	goto	l1891
  1727  05A0  2D74               	goto	l1893
  1728  05A1                     l1897:
  1729                           
  1730                           ;LCD.c: 144:     return(numChr);
  1731  05A1  0875               	movf	uint_to_char@numChr,w
  1732  05A2                     l171:
  1733  05A2  0008               	return
  1734  05A3                     __end_of_uint_to_char:
  1735                           
  1736                           	psect	text4
  1737  03E9                     __ptext4:	
  1738 ;; *************** function _uint_to_array *****************
  1739 ;; Defined at:
  1740 ;;		line 147 in file "LCD.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  numero          1    wreg     unsigned char 
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  numero          1   22[BANK0 ] unsigned char 
  1745 ;;  resultado       6   15[BANK0 ] unsigned int [3]
  1746 ;;  centenas        1   21[BANK0 ] unsigned char 
  1747 ;;  decenas         1   14[BANK0 ] unsigned char 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      PTR unsigned int 
  1750 ;; Registers used:
  1751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1757 ;;      Params:         0       0       0       0       0
  1758 ;;      Locals:         0       9       0       0       0
  1759 ;;      Temps:          0       6       0       0       0
  1760 ;;      Totals:         0      15       0       0       0
  1761 ;;Total ram usage:       15 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    2
  1764 ;; This function calls:
  1765 ;;		___awdiv
  1766 ;;		___wmul
  1767 ;; This function is called by:
  1768 ;;		_main
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           
  1773                           ;psect for function _uint_to_array
  1774  03E9                     _uint_to_array:
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in _uint_to_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1778                           ;uint_to_array@numero stored from wreg
  1779  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  1780  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  1781  03EB  00DB               	movwf	uint_to_array@numero
  1782  03EC                     l2283:
  1783                           
  1784                           ;LCD.c: 148:     uint16_t resultado[3] = {0,0,0};
  1785  03EC  3054               	movlw	uint_to_array@resultado& (0+255)
  1786  03ED  0084               	movwf	4
  1787  03EE  3006               	movlw	6
  1788  03EF  00FF               	movwf	btemp+1
  1789  03F0                     u730:
  1790  03F0  1383               	bcf	3,7	;select IRP bank0
  1791  03F1  0180               	clrf	0
  1792  03F2  0A84               	incf	4,f
  1793  03F3  0BFF               	decfsz	btemp+1,f
  1794  03F4  2BF0               	goto	u730
  1795  03F5                     l2285:
  1796                           
  1797                           ;LCD.c: 149:     resultado[0] = numero/100;
  1798  03F5  3064               	movlw	100
  1799  03F6  00C5               	movwf	___awdiv@divisor
  1800  03F7  3000               	movlw	0
  1801  03F8  00C6               	movwf	___awdiv@divisor+1
  1802  03F9  085B               	movf	uint_to_array@numero,w
  1803  03FA  00CD               	movwf	??_uint_to_array
  1804  03FB  01CE               	clrf	??_uint_to_array+1
  1805  03FC  084D               	movf	??_uint_to_array,w
  1806  03FD  00C7               	movwf	___awdiv@dividend
  1807  03FE  084E               	movf	??_uint_to_array+1,w
  1808  03FF  00C8               	movwf	___awdiv@dividend+1
  1809  0400  120A  118A  2470  120A  118A  	fcall	___awdiv
  1810  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1811  0406  1303               	bcf	3,6	;RP1=0, select bank0
  1812  0407  0846               	movf	?___awdiv+1,w
  1813  0408  00D5               	movwf	uint_to_array@resultado+1
  1814  0409  0845               	movf	?___awdiv,w
  1815  040A  00D4               	movwf	uint_to_array@resultado
  1816  040B                     l2287:
  1817                           
  1818                           ;LCD.c: 150:     uint8_t centenas = resultado[0];
  1819  040B  0854               	movf	uint_to_array@resultado,w
  1820  040C  00CD               	movwf	??_uint_to_array
  1821  040D  084D               	movf	??_uint_to_array,w
  1822  040E  00DA               	movwf	uint_to_array@centenas
  1823  040F                     l2289:
  1824                           
  1825                           ;LCD.c: 151:     resultado[1] = (numero - (centenas *100))/10;
  1826  040F  300A               	movlw	10
  1827  0410  00C5               	movwf	___awdiv@divisor
  1828  0411  3000               	movlw	0
  1829  0412  00C6               	movwf	___awdiv@divisor+1
  1830  0413  085A               	movf	uint_to_array@centenas,w
  1831  0414  00CD               	movwf	??_uint_to_array
  1832  0415  01CE               	clrf	??_uint_to_array+1
  1833  0416  084D               	movf	??_uint_to_array,w
  1834  0417  00F2               	movwf	___wmul@multiplier
  1835  0418  084E               	movf	??_uint_to_array+1,w
  1836  0419  00F3               	movwf	___wmul@multiplier+1
  1837  041A  309C               	movlw	156
  1838  041B  00F4               	movwf	___wmul@multiplicand
  1839  041C  30FF               	movlw	255
  1840  041D  00F5               	movwf	___wmul@multiplicand+1
  1841  041E  120A  118A  267E  120A  118A  	fcall	___wmul
  1842  0423  1283               	bcf	3,5	;RP0=0, select bank0
  1843  0424  1303               	bcf	3,6	;RP1=0, select bank0
  1844  0425  085B               	movf	uint_to_array@numero,w
  1845  0426  0772               	addwf	?___wmul,w
  1846  0427  00C7               	movwf	___awdiv@dividend
  1847  0428  0873               	movf	?___wmul+1,w
  1848  0429  1803               	skipnc
  1849  042A  0A73               	incf	?___wmul+1,w
  1850  042B  00C8               	movwf	___awdiv@dividend+1
  1851  042C  120A  118A  2470  120A  118A  	fcall	___awdiv
  1852  0431  1283               	bcf	3,5	;RP0=0, select bank0
  1853  0432  1303               	bcf	3,6	;RP1=0, select bank0
  1854  0433  0846               	movf	?___awdiv+1,w
  1855  0434  00D7               	movwf	uint_to_array@resultado+3
  1856  0435  0845               	movf	?___awdiv,w
  1857  0436  00D6               	movwf	uint_to_array@resultado+2
  1858  0437                     l2291:
  1859                           
  1860                           ;LCD.c: 152:     uint8_t decenas = resultado[1];
  1861  0437  0856               	movf	uint_to_array@resultado+2,w
  1862  0438  00CD               	movwf	??_uint_to_array
  1863  0439  084D               	movf	??_uint_to_array,w
  1864  043A  00D3               	movwf	uint_to_array@decenas
  1865  043B                     l2293:
  1866                           
  1867                           ;LCD.c: 153:     resultado[2] = numero -(centenas*100+decenas*10);
  1868  043B  085A               	movf	uint_to_array@centenas,w
  1869  043C  00CD               	movwf	??_uint_to_array
  1870  043D  01CE               	clrf	??_uint_to_array+1
  1871  043E  084D               	movf	??_uint_to_array,w
  1872  043F  00F2               	movwf	___wmul@multiplier
  1873  0440  084E               	movf	??_uint_to_array+1,w
  1874  0441  00F3               	movwf	___wmul@multiplier+1
  1875  0442  309C               	movlw	156
  1876  0443  00F4               	movwf	___wmul@multiplicand
  1877  0444  30FF               	movlw	255
  1878  0445  00F5               	movwf	___wmul@multiplicand+1
  1879  0446  120A  118A  267E  120A  118A  	fcall	___wmul
  1880  044B  1283               	bcf	3,5	;RP0=0, select bank0
  1881  044C  1303               	bcf	3,6	;RP1=0, select bank0
  1882  044D  085B               	movf	uint_to_array@numero,w
  1883  044E  0772               	addwf	?___wmul,w
  1884  044F  00CF               	movwf	??_uint_to_array+2
  1885  0450  0873               	movf	?___wmul+1,w
  1886  0451  1803               	skipnc
  1887  0452  0A73               	incf	?___wmul+1,w
  1888  0453  00D0               	movwf	??_uint_to_array+3
  1889  0454  0853               	movf	uint_to_array@decenas,w
  1890  0455  00D1               	movwf	??_uint_to_array+4
  1891  0456  01D2               	clrf	??_uint_to_array+5
  1892  0457  0851               	movf	??_uint_to_array+4,w
  1893  0458  00F2               	movwf	___wmul@multiplier
  1894  0459  0852               	movf	??_uint_to_array+5,w
  1895  045A  00F3               	movwf	___wmul@multiplier+1
  1896  045B  30F6               	movlw	246
  1897  045C  00F4               	movwf	___wmul@multiplicand
  1898  045D  30FF               	movlw	255
  1899  045E  00F5               	movwf	___wmul@multiplicand+1
  1900  045F  120A  118A  267E  120A  118A  	fcall	___wmul
  1901  0464  0872               	movf	?___wmul,w
  1902  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1903  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1904  0467  074F               	addwf	??_uint_to_array+2,w
  1905  0468  00D8               	movwf	uint_to_array@resultado+4
  1906  0469  0873               	movf	?___wmul+1,w
  1907  046A  1803               	skipnc
  1908  046B  0A73               	incf	?___wmul+1,w
  1909  046C  0750               	addwf	??_uint_to_array+3,w
  1910  046D  00D9               	movwf	uint_to_array@resultado+5
  1911  046E                     l2295:
  1912                           
  1913                           ;LCD.c: 154:     return(resultado);
  1914  046E  3054               	movlw	(low (uint_to_array@resultado| 0))& (0+255)
  1915  046F                     l176:
  1916  046F  0008               	return
  1917  0470                     __end_of_uint_to_array:
  1918                           
  1919                           	psect	text5
  1920  0470                     __ptext5:	
  1921 ;; *************** function ___awdiv *****************
  1922 ;; Defined at:
  1923 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  divisor         2    0[BANK0 ] int 
  1926 ;;  dividend        2    2[BANK0 ] int 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  quotient        2    6[BANK0 ] int 
  1929 ;;  sign            1    5[BANK0 ] unsigned char 
  1930 ;;  counter         1    4[BANK0 ] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  2    0[BANK0 ] int 
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1940 ;;      Params:         0       4       0       0       0
  1941 ;;      Locals:         0       4       0       0       0
  1942 ;;      Temps:          1       0       0       0       0
  1943 ;;      Totals:         1       8       0       0       0
  1944 ;;Total ram usage:        9 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    1
  1947 ;; This function calls:
  1948 ;;		Nothing
  1949 ;; This function is called by:
  1950 ;;		_uint_to_array
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           
  1955                           ;psect for function ___awdiv
  1956  0470                     ___awdiv:
  1957  0470                     l2239:	
  1958                           ;incstack = 0
  1959                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1960                           
  1961  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1962  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1963  0472  01CA               	clrf	___awdiv@sign
  1964  0473                     l2241:
  1965  0473  1FC6               	btfss	___awdiv@divisor+1,7
  1966  0474  2C76               	goto	u631
  1967  0475  2C77               	goto	u630
  1968  0476                     u631:
  1969  0476  2C7E               	goto	l2247
  1970  0477                     u630:
  1971  0477                     l2243:
  1972  0477  09C5               	comf	___awdiv@divisor,f
  1973  0478  09C6               	comf	___awdiv@divisor+1,f
  1974  0479  0AC5               	incf	___awdiv@divisor,f
  1975  047A  1903               	skipnz
  1976  047B  0AC6               	incf	___awdiv@divisor+1,f
  1977  047C                     l2245:
  1978  047C  01CA               	clrf	___awdiv@sign
  1979  047D  0ACA               	incf	___awdiv@sign,f
  1980  047E                     l2247:
  1981  047E  1FC8               	btfss	___awdiv@dividend+1,7
  1982  047F  2C81               	goto	u641
  1983  0480  2C82               	goto	u640
  1984  0481                     u641:
  1985  0481  2C8B               	goto	l2253
  1986  0482                     u640:
  1987  0482                     l2249:
  1988  0482  09C7               	comf	___awdiv@dividend,f
  1989  0483  09C8               	comf	___awdiv@dividend+1,f
  1990  0484  0AC7               	incf	___awdiv@dividend,f
  1991  0485  1903               	skipnz
  1992  0486  0AC8               	incf	___awdiv@dividend+1,f
  1993  0487                     l2251:
  1994  0487  3001               	movlw	1
  1995  0488  00F8               	movwf	??___awdiv
  1996  0489  0878               	movf	??___awdiv,w
  1997  048A  06CA               	xorwf	___awdiv@sign,f
  1998  048B                     l2253:
  1999  048B  01CB               	clrf	___awdiv@quotient
  2000  048C  01CC               	clrf	___awdiv@quotient+1
  2001  048D                     l2255:
  2002  048D  0845               	movf	___awdiv@divisor,w
  2003  048E  0446               	iorwf	___awdiv@divisor+1,w
  2004  048F  1903               	btfsc	3,2
  2005  0490  2C92               	goto	u651
  2006  0491  2C93               	goto	u650
  2007  0492                     u651:
  2008  0492  2CCA               	goto	l2275
  2009  0493                     u650:
  2010  0493                     l2257:
  2011  0493  01C9               	clrf	___awdiv@counter
  2012  0494  0AC9               	incf	___awdiv@counter,f
  2013  0495  2CA1               	goto	l2263
  2014  0496                     l2259:
  2015  0496  3001               	movlw	1
  2016  0497                     u665:
  2017  0497  1003               	clrc
  2018  0498  0DC5               	rlf	___awdiv@divisor,f
  2019  0499  0DC6               	rlf	___awdiv@divisor+1,f
  2020  049A  3EFF               	addlw	-1
  2021  049B  1D03               	skipz
  2022  049C  2C97               	goto	u665
  2023  049D                     l2261:
  2024  049D  3001               	movlw	1
  2025  049E  00F8               	movwf	??___awdiv
  2026  049F  0878               	movf	??___awdiv,w
  2027  04A0  07C9               	addwf	___awdiv@counter,f
  2028  04A1                     l2263:
  2029  04A1  1FC6               	btfss	___awdiv@divisor+1,7
  2030  04A2  2CA4               	goto	u671
  2031  04A3  2CA5               	goto	u670
  2032  04A4                     u671:
  2033  04A4  2C96               	goto	l2259
  2034  04A5                     u670:
  2035  04A5                     l2265:
  2036  04A5  3001               	movlw	1
  2037  04A6                     u685:
  2038  04A6  1003               	clrc
  2039  04A7  0DCB               	rlf	___awdiv@quotient,f
  2040  04A8  0DCC               	rlf	___awdiv@quotient+1,f
  2041  04A9  3EFF               	addlw	-1
  2042  04AA  1D03               	skipz
  2043  04AB  2CA6               	goto	u685
  2044  04AC  0846               	movf	___awdiv@divisor+1,w
  2045  04AD  0248               	subwf	___awdiv@dividend+1,w
  2046  04AE  1D03               	skipz
  2047  04AF  2CB2               	goto	u695
  2048  04B0  0845               	movf	___awdiv@divisor,w
  2049  04B1  0247               	subwf	___awdiv@dividend,w
  2050  04B2                     u695:
  2051  04B2  1C03               	skipc
  2052  04B3  2CB5               	goto	u691
  2053  04B4  2CB6               	goto	u690
  2054  04B5                     u691:
  2055  04B5  2CBD               	goto	l2271
  2056  04B6                     u690:
  2057  04B6                     l2267:
  2058  04B6  0845               	movf	___awdiv@divisor,w
  2059  04B7  02C7               	subwf	___awdiv@dividend,f
  2060  04B8  0846               	movf	___awdiv@divisor+1,w
  2061  04B9  1C03               	skipc
  2062  04BA  03C8               	decf	___awdiv@dividend+1,f
  2063  04BB  02C8               	subwf	___awdiv@dividend+1,f
  2064  04BC                     l2269:
  2065  04BC  144B               	bsf	___awdiv@quotient,0
  2066  04BD                     l2271:
  2067  04BD  3001               	movlw	1
  2068  04BE                     u705:
  2069  04BE  1003               	clrc
  2070  04BF  0CC6               	rrf	___awdiv@divisor+1,f
  2071  04C0  0CC5               	rrf	___awdiv@divisor,f
  2072  04C1  3EFF               	addlw	-1
  2073  04C2  1D03               	skipz
  2074  04C3  2CBE               	goto	u705
  2075  04C4                     l2273:
  2076  04C4  3001               	movlw	1
  2077  04C5  02C9               	subwf	___awdiv@counter,f
  2078  04C6  1D03               	btfss	3,2
  2079  04C7  2CC9               	goto	u711
  2080  04C8  2CCA               	goto	u710
  2081  04C9                     u711:
  2082  04C9  2CA5               	goto	l2265
  2083  04CA                     u710:
  2084  04CA                     l2275:
  2085  04CA  084A               	movf	___awdiv@sign,w
  2086  04CB  1903               	btfsc	3,2
  2087  04CC  2CCE               	goto	u721
  2088  04CD  2CCF               	goto	u720
  2089  04CE                     u721:
  2090  04CE  2CD4               	goto	l2279
  2091  04CF                     u720:
  2092  04CF                     l2277:
  2093  04CF  09CB               	comf	___awdiv@quotient,f
  2094  04D0  09CC               	comf	___awdiv@quotient+1,f
  2095  04D1  0ACB               	incf	___awdiv@quotient,f
  2096  04D2  1903               	skipnz
  2097  04D3  0ACC               	incf	___awdiv@quotient+1,f
  2098  04D4                     l2279:
  2099  04D4  084C               	movf	___awdiv@quotient+1,w
  2100  04D5  00C6               	movwf	?___awdiv+1
  2101  04D6  084B               	movf	___awdiv@quotient,w
  2102  04D7  00C5               	movwf	?___awdiv
  2103  04D8                     l534:
  2104  04D8  0008               	return
  2105  04D9                     __end_of___awdiv:
  2106                           
  2107                           	psect	text6
  2108  02BA                     __ptext6:	
  2109 ;; *************** function _mapear *****************
  2110 ;; Defined at:
  2111 ;;		line 149 in file "Principal3.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  valor           1    wreg     unsigned char 
  2114 ;;  limReal         1    8[COMMON] unsigned char 
  2115 ;;  limSup          1    9[COMMON] unsigned char 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  valor           1    4[BANK0 ] unsigned char 
  2118 ;;  resultado       6    5[BANK0 ] unsigned int [3]
  2119 ;;  dividendo       2   11[BANK0 ] unsigned int 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      PTR unsigned int 
  2122 ;; Registers used:
  2123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2129 ;;      Params:         2       0       0       0       0
  2130 ;;      Locals:         0       9       0       0       0
  2131 ;;      Temps:          0       4       0       0       0
  2132 ;;      Totals:         2      13       0       0       0
  2133 ;;Total ram usage:       15 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    2
  2136 ;; This function calls:
  2137 ;;		___wmul
  2138 ;; This function is called by:
  2139 ;;		_main
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           
  2144                           ;psect for function _mapear
  2145  02BA                     _mapear:
  2146                           
  2147                           ;incstack = 0
  2148                           ; Regs used in _mapear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2149                           ;mapear@valor stored from wreg
  2150  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2151  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2152  02BC  00C9               	movwf	mapear@valor
  2153  02BD                     l1847:
  2154                           
  2155                           ;Principal3.c: 150:     uint16_t resultado[3] = {0,0,0};
  2156  02BD  304A               	movlw	mapear@resultado& (0+255)
  2157  02BE  0084               	movwf	4
  2158  02BF  3006               	movlw	6
  2159  02C0  00FF               	movwf	btemp+1
  2160  02C1                     u510:
  2161  02C1  1383               	bcf	3,7	;select IRP bank0
  2162  02C2  0180               	clrf	0
  2163  02C3  0A84               	incf	4,f
  2164  02C4  0BFF               	decfsz	btemp+1,f
  2165  02C5  2AC1               	goto	u510
  2166  02C6                     l1849:
  2167                           
  2168                           ;Principal3.c: 151:     uint16_t dividendo = valor*limSup;
  2169  02C6  0849               	movf	mapear@valor,w
  2170  02C7  00C5               	movwf	??_mapear
  2171  02C8  01C6               	clrf	??_mapear+1
  2172  02C9  0845               	movf	??_mapear,w
  2173  02CA  00F2               	movwf	___wmul@multiplier
  2174  02CB  0846               	movf	??_mapear+1,w
  2175  02CC  00F3               	movwf	___wmul@multiplier+1
  2176  02CD  0879               	movf	mapear@limSup,w
  2177  02CE  00C7               	movwf	??_mapear+2
  2178  02CF  01C8               	clrf	??_mapear+3
  2179  02D0  0847               	movf	??_mapear+2,w
  2180  02D1  00F4               	movwf	___wmul@multiplicand
  2181  02D2  0848               	movf	??_mapear+3,w
  2182  02D3  00F5               	movwf	___wmul@multiplicand+1
  2183  02D4  120A  118A  267E  120A  118A  	fcall	___wmul
  2184  02D9  0873               	movf	?___wmul+1,w
  2185  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  2186  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  2187  02DC  00D1               	movwf	mapear@dividendo+1
  2188  02DD  0872               	movf	?___wmul,w
  2189  02DE  00D0               	movwf	mapear@dividendo
  2190                           
  2191                           ;Principal3.c: 152:     while (limReal <= dividendo){
  2192  02DF  2AEF               	goto	l1853
  2193  02E0                     l1851:
  2194                           
  2195                           ;Principal3.c: 153:         resultado[0] = resultado[0] + 1;
  2196  02E0  084A               	movf	mapear@resultado,w
  2197  02E1  3E01               	addlw	1
  2198  02E2  00CA               	movwf	mapear@resultado
  2199  02E3  084B               	movf	mapear@resultado+1,w
  2200  02E4  1803               	skipnc
  2201  02E5  3E01               	addlw	1
  2202  02E6  3E00               	addlw	0
  2203  02E7  00CB               	movwf	mapear@resultado+1
  2204                           
  2205                           ;Principal3.c: 154:         dividendo = dividendo - limReal;
  2206  02E8  0878               	movf	mapear@limReal,w
  2207  02E9  0250               	subwf	mapear@dividendo,w
  2208  02EA  00D0               	movwf	mapear@dividendo
  2209  02EB  0851               	movf	mapear@dividendo+1,w
  2210  02EC  1C03               	skipc
  2211  02ED  0351               	decf	mapear@dividendo+1,w
  2212  02EE  00D1               	movwf	mapear@dividendo+1
  2213  02EF                     l1853:
  2214                           
  2215                           ;Principal3.c: 152:     while (limReal <= dividendo){
  2216  02EF  0878               	movf	mapear@limReal,w
  2217  02F0  00C5               	movwf	??_mapear
  2218  02F1  01C6               	clrf	??_mapear+1
  2219  02F2  0846               	movf	??_mapear+1,w
  2220  02F3  0251               	subwf	mapear@dividendo+1,w
  2221  02F4  1D03               	skipz
  2222  02F5  2AF8               	goto	u525
  2223  02F6  0845               	movf	??_mapear,w
  2224  02F7  0250               	subwf	mapear@dividendo,w
  2225  02F8                     u525:
  2226  02F8  1803               	skipnc
  2227  02F9  2AFB               	goto	u521
  2228  02FA  2AFC               	goto	u520
  2229  02FB                     u521:
  2230  02FB  2AE0               	goto	l1851
  2231  02FC                     u520:
  2232  02FC                     l1855:
  2233                           
  2234                           ;Principal3.c: 156:     dividendo = dividendo *10;
  2235  02FC  0851               	movf	mapear@dividendo+1,w
  2236  02FD  00F3               	movwf	___wmul@multiplier+1
  2237  02FE  0850               	movf	mapear@dividendo,w
  2238  02FF  00F2               	movwf	___wmul@multiplier
  2239  0300  300A               	movlw	10
  2240  0301  00F4               	movwf	___wmul@multiplicand
  2241  0302  3000               	movlw	0
  2242  0303  00F5               	movwf	___wmul@multiplicand+1
  2243  0304  120A  118A  267E  120A  118A  	fcall	___wmul
  2244  0309  0873               	movf	?___wmul+1,w
  2245  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2246  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2247  030C  00D1               	movwf	mapear@dividendo+1
  2248  030D  0872               	movf	?___wmul,w
  2249  030E  00D0               	movwf	mapear@dividendo
  2250                           
  2251                           ;Principal3.c: 157:     while (limReal <= dividendo){
  2252  030F  2B1F               	goto	l1859
  2253  0310                     l1857:
  2254                           
  2255                           ;Principal3.c: 158:         resultado[1] = resultado[1] +1;
  2256  0310  084C               	movf	mapear@resultado+2,w
  2257  0311  3E01               	addlw	1
  2258  0312  00CC               	movwf	mapear@resultado+2
  2259  0313  084D               	movf	mapear@resultado+3,w
  2260  0314  1803               	skipnc
  2261  0315  3E01               	addlw	1
  2262  0316  3E00               	addlw	0
  2263  0317  00CD               	movwf	mapear@resultado+3
  2264                           
  2265                           ;Principal3.c: 159:         dividendo = dividendo - limReal;
  2266  0318  0878               	movf	mapear@limReal,w
  2267  0319  0250               	subwf	mapear@dividendo,w
  2268  031A  00D0               	movwf	mapear@dividendo
  2269  031B  0851               	movf	mapear@dividendo+1,w
  2270  031C  1C03               	skipc
  2271  031D  0351               	decf	mapear@dividendo+1,w
  2272  031E  00D1               	movwf	mapear@dividendo+1
  2273  031F                     l1859:
  2274                           
  2275                           ;Principal3.c: 157:     while (limReal <= dividendo){
  2276  031F  0878               	movf	mapear@limReal,w
  2277  0320  00C5               	movwf	??_mapear
  2278  0321  01C6               	clrf	??_mapear+1
  2279  0322  0846               	movf	??_mapear+1,w
  2280  0323  0251               	subwf	mapear@dividendo+1,w
  2281  0324  1D03               	skipz
  2282  0325  2B28               	goto	u535
  2283  0326  0845               	movf	??_mapear,w
  2284  0327  0250               	subwf	mapear@dividendo,w
  2285  0328                     u535:
  2286  0328  1803               	skipnc
  2287  0329  2B2B               	goto	u531
  2288  032A  2B2C               	goto	u530
  2289  032B                     u531:
  2290  032B  2B10               	goto	l1857
  2291  032C                     u530:
  2292  032C                     l1861:
  2293                           
  2294                           ;Principal3.c: 161:     dividendo = dividendo *10;
  2295  032C  0851               	movf	mapear@dividendo+1,w
  2296  032D  00F3               	movwf	___wmul@multiplier+1
  2297  032E  0850               	movf	mapear@dividendo,w
  2298  032F  00F2               	movwf	___wmul@multiplier
  2299  0330  300A               	movlw	10
  2300  0331  00F4               	movwf	___wmul@multiplicand
  2301  0332  3000               	movlw	0
  2302  0333  00F5               	movwf	___wmul@multiplicand+1
  2303  0334  120A  118A  267E  120A  118A  	fcall	___wmul
  2304  0339  0873               	movf	?___wmul+1,w
  2305  033A  1283               	bcf	3,5	;RP0=0, select bank0
  2306  033B  1303               	bcf	3,6	;RP1=0, select bank0
  2307  033C  00D1               	movwf	mapear@dividendo+1
  2308  033D  0872               	movf	?___wmul,w
  2309  033E  00D0               	movwf	mapear@dividendo
  2310                           
  2311                           ;Principal3.c: 162:     while (limReal <= dividendo){
  2312  033F  2B4F               	goto	l1865
  2313  0340                     l1863:
  2314                           
  2315                           ;Principal3.c: 163:         resultado[2] = resultado[2] +1;
  2316  0340  084E               	movf	mapear@resultado+4,w
  2317  0341  3E01               	addlw	1
  2318  0342  00CE               	movwf	mapear@resultado+4
  2319  0343  084F               	movf	mapear@resultado+5,w
  2320  0344  1803               	skipnc
  2321  0345  3E01               	addlw	1
  2322  0346  3E00               	addlw	0
  2323  0347  00CF               	movwf	mapear@resultado+5
  2324                           
  2325                           ;Principal3.c: 164:         dividendo = dividendo - limReal;
  2326  0348  0878               	movf	mapear@limReal,w
  2327  0349  0250               	subwf	mapear@dividendo,w
  2328  034A  00D0               	movwf	mapear@dividendo
  2329  034B  0851               	movf	mapear@dividendo+1,w
  2330  034C  1C03               	skipc
  2331  034D  0351               	decf	mapear@dividendo+1,w
  2332  034E  00D1               	movwf	mapear@dividendo+1
  2333  034F                     l1865:
  2334                           
  2335                           ;Principal3.c: 162:     while (limReal <= dividendo){
  2336  034F  0878               	movf	mapear@limReal,w
  2337  0350  00C5               	movwf	??_mapear
  2338  0351  01C6               	clrf	??_mapear+1
  2339  0352  0846               	movf	??_mapear+1,w
  2340  0353  0251               	subwf	mapear@dividendo+1,w
  2341  0354  1D03               	skipz
  2342  0355  2B58               	goto	u545
  2343  0356  0845               	movf	??_mapear,w
  2344  0357  0250               	subwf	mapear@dividendo,w
  2345  0358                     u545:
  2346  0358  1803               	skipnc
  2347  0359  2B5B               	goto	u541
  2348  035A  2B5C               	goto	u540
  2349  035B                     u541:
  2350  035B  2B40               	goto	l1863
  2351  035C                     u540:
  2352  035C                     l1867:
  2353                           
  2354                           ;Principal3.c: 167:     return resultado;
  2355  035C  304A               	movlw	(low (mapear@resultado| 0))& (0+255)
  2356  035D                     l102:
  2357  035D  0008               	return
  2358  035E                     __end_of_mapear:
  2359                           
  2360                           	psect	text7
  2361  067E                     __ptext7:	
  2362 ;; *************** function ___wmul *****************
  2363 ;; Defined at:
  2364 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  multiplier      2    2[COMMON] unsigned int 
  2367 ;;  multiplicand    2    4[COMMON] unsigned int 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  product         2    6[COMMON] unsigned int 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  2    2[COMMON] unsigned int 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2379 ;;      Params:         4       0       0       0       0
  2380 ;;      Locals:         2       0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0
  2382 ;;      Totals:         6       0       0       0       0
  2383 ;;Total ram usage:        6 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    1
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_mapear
  2390 ;;		_uint_to_array
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           
  2395                           ;psect for function ___wmul
  2396  067E                     ___wmul:
  2397  067E                     l1589:	
  2398                           ;incstack = 0
  2399                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2400                           
  2401  067E  01F6               	clrf	___wmul@product
  2402  067F  01F7               	clrf	___wmul@product+1
  2403  0680                     l1591:
  2404  0680  1C72               	btfss	___wmul@multiplier,0
  2405  0681  2E83               	goto	u321
  2406  0682  2E84               	goto	u320
  2407  0683                     u321:
  2408  0683  2E8A               	goto	l381
  2409  0684                     u320:
  2410  0684                     l1593:
  2411  0684  0874               	movf	___wmul@multiplicand,w
  2412  0685  07F6               	addwf	___wmul@product,f
  2413  0686  1803               	skipnc
  2414  0687  0AF7               	incf	___wmul@product+1,f
  2415  0688  0875               	movf	___wmul@multiplicand+1,w
  2416  0689  07F7               	addwf	___wmul@product+1,f
  2417  068A                     l381:
  2418  068A  3001               	movlw	1
  2419  068B                     u335:
  2420  068B  1003               	clrc
  2421  068C  0DF4               	rlf	___wmul@multiplicand,f
  2422  068D  0DF5               	rlf	___wmul@multiplicand+1,f
  2423  068E  3EFF               	addlw	-1
  2424  068F  1D03               	skipz
  2425  0690  2E8B               	goto	u335
  2426  0691                     l1595:
  2427  0691  3001               	movlw	1
  2428  0692                     u345:
  2429  0692  1003               	clrc
  2430  0693  0CF3               	rrf	___wmul@multiplier+1,f
  2431  0694  0CF2               	rrf	___wmul@multiplier,f
  2432  0695  3EFF               	addlw	-1
  2433  0696  1D03               	skipz
  2434  0697  2E92               	goto	u345
  2435  0698                     l1597:
  2436  0698  0872               	movf	___wmul@multiplier,w
  2437  0699  0473               	iorwf	___wmul@multiplier+1,w
  2438  069A  1D03               	btfss	3,2
  2439  069B  2E9D               	goto	u351
  2440  069C  2E9E               	goto	u350
  2441  069D                     u351:
  2442  069D  2E80               	goto	l1591
  2443  069E                     u350:
  2444  069E                     l1599:
  2445  069E  0877               	movf	___wmul@product+1,w
  2446  069F  00F3               	movwf	?___wmul+1
  2447  06A0  0876               	movf	___wmul@product,w
  2448  06A1  00F2               	movwf	?___wmul
  2449  06A2                     l383:
  2450  06A2  0008               	return
  2451  06A3                     __end_of___wmul:
  2452                           
  2453                           	psect	text8
  2454  05A3                     __ptext8:	
  2455 ;; *************** function _enviar *****************
  2456 ;; Defined at:
  2457 ;;		line 46 in file "USART.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  valor1          1    wreg     unsigned char 
  2460 ;;  valor2          1    2[COMMON] unsigned char 
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;  valor1          1    4[COMMON] unsigned char 
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2, status,0
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2472 ;;      Params:         1       0       0       0       0
  2473 ;;      Locals:         1       0       0       0       0
  2474 ;;      Temps:          1       0       0       0       0
  2475 ;;      Totals:         3       0       0       0       0
  2476 ;;Total ram usage:        3 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; Hardware stack levels required when called:    1
  2479 ;; This function calls:
  2480 ;;		Nothing
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           
  2487                           ;psect for function _enviar
  2488  05A3                     _enviar:
  2489                           
  2490                           ;incstack = 0
  2491                           ; Regs used in _enviar: [wreg+status,2+status,0]
  2492                           ;enviar@valor1 stored from wreg
  2493  05A3  00F4               	movwf	enviar@valor1
  2494  05A4                     l1775:
  2495                           
  2496                           ;USART.c: 48:      valor1 = valor1 - 30;
  2497  05A4  0874               	movf	enviar@valor1,w
  2498  05A5  3EE2               	addlw	226
  2499  05A6  00F3               	movwf	??_enviar
  2500  05A7  0873               	movf	??_enviar,w
  2501  05A8  00F4               	movwf	enviar@valor1
  2502  05A9                     l1777:
  2503                           
  2504                           ;USART.c: 49:      TXREG= valor1;
  2505  05A9  0874               	movf	enviar@valor1,w
  2506  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  2507  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  2508  05AC  0099               	movwf	25	;volatile
  2509                           
  2510                           ;USART.c: 50:      while(TXSTAbits.TRMT == 0){
  2511  05AD  2DB3               	goto	l1781
  2512  05AE                     l1779:
  2513                           
  2514                           ;USART.c: 51:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  2515  05AE  30A6               	movlw	166
  2516  05AF  00F3               	movwf	??_enviar
  2517  05B0                     u797:
  2518  05B0  0BF3               	decfsz	??_enviar,f
  2519  05B1  2DB0               	goto	u797
  2520  05B2  0000               	nop
  2521  05B3                     l1781:
  2522                           
  2523                           ;USART.c: 50:      while(TXSTAbits.TRMT == 0){
  2524  05B3  1683               	bsf	3,5	;RP0=1, select bank1
  2525  05B4  1303               	bcf	3,6	;RP1=0, select bank1
  2526  05B5  1C98               	btfss	24,1	;volatile
  2527  05B6  2DB8               	goto	u471
  2528  05B7  2DB9               	goto	u470
  2529  05B8                     u471:
  2530  05B8  2DAE               	goto	l1779
  2531  05B9                     u470:
  2532  05B9                     l1783:
  2533                           
  2534                           ;USART.c: 54:      TXREG = ',';
  2535  05B9  302C               	movlw	44
  2536  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  2537  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  2538  05BC  0099               	movwf	25	;volatile
  2539                           
  2540                           ;USART.c: 55:      while(TXSTAbits.TRMT == 0){
  2541  05BD  2DC3               	goto	l1787
  2542  05BE                     l1785:
  2543                           
  2544                           ;USART.c: 56:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  2545  05BE  30A6               	movlw	166
  2546  05BF  00F3               	movwf	??_enviar
  2547  05C0                     u807:
  2548  05C0  0BF3               	decfsz	??_enviar,f
  2549  05C1  2DC0               	goto	u807
  2550  05C2  0000               	nop
  2551  05C3                     l1787:
  2552                           
  2553                           ;USART.c: 55:      while(TXSTAbits.TRMT == 0){
  2554  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  2555  05C4  1303               	bcf	3,6	;RP1=0, select bank1
  2556  05C5  1C98               	btfss	24,1	;volatile
  2557  05C6  2DC8               	goto	u481
  2558  05C7  2DC9               	goto	u480
  2559  05C8                     u481:
  2560  05C8  2DBE               	goto	l1785
  2561  05C9                     u480:
  2562  05C9                     l1789:
  2563                           
  2564                           ;USART.c: 59:      valor2 = valor2 - 30;
  2565  05C9  0872               	movf	enviar@valor2,w
  2566  05CA  3EE2               	addlw	226
  2567  05CB  00F3               	movwf	??_enviar
  2568  05CC  0873               	movf	??_enviar,w
  2569  05CD  00F2               	movwf	enviar@valor2
  2570  05CE                     l1791:
  2571                           
  2572                           ;USART.c: 60:      TXREG= valor2;
  2573  05CE  0872               	movf	enviar@valor2,w
  2574  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  2575  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  2576  05D1  0099               	movwf	25	;volatile
  2577                           
  2578                           ;USART.c: 61:      while(TXSTAbits.TRMT == 0){
  2579  05D2  2DD8               	goto	l1795
  2580  05D3                     l1793:
  2581                           
  2582                           ;USART.c: 62:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  2583  05D3  30A6               	movlw	166
  2584  05D4  00F3               	movwf	??_enviar
  2585  05D5                     u817:
  2586  05D5  0BF3               	decfsz	??_enviar,f
  2587  05D6  2DD5               	goto	u817
  2588  05D7  0000               	nop
  2589  05D8                     l1795:
  2590                           
  2591                           ;USART.c: 61:      while(TXSTAbits.TRMT == 0){
  2592  05D8  1683               	bsf	3,5	;RP0=1, select bank1
  2593  05D9  1303               	bcf	3,6	;RP1=0, select bank1
  2594  05DA  1C98               	btfss	24,1	;volatile
  2595  05DB  2DDD               	goto	u491
  2596  05DC  2DDE               	goto	u490
  2597  05DD                     u491:
  2598  05DD  2DD3               	goto	l1793
  2599  05DE                     u490:
  2600  05DE                     l1797:
  2601                           
  2602                           ;USART.c: 64:      TXREG = '/n';
  2603  05DE  306E               	movlw	110
  2604  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  2605  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  2606  05E1  0099               	movwf	25	;volatile
  2607                           
  2608                           ;USART.c: 65:      while(TXSTAbits.TRMT == 0){
  2609  05E2  2DE8               	goto	l1801
  2610  05E3                     l1799:
  2611                           
  2612                           ;USART.c: 66:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  2613  05E3  30A6               	movlw	166
  2614  05E4  00F3               	movwf	??_enviar
  2615  05E5                     u827:
  2616  05E5  0BF3               	decfsz	??_enviar,f
  2617  05E6  2DE5               	goto	u827
  2618  05E7  0000               	nop
  2619  05E8                     l1801:
  2620                           
  2621                           ;USART.c: 65:      while(TXSTAbits.TRMT == 0){
  2622  05E8  1683               	bsf	3,5	;RP0=1, select bank1
  2623  05E9  1303               	bcf	3,6	;RP1=0, select bank1
  2624  05EA  1C98               	btfss	24,1	;volatile
  2625  05EB  2DED               	goto	u501
  2626  05EC  2DEE               	goto	u500
  2627  05ED                     u501:
  2628  05ED  2DE3               	goto	l1799
  2629  05EE                     u500:
  2630  05EE                     l224:
  2631  05EE  0008               	return
  2632  05EF                     __end_of_enviar:
  2633                           
  2634                           	psect	text9
  2635  04D9                     __ptext9:	
  2636 ;; *************** function _LCD_init *****************
  2637 ;; Defined at:
  2638 ;;		line 36 in file "LCD.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;		None
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0, pclath, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2652 ;;      Params:         0       0       0       0       0
  2653 ;;      Locals:         0       0       0       0       0
  2654 ;;      Temps:          2       0       0       0       0
  2655 ;;      Totals:         2       0       0       0       0
  2656 ;;Total ram usage:        2 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    2
  2659 ;; This function calls:
  2660 ;;		_LCD_Cmd
  2661 ;; This function is called by:
  2662 ;;		_main
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           
  2667                           ;psect for function _LCD_init
  2668  04D9                     _LCD_init:
  2669  04D9                     l1647:	
  2670                           ;incstack = 0
  2671                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  2672                           
  2673                           
  2674                           ;LCD.c: 37:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2675  04D9  301A               	movlw	26
  2676  04DA  00F6               	movwf	??_LCD_init+1
  2677  04DB  30F8               	movlw	248
  2678  04DC  00F5               	movwf	??_LCD_init
  2679  04DD                     u837:
  2680  04DD  0BF5               	decfsz	??_LCD_init,f
  2681  04DE  2CDD               	goto	u837
  2682  04DF  0BF6               	decfsz	??_LCD_init+1,f
  2683  04E0  2CDD               	goto	u837
  2684  04E1  0000               	nop
  2685  04E2                     l1649:
  2686                           
  2687                           ;LCD.c: 38:     LCD_Cmd(0x30);
  2688  04E2  3030               	movlw	48
  2689  04E3  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  2690  04E8                     l1651:
  2691                           
  2692                           ;LCD.c: 39:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2693  04E8  3007               	movlw	7
  2694  04E9  00F6               	movwf	??_LCD_init+1
  2695  04EA  307D               	movlw	125
  2696  04EB  00F5               	movwf	??_LCD_init
  2697  04EC                     u847:
  2698  04EC  0BF5               	decfsz	??_LCD_init,f
  2699  04ED  2CEC               	goto	u847
  2700  04EE  0BF6               	decfsz	??_LCD_init+1,f
  2701  04EF  2CEC               	goto	u847
  2702                           
  2703                           ;LCD.c: 40:     LCD_Cmd(0x30);
  2704  04F0  3030               	movlw	48
  2705  04F1  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  2706  04F6                     l1653:
  2707                           
  2708                           ;LCD.c: 41:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2709  04F6  3021               	movlw	33
  2710  04F7  00F5               	movwf	??_LCD_init
  2711  04F8                     u857:
  2712  04F8  0BF5               	decfsz	??_LCD_init,f
  2713  04F9  2CF8               	goto	u857
  2714  04FA                     l1655:
  2715                           
  2716                           ;LCD.c: 42:     LCD_Cmd(0x30);
  2717  04FA  3030               	movlw	48
  2718  04FB  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  2719                           
  2720                           ;LCD.c: 43:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2721  0500  3021               	movlw	33
  2722  0501  00F5               	movwf	??_LCD_init
  2723  0502                     u867:
  2724  0502  0BF5               	decfsz	??_LCD_init,f
  2725  0503  2D02               	goto	u867
  2726  0504                     l1657:
  2727                           
  2728                           ;LCD.c: 44:     LCD_Cmd(0x38);
  2729  0504  3038               	movlw	56
  2730  0505  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  2731  050A                     l1659:
  2732                           
  2733                           ;LCD.c: 45:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2734  050A  3011               	movlw	17
  2735  050B  00F5               	movwf	??_LCD_init
  2736  050C                     u877:
  2737  050C  0BF5               	decfsz	??_LCD_init,f
  2738  050D  2D0C               	goto	u877
  2739  050E  0000               	nop
  2740                           
  2741                           ;LCD.c: 46:     LCD_Cmd(0x08);
  2742  050F  3008               	movlw	8
  2743  0510  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  2744  0515                     l1661:
  2745                           
  2746                           ;LCD.c: 47:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2747  0515  3011               	movlw	17
  2748  0516  00F5               	movwf	??_LCD_init
  2749  0517                     u887:
  2750  0517  0BF5               	decfsz	??_LCD_init,f
  2751  0518  2D17               	goto	u887
  2752  0519  0000               	nop
  2753  051A                     l1663:
  2754                           
  2755                           ;LCD.c: 48:     LCD_Cmd(0x01);
  2756  051A  3001               	movlw	1
  2757  051B  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  2758                           
  2759                           ;LCD.c: 49:     _delay((unsigned long)((3)*(4000000/4000.0)));
  2760  0520  3004               	movlw	4
  2761  0521  00F6               	movwf	??_LCD_init+1
  2762  0522  30E4               	movlw	228
  2763  0523  00F5               	movwf	??_LCD_init
  2764  0524                     u897:
  2765  0524  0BF5               	decfsz	??_LCD_init,f
  2766  0525  2D24               	goto	u897
  2767  0526  0BF6               	decfsz	??_LCD_init+1,f
  2768  0527  2D24               	goto	u897
  2769  0528  0000               	nop
  2770  0529                     l1665:
  2771                           
  2772                           ;LCD.c: 50:     LCD_Cmd(0x06);
  2773  0529  3006               	movlw	6
  2774  052A  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  2775  052F                     l1667:
  2776                           
  2777                           ;LCD.c: 51:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2778  052F  3011               	movlw	17
  2779  0530  00F5               	movwf	??_LCD_init
  2780  0531                     u907:
  2781  0531  0BF5               	decfsz	??_LCD_init,f
  2782  0532  2D31               	goto	u907
  2783  0533  0000               	nop
  2784                           
  2785                           ;LCD.c: 52:     LCD_Cmd(0x0C);
  2786  0534  300C               	movlw	12
  2787  0535  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  2788  053A                     l1669:
  2789                           
  2790                           ;LCD.c: 53:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2791  053A  3011               	movlw	17
  2792  053B  00F5               	movwf	??_LCD_init
  2793  053C                     u917:
  2794  053C  0BF5               	decfsz	??_LCD_init,f
  2795  053D  2D3C               	goto	u917
  2796  053E  0000               	nop
  2797  053F                     l120:
  2798  053F  0008               	return
  2799  0540                     __end_of_LCD_init:
  2800                           
  2801                           	psect	text10
  2802  06A3                     __ptext10:	
  2803 ;; *************** function _LCD_Write_String *****************
  2804 ;; Defined at:
  2805 ;;		line 65 in file "LCD.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  a               1    wreg     PTR unsigned char 
  2808 ;;		 -> STR_1(15), 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  a               1    6[COMMON] PTR unsigned char 
  2811 ;;		 -> STR_1(15), 
  2812 ;;  n               2    4[COMMON] int 
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2822 ;;      Params:         0       0       0       0       0
  2823 ;;      Locals:         3       0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0
  2825 ;;      Totals:         3       0       0       0       0
  2826 ;;Total ram usage:        3 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    2
  2829 ;; This function calls:
  2830 ;;		_LCD_Write_Character
  2831 ;; This function is called by:
  2832 ;;		_main
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           
  2837                           ;psect for function _LCD_Write_String
  2838  06A3                     _LCD_Write_String:
  2839                           
  2840                           ;incstack = 0
  2841                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2842                           ;LCD_Write_String@a stored from wreg
  2843  06A3  00F6               	movwf	LCD_Write_String@a
  2844  06A4                     l1741:
  2845                           
  2846                           ;LCD.c: 66:     int n;;LCD.c: 67:     for(n = 0; a[n] != '\0'; n++){
  2847  06A4  01F4               	clrf	LCD_Write_String@n
  2848  06A5  01F5               	clrf	LCD_Write_String@n+1
  2849  06A6  2EBA               	goto	l1747
  2850  06A7                     l1743:
  2851                           
  2852                           ;LCD.c: 68:         LCD_Write_Character(a[n]);
  2853  06A7  0874               	movf	LCD_Write_String@n,w
  2854  06A8  0776               	addwf	LCD_Write_String@a,w
  2855  06A9  0084               	movwf	4
  2856  06AA  120A  118A  2702  120A  118A  	fcall	stringdir
  2857  06AF  120A  118A  272B  120A  118A  	fcall	_LCD_Write_Character
  2858  06B4                     l1745:
  2859                           
  2860                           ;LCD.c: 69:     }
  2861  06B4  3001               	movlw	1
  2862  06B5  07F4               	addwf	LCD_Write_String@n,f
  2863  06B6  1803               	skipnc
  2864  06B7  0AF5               	incf	LCD_Write_String@n+1,f
  2865  06B8  3000               	movlw	0
  2866  06B9  07F5               	addwf	LCD_Write_String@n+1,f
  2867  06BA                     l1747:
  2868  06BA  0874               	movf	LCD_Write_String@n,w
  2869  06BB  0776               	addwf	LCD_Write_String@a,w
  2870  06BC  0084               	movwf	4
  2871  06BD  120A  118A  2702  120A  118A  	fcall	stringdir
  2872  06C2  3A00               	xorlw	0
  2873  06C3  1D03               	skipz
  2874  06C4  2EC6               	goto	u461
  2875  06C5  2EC7               	goto	u460
  2876  06C6                     u461:
  2877  06C6  2EA7               	goto	l1743
  2878  06C7                     u460:
  2879  06C7                     l129:
  2880  06C7  0008               	return
  2881  06C8                     __end_of_LCD_Write_String:
  2882                           
  2883                           	psect	text11
  2884  072B                     __ptext11:	
  2885 ;; *************** function _LCD_Write_Character *****************
  2886 ;; Defined at:
  2887 ;;		line 56 in file "LCD.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  caracter        1    wreg     unsigned char 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  caracter        1    3[COMMON] unsigned char 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      void 
  2894 ;; Registers used:
  2895 ;;		wreg
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2901 ;;      Params:         0       0       0       0       0
  2902 ;;      Locals:         1       0       0       0       0
  2903 ;;      Temps:          1       0       0       0       0
  2904 ;;      Totals:         2       0       0       0       0
  2905 ;;Total ram usage:        2 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    1
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_main
  2912 ;;		_LCD_Write_String
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           
  2917                           ;psect for function _LCD_Write_Character
  2918  072B                     _LCD_Write_Character:
  2919                           
  2920                           ;incstack = 0
  2921                           ; Regs used in _LCD_Write_Character: [wreg]
  2922                           ;LCD_Write_Character@caracter stored from wreg
  2923  072B  00F3               	movwf	LCD_Write_Character@caracter
  2924  072C                     l1573:
  2925                           
  2926                           ;LCD.c: 57:     PORTCbits.RC0 = 1;
  2927  072C  1283               	bcf	3,5	;RP0=0, select bank0
  2928  072D  1303               	bcf	3,6	;RP1=0, select bank0
  2929  072E  1407               	bsf	7,0	;volatile
  2930  072F                     l1575:
  2931                           
  2932                           ;LCD.c: 59:     PORTD = caracter;
  2933  072F  0873               	movf	LCD_Write_Character@caracter,w
  2934  0730  0088               	movwf	8	;volatile
  2935  0731                     l1577:
  2936                           
  2937                           ;LCD.c: 60:     PORTCbits.RC1 = 1;
  2938  0731  1487               	bsf	7,1	;volatile
  2939                           
  2940                           ;LCD.c: 61:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2941  0732  300D               	movlw	13
  2942  0733  00F2               	movwf	??_LCD_Write_Character
  2943  0734                     u927:
  2944  0734  0BF2               	decfsz	??_LCD_Write_Character,f
  2945  0735  2F34               	goto	u927
  2946  0736                     l1579:
  2947                           
  2948                           ;LCD.c: 62:     PORTCbits.RC1 = 0;
  2949  0736  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0737  1303               	bcf	3,6	;RP1=0, select bank0
  2951  0738  1087               	bcf	7,1	;volatile
  2952  0739                     l123:
  2953  0739  0008               	return
  2954  073A                     __end_of_LCD_Write_Character:
  2955                           
  2956                           	psect	text12
  2957  05EF                     __ptext12:	
  2958 ;; *************** function _LCD_Set_Cursor *****************
  2959 ;; Defined at:
  2960 ;;		line 72 in file "LCD.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  linea           1    wreg     unsigned char 
  2963 ;;  columna         1    5[COMMON] unsigned char 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  linea           1    8[COMMON] unsigned char 
  2966 ;;  corrimiento     1    9[COMMON] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2976 ;;      Params:         1       0       0       0       0
  2977 ;;      Locals:         2       0       0       0       0
  2978 ;;      Temps:          2       0       0       0       0
  2979 ;;      Totals:         5       0       0       0       0
  2980 ;;Total ram usage:        5 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    2
  2983 ;; This function calls:
  2984 ;;		_LCD_Cmd
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           
  2991                           ;psect for function _LCD_Set_Cursor
  2992  05EF                     _LCD_Set_Cursor:
  2993                           
  2994                           ;incstack = 0
  2995                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2996                           ;LCD_Set_Cursor@linea stored from wreg
  2997  05EF  00F8               	movwf	LCD_Set_Cursor@linea
  2998  05F0                     l1723:
  2999                           
  3000                           ;LCD.c: 74:     switch (linea){
  3001  05F0  2E10               	goto	l1735
  3002  05F1                     l1725:
  3003                           
  3004                           ;LCD.c: 76:             corrimiento = 0x80 + columna;
  3005  05F1  0875               	movf	LCD_Set_Cursor@columna,w
  3006  05F2  3E80               	addlw	128
  3007  05F3  00F6               	movwf	??_LCD_Set_Cursor
  3008  05F4  0876               	movf	??_LCD_Set_Cursor,w
  3009  05F5  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3010  05F6                     l1727:
  3011                           
  3012                           ;LCD.c: 77:             LCD_Cmd(corrimiento);
  3013  05F6  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3014  05F7  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  3015                           
  3016                           ;LCD.c: 78:             break;
  3017  05FC  2E20               	goto	l137
  3018  05FD                     l1729:
  3019                           
  3020                           ;LCD.c: 80:             corrimiento = 0x80 + 0x40 + columna;
  3021  05FD  0875               	movf	LCD_Set_Cursor@columna,w
  3022  05FE  3EC0               	addlw	192
  3023  05FF  00F6               	movwf	??_LCD_Set_Cursor
  3024  0600  0876               	movf	??_LCD_Set_Cursor,w
  3025  0601  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3026  0602                     l1731:
  3027                           
  3028                           ;LCD.c: 81:             LCD_Cmd(corrimiento);
  3029  0602  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3030  0603  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  3031                           
  3032                           ;LCD.c: 82:             break;
  3033  0608  2E20               	goto	l137
  3034  0609                     l1733:
  3035                           
  3036                           ;LCD.c: 84:             LCD_Cmd(0x80);
  3037  0609  3080               	movlw	128
  3038  060A  120A  118A  2621  120A  118A  	fcall	_LCD_Cmd
  3039                           
  3040                           ;LCD.c: 85:     }
  3041  060F  2E20               	goto	l137
  3042  0610                     l1735:
  3043  0610  0878               	movf	LCD_Set_Cursor@linea,w
  3044  0611  00F6               	movwf	??_LCD_Set_Cursor
  3045  0612  01F7               	clrf	??_LCD_Set_Cursor+1
  3046                           
  3047                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3048                           ; Switch size 1, requested type "simple"
  3049                           ; Number of cases is 1, Range of values is 0 to 0
  3050                           ; switch strategies available:
  3051                           ; Name         Instructions Cycles
  3052                           ; simple_byte            4     3 (average)
  3053                           ; direct_byte           11     8 (fixed)
  3054                           ; jumptable            260     6 (fixed)
  3055                           ;	Chosen strategy is simple_byte
  3056  0613  0877               	movf	??_LCD_Set_Cursor+1,w
  3057  0614  3A00               	xorlw	0	; case 0
  3058  0615  1903               	skipnz
  3059  0616  2E18               	goto	l2589
  3060  0617  2E09               	goto	l1733
  3061  0618                     l2589:
  3062                           
  3063                           ; Switch size 1, requested type "simple"
  3064                           ; Number of cases is 2, Range of values is 1 to 2
  3065                           ; switch strategies available:
  3066                           ; Name         Instructions Cycles
  3067                           ; simple_byte            7     4 (average)
  3068                           ; direct_byte           17    11 (fixed)
  3069                           ; jumptable            263     9 (fixed)
  3070                           ;	Chosen strategy is simple_byte
  3071  0618  0876               	movf	??_LCD_Set_Cursor,w
  3072  0619  3A01               	xorlw	1	; case 1
  3073  061A  1903               	skipnz
  3074  061B  2DF1               	goto	l1725
  3075  061C  3A03               	xorlw	3	; case 2
  3076  061D  1903               	skipnz
  3077  061E  2DFD               	goto	l1729
  3078  061F  2E09               	goto	l1733
  3079  0620                     l137:
  3080  0620  0008               	return
  3081  0621                     __end_of_LCD_Set_Cursor:
  3082                           
  3083                           	psect	text13
  3084  0621                     __ptext13:	
  3085 ;; *************** function _LCD_Cmd *****************
  3086 ;; Defined at:
  3087 ;;		line 13 in file "LCD.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  comando         1    wreg     unsigned char 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  comando         1    4[COMMON] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3101 ;;      Params:         0       0       0       0       0
  3102 ;;      Locals:         1       0       0       0       0
  3103 ;;      Temps:          2       0       0       0       0
  3104 ;;      Totals:         3       0       0       0       0
  3105 ;;Total ram usage:        3 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    1
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_LCD_init
  3112 ;;		_LCD_Set_Cursor
  3113 ;;		_LCD_clear
  3114 ;;		_LCD_home
  3115 ;;		_LCD_Shift_links
  3116 ;;		_LCD_Shift_rechts
  3117 ;;		_LCD_Cursor_rechts
  3118 ;;		_LCD_Cursor_links
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           
  3123                           ;psect for function _LCD_Cmd
  3124  0621                     _LCD_Cmd:
  3125                           
  3126                           ;incstack = 0
  3127                           ; Regs used in _LCD_Cmd: [wreg]
  3128                           ;LCD_Cmd@comando stored from wreg
  3129  0621  00F4               	movwf	LCD_Cmd@comando
  3130  0622                     l1581:
  3131                           
  3132                           ;LCD.c: 14:     PORTCbits.RC0 = 0;
  3133  0622  1283               	bcf	3,5	;RP0=0, select bank0
  3134  0623  1303               	bcf	3,6	;RP1=0, select bank0
  3135  0624  1007               	bcf	7,0	;volatile
  3136  0625                     l1583:
  3137                           
  3138                           ;LCD.c: 15:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3139  0625  3007               	movlw	7
  3140  0626  00F3               	movwf	??_LCD_Cmd+1
  3141  0627  307D               	movlw	125
  3142  0628  00F2               	movwf	??_LCD_Cmd
  3143  0629                     u937:
  3144  0629  0BF2               	decfsz	??_LCD_Cmd,f
  3145  062A  2E29               	goto	u937
  3146  062B  0BF3               	decfsz	??_LCD_Cmd+1,f
  3147  062C  2E29               	goto	u937
  3148  062D                     l1585:
  3149                           
  3150                           ;LCD.c: 16:     PORTCbits.RC1 = 1;
  3151  062D  1283               	bcf	3,5	;RP0=0, select bank0
  3152  062E  1303               	bcf	3,6	;RP1=0, select bank0
  3153  062F  1487               	bsf	7,1	;volatile
  3154                           
  3155                           ;LCD.c: 17:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3156  0630  3007               	movlw	7
  3157  0631  00F3               	movwf	??_LCD_Cmd+1
  3158  0632  307D               	movlw	125
  3159  0633  00F2               	movwf	??_LCD_Cmd
  3160  0634                     u947:
  3161  0634  0BF2               	decfsz	??_LCD_Cmd,f
  3162  0635  2E34               	goto	u947
  3163  0636  0BF3               	decfsz	??_LCD_Cmd+1,f
  3164  0637  2E34               	goto	u947
  3165                           
  3166                           ;LCD.c: 18:     PORTD = comando;
  3167  0638  0874               	movf	LCD_Cmd@comando,w
  3168  0639  1283               	bcf	3,5	;RP0=0, select bank0
  3169  063A  1303               	bcf	3,6	;RP1=0, select bank0
  3170  063B  0088               	movwf	8	;volatile
  3171                           
  3172                           ;LCD.c: 19:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3173  063C  3007               	movlw	7
  3174  063D  00F3               	movwf	??_LCD_Cmd+1
  3175  063E  307D               	movlw	125
  3176  063F  00F2               	movwf	??_LCD_Cmd
  3177  0640                     u957:
  3178  0640  0BF2               	decfsz	??_LCD_Cmd,f
  3179  0641  2E40               	goto	u957
  3180  0642  0BF3               	decfsz	??_LCD_Cmd+1,f
  3181  0643  2E40               	goto	u957
  3182  0644                     l1587:
  3183                           
  3184                           ;LCD.c: 20:     PORTCbits.RC1 = 0;
  3185  0644  1283               	bcf	3,5	;RP0=0, select bank0
  3186  0645  1303               	bcf	3,6	;RP1=0, select bank0
  3187  0646  1087               	bcf	7,1	;volatile
  3188                           
  3189                           ;LCD.c: 21:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3190  0647  3007               	movlw	7
  3191  0648  00F3               	movwf	??_LCD_Cmd+1
  3192  0649  307D               	movlw	125
  3193  064A  00F2               	movwf	??_LCD_Cmd
  3194  064B                     u967:
  3195  064B  0BF2               	decfsz	??_LCD_Cmd,f
  3196  064C  2E4B               	goto	u967
  3197  064D  0BF3               	decfsz	??_LCD_Cmd+1,f
  3198  064E  2E4B               	goto	u967
  3199  064F                     l111:
  3200  064F  0008               	return
  3201  0650                     __end_of_LCD_Cmd:
  3202                           
  3203                           	psect	text14
  3204  06C8                     __ptext14:	
  3205 ;; *************** function _AnalogRead_8 *****************
  3206 ;; Defined at:
  3207 ;;		line 89 in file "ADC.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  just            1    wreg     unsigned char 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  just            1    4[COMMON] unsigned char 
  3212 ;;  conversion      1    5[COMMON] unsigned char 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      unsigned char 
  3215 ;; Registers used:
  3216 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3222 ;;      Params:         0       0       0       0       0
  3223 ;;      Locals:         2       0       0       0       0
  3224 ;;      Temps:          2       0       0       0       0
  3225 ;;      Totals:         4       0       0       0       0
  3226 ;;Total ram usage:        4 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    1
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           
  3237                           ;psect for function _AnalogRead_8
  3238  06C8                     _AnalogRead_8:
  3239                           
  3240                           ;incstack = 0
  3241                           ; Regs used in _AnalogRead_8: [wreg-fsr0h+status,2+status,0]
  3242                           ;AnalogRead_8@just stored from wreg
  3243  06C8  00F4               	movwf	AnalogRead_8@just
  3244  06C9                     l1803:
  3245                           
  3246                           ;ADC.c: 91:     switch (just){
  3247  06C9  2ED8               	goto	l1811
  3248  06CA                     l1805:
  3249                           
  3250                           ;ADC.c: 93:             conversion = ADRESH;
  3251  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  3252  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  3253  06CC  081E               	movf	30,w	;volatile
  3254  06CD  00F2               	movwf	??_AnalogRead_8
  3255  06CE  0872               	movf	??_AnalogRead_8,w
  3256  06CF  00F5               	movwf	AnalogRead_8@conversion
  3257                           
  3258                           ;ADC.c: 94:             break;
  3259  06D0  2EE8               	goto	l1813
  3260  06D1                     l1807:
  3261                           
  3262                           ;ADC.c: 96:             conversion = ADRESL;
  3263  06D1  1683               	bsf	3,5	;RP0=1, select bank1
  3264  06D2  1303               	bcf	3,6	;RP1=0, select bank1
  3265  06D3  081E               	movf	30,w	;volatile
  3266  06D4  00F2               	movwf	??_AnalogRead_8
  3267  06D5  0872               	movf	??_AnalogRead_8,w
  3268  06D6  00F5               	movwf	AnalogRead_8@conversion
  3269                           
  3270                           ;ADC.c: 97:             break;
  3271  06D7  2EE8               	goto	l1813
  3272  06D8                     l1811:
  3273  06D8  0874               	movf	AnalogRead_8@just,w
  3274  06D9  00F2               	movwf	??_AnalogRead_8
  3275  06DA  01F3               	clrf	??_AnalogRead_8+1
  3276                           
  3277                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3278                           ; Switch size 1, requested type "simple"
  3279                           ; Number of cases is 1, Range of values is 0 to 0
  3280                           ; switch strategies available:
  3281                           ; Name         Instructions Cycles
  3282                           ; simple_byte            4     3 (average)
  3283                           ; direct_byte           11     8 (fixed)
  3284                           ; jumptable            260     6 (fixed)
  3285                           ;	Chosen strategy is simple_byte
  3286  06DB  0873               	movf	??_AnalogRead_8+1,w
  3287  06DC  3A00               	xorlw	0	; case 0
  3288  06DD  1903               	skipnz
  3289  06DE  2EE0               	goto	l2591
  3290  06DF  2ECA               	goto	l1805
  3291  06E0                     l2591:
  3292                           
  3293                           ; Switch size 1, requested type "simple"
  3294                           ; Number of cases is 2, Range of values is 72 to 76
  3295                           ; switch strategies available:
  3296                           ; Name         Instructions Cycles
  3297                           ; simple_byte            7     4 (average)
  3298                           ; direct_byte           26    11 (fixed)
  3299                           ; jumptable            263     9 (fixed)
  3300                           ;	Chosen strategy is simple_byte
  3301  06E0  0872               	movf	??_AnalogRead_8,w
  3302  06E1  3A48               	xorlw	72	; case 72
  3303  06E2  1903               	skipnz
  3304  06E3  2ECA               	goto	l1805
  3305  06E4  3A04               	xorlw	4	; case 76
  3306  06E5  1903               	skipnz
  3307  06E6  2ED1               	goto	l1807
  3308  06E7  2ECA               	goto	l1805
  3309  06E8                     l1813:
  3310                           
  3311                           ;ADC.c: 101:     return (conversion);
  3312  06E8  0875               	movf	AnalogRead_8@conversion,w
  3313  06E9                     l279:
  3314  06E9  0008               	return
  3315  06EA                     __end_of_AnalogRead_8:
  3316                           
  3317                           	psect	text15
  3318  01DB                     __ptext15:	
  3319 ;; *************** function _ADConfig *****************
  3320 ;; Defined at:
  3321 ;;		line 8 in file "ADC.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  oscFreq         1    wreg     unsigned char 
  3324 ;;  canal           1    2[COMMON] unsigned char 
  3325 ;;  justificado     1    3[COMMON] unsigned char 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  oscFreq         1    6[COMMON] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3337 ;;      Params:         2       0       0       0       0
  3338 ;;      Locals:         1       0       0       0       0
  3339 ;;      Temps:          2       0       0       0       0
  3340 ;;      Totals:         5       0       0       0       0
  3341 ;;Total ram usage:        5 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    1
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function _ADConfig
  3353  01DB                     _ADConfig:
  3354                           
  3355                           ;incstack = 0
  3356                           ; Regs used in _ADConfig: [wreg-fsr0h+status,2+status,0]
  3357                           ;ADConfig@oscFreq stored from wreg
  3358  01DB  00F6               	movwf	ADConfig@oscFreq
  3359  01DC                     l1671:
  3360                           
  3361                           ;ADC.c: 9:     switch(oscFreq){
  3362  01DC  29FC               	goto	l1683
  3363  01DD                     l1673:
  3364                           
  3365                           ;ADC.c: 11:             ADCON0bits.ADCS = 0b00;
  3366  01DD  303F               	movlw	-193
  3367  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  3368  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  3369  01E0  059F               	andwf	31,f	;volatile
  3370                           
  3371                           ;ADC.c: 12:             break;
  3372  01E1  2A1E               	goto	l1685
  3373  01E2                     l1675:
  3374                           
  3375                           ;ADC.c: 14:             ADCON0bits.ADCS = 0b01;
  3376  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  3377  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  3378  01E4  081F               	movf	31,w	;volatile
  3379  01E5  393F               	andlw	-193
  3380  01E6  3840               	iorlw	64
  3381  01E7  009F               	movwf	31	;volatile
  3382                           
  3383                           ;ADC.c: 15:             break;
  3384  01E8  2A1E               	goto	l1685
  3385  01E9                     l1677:
  3386                           
  3387                           ;ADC.c: 17:             ADCON0bits.ADCS = 0b10;
  3388  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  3389  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  3390  01EB  081F               	movf	31,w	;volatile
  3391  01EC  393F               	andlw	-193
  3392  01ED  3880               	iorlw	128
  3393  01EE  009F               	movwf	31	;volatile
  3394                           
  3395                           ;ADC.c: 18:             break;
  3396  01EF  2A1E               	goto	l1685
  3397  01F0                     l1679:
  3398                           
  3399                           ;ADC.c: 20:             ADCON0bits.ADCS = 0b11;
  3400  01F0  30C0               	movlw	192
  3401  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3402  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3403  01F3  049F               	iorwf	31,f	;volatile
  3404                           
  3405                           ;ADC.c: 21:             break;
  3406  01F4  2A1E               	goto	l1685
  3407  01F5                     l1681:
  3408                           
  3409                           ;ADC.c: 23:             ADCON0bits.ADCS = 0b01;
  3410  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  3411  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  3412  01F7  081F               	movf	31,w	;volatile
  3413  01F8  393F               	andlw	-193
  3414  01F9  3840               	iorlw	64
  3415  01FA  009F               	movwf	31	;volatile
  3416                           
  3417                           ;ADC.c: 24:     }
  3418  01FB  2A1E               	goto	l1685
  3419  01FC                     l1683:
  3420  01FC  0876               	movf	ADConfig@oscFreq,w
  3421  01FD  00F4               	movwf	??_ADConfig
  3422  01FE  01F5               	clrf	??_ADConfig+1
  3423                           
  3424                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3425                           ; Switch size 1, requested type "simple"
  3426                           ; Number of cases is 1, Range of values is 0 to 0
  3427                           ; switch strategies available:
  3428                           ; Name         Instructions Cycles
  3429                           ; simple_byte            4     3 (average)
  3430                           ; direct_byte           11     8 (fixed)
  3431                           ; jumptable            260     6 (fixed)
  3432                           ;	Chosen strategy is simple_byte
  3433  01FF  0875               	movf	??_ADConfig+1,w
  3434  0200  3A00               	xorlw	0	; case 0
  3435  0201  1903               	skipnz
  3436  0202  2A04               	goto	l2593
  3437  0203  29F5               	goto	l1681
  3438  0204                     l2593:
  3439                           
  3440                           ; Switch size 1, requested type "simple"
  3441                           ; Number of cases is 4, Range of values is 1 to 20
  3442                           ; switch strategies available:
  3443                           ; Name         Instructions Cycles
  3444                           ; simple_byte           13     7 (average)
  3445                           ; direct_byte           71    11 (fixed)
  3446                           ; jumptable            263     9 (fixed)
  3447                           ;	Chosen strategy is simple_byte
  3448  0204  0874               	movf	??_ADConfig,w
  3449  0205  3A01               	xorlw	1	; case 1
  3450  0206  1903               	skipnz
  3451  0207  29DD               	goto	l1673
  3452  0208  3A05               	xorlw	5	; case 4
  3453  0209  1903               	skipnz
  3454  020A  29E2               	goto	l1675
  3455  020B  3A0C               	xorlw	12	; case 8
  3456  020C  1903               	skipnz
  3457  020D  29E9               	goto	l1677
  3458  020E  3A1C               	xorlw	28	; case 20
  3459  020F  1903               	skipnz
  3460  0210  29F0               	goto	l1679
  3461  0211  29F5               	goto	l1681
  3462  0212                     l257:	
  3463                           ;ADC.c: 26:         case 'H':
  3464                           
  3465                           
  3466                           ;ADC.c: 27:             ADCON1bits.ADFM = 0;
  3467  0212  1683               	bsf	3,5	;RP0=1, select bank1
  3468  0213  1303               	bcf	3,6	;RP1=0, select bank1
  3469  0214  139F               	bcf	31,7	;volatile
  3470                           
  3471                           ;ADC.c: 28:             break;
  3472  0215  2A84               	goto	l1705
  3473  0216                     l259:	
  3474                           ;ADC.c: 29:         case 'L':
  3475                           
  3476                           
  3477                           ;ADC.c: 30:             ADCON1bits.ADFM = 1;
  3478  0216  1683               	bsf	3,5	;RP0=1, select bank1
  3479  0217  1303               	bcf	3,6	;RP1=0, select bank1
  3480  0218  179F               	bsf	31,7	;volatile
  3481                           
  3482                           ;ADC.c: 31:             break;
  3483  0219  2A84               	goto	l1705
  3484  021A                     l260:	
  3485                           ;ADC.c: 32:         default:
  3486                           
  3487                           
  3488                           ;ADC.c: 33:             ADCON1bits.ADFM = 0;
  3489  021A  1683               	bsf	3,5	;RP0=1, select bank1
  3490  021B  1303               	bcf	3,6	;RP1=0, select bank1
  3491  021C  139F               	bcf	31,7	;volatile
  3492                           
  3493                           ;ADC.c: 34:     }
  3494  021D  2A84               	goto	l1705
  3495  021E                     l1685:
  3496  021E  0873               	movf	ADConfig@justificado,w
  3497  021F  00F4               	movwf	??_ADConfig
  3498  0220  01F5               	clrf	??_ADConfig+1
  3499                           
  3500                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3501                           ; Switch size 1, requested type "simple"
  3502                           ; Number of cases is 1, Range of values is 0 to 0
  3503                           ; switch strategies available:
  3504                           ; Name         Instructions Cycles
  3505                           ; simple_byte            4     3 (average)
  3506                           ; direct_byte           11     8 (fixed)
  3507                           ; jumptable            260     6 (fixed)
  3508                           ;	Chosen strategy is simple_byte
  3509  0221  0875               	movf	??_ADConfig+1,w
  3510  0222  3A00               	xorlw	0	; case 0
  3511  0223  1903               	skipnz
  3512  0224  2A26               	goto	l2595
  3513  0225  2A1A               	goto	l260
  3514  0226                     l2595:
  3515                           
  3516                           ; Switch size 1, requested type "simple"
  3517                           ; Number of cases is 2, Range of values is 72 to 76
  3518                           ; switch strategies available:
  3519                           ; Name         Instructions Cycles
  3520                           ; simple_byte            7     4 (average)
  3521                           ; direct_byte           26    11 (fixed)
  3522                           ; jumptable            263     9 (fixed)
  3523                           ;	Chosen strategy is simple_byte
  3524  0226  0874               	movf	??_ADConfig,w
  3525  0227  3A48               	xorlw	72	; case 72
  3526  0228  1903               	skipnz
  3527  0229  2A12               	goto	l257
  3528  022A  3A04               	xorlw	4	; case 76
  3529  022B  1903               	skipnz
  3530  022C  2A16               	goto	l259
  3531  022D  2A1A               	goto	l260
  3532  022E                     l262:	
  3533                           ;ADC.c: 36:         case 0:
  3534                           
  3535                           
  3536                           ;ADC.c: 37:             TRISAbits.TRISA0 = 1;
  3537  022E  1405               	bsf	5,0	;volatile
  3538                           
  3539                           ;ADC.c: 38:             ANSELbits.ANS0 = 1;
  3540  022F  1683               	bsf	3,5	;RP0=1, select bank3
  3541  0230  1703               	bsf	3,6	;RP1=1, select bank3
  3542  0231  1408               	bsf	8,0	;volatile
  3543  0232                     l1687:
  3544                           
  3545                           ;ADC.c: 39:             ADCON0bits.CHS = 0;
  3546  0232  30C3               	movlw	-61
  3547  0233  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0234  1303               	bcf	3,6	;RP1=0, select bank0
  3549  0235  059F               	andwf	31,f	;volatile
  3550                           
  3551                           ;ADC.c: 40:             break;
  3552  0236  2AA6               	goto	l263
  3553  0237                     l264:	
  3554                           ;ADC.c: 41:         case 1:
  3555                           
  3556                           
  3557                           ;ADC.c: 42:             TRISAbits.TRISA1 = 1;
  3558  0237  1485               	bsf	5,1	;volatile
  3559                           
  3560                           ;ADC.c: 43:             ANSELbits.ANS1 = 1;
  3561  0238  1683               	bsf	3,5	;RP0=1, select bank3
  3562  0239  1703               	bsf	3,6	;RP1=1, select bank3
  3563  023A  1488               	bsf	8,1	;volatile
  3564  023B                     l1689:
  3565                           
  3566                           ;ADC.c: 44:             ADCON0bits.CHS = 1;
  3567  023B  1283               	bcf	3,5	;RP0=0, select bank0
  3568  023C  1303               	bcf	3,6	;RP1=0, select bank0
  3569  023D  081F               	movf	31,w	;volatile
  3570  023E  39C3               	andlw	-61
  3571  023F  3804               	iorlw	4
  3572  0240  009F               	movwf	31	;volatile
  3573                           
  3574                           ;ADC.c: 45:             break;
  3575  0241  2AA6               	goto	l263
  3576  0242                     l265:	
  3577                           ;ADC.c: 46:         case 2:
  3578                           
  3579                           
  3580                           ;ADC.c: 47:             TRISAbits.TRISA2 = 1;
  3581  0242  1505               	bsf	5,2	;volatile
  3582                           
  3583                           ;ADC.c: 48:             ANSELbits.ANS2 = 1;
  3584  0243  1683               	bsf	3,5	;RP0=1, select bank3
  3585  0244  1703               	bsf	3,6	;RP1=1, select bank3
  3586  0245  1508               	bsf	8,2	;volatile
  3587  0246                     l1691:
  3588                           
  3589                           ;ADC.c: 49:             ADCON0bits.CHS = 2;
  3590  0246  1283               	bcf	3,5	;RP0=0, select bank0
  3591  0247  1303               	bcf	3,6	;RP1=0, select bank0
  3592  0248  081F               	movf	31,w	;volatile
  3593  0249  39C3               	andlw	-61
  3594  024A  3808               	iorlw	8
  3595  024B  009F               	movwf	31	;volatile
  3596                           
  3597                           ;ADC.c: 50:             break;
  3598  024C  2AA6               	goto	l263
  3599  024D                     l266:	
  3600                           ;ADC.c: 51:         case 3:
  3601                           
  3602                           
  3603                           ;ADC.c: 52:             TRISAbits.TRISA3 = 1;
  3604  024D  1585               	bsf	5,3	;volatile
  3605                           
  3606                           ;ADC.c: 53:             ANSELbits.ANS3 = 1;
  3607  024E  1683               	bsf	3,5	;RP0=1, select bank3
  3608  024F  1703               	bsf	3,6	;RP1=1, select bank3
  3609  0250  1588               	bsf	8,3	;volatile
  3610  0251                     l1693:
  3611                           
  3612                           ;ADC.c: 54:             ADCON0bits.CHS = 3;
  3613  0251  1283               	bcf	3,5	;RP0=0, select bank0
  3614  0252  1303               	bcf	3,6	;RP1=0, select bank0
  3615  0253  081F               	movf	31,w	;volatile
  3616  0254  39C3               	andlw	-61
  3617  0255  380C               	iorlw	12
  3618  0256  009F               	movwf	31	;volatile
  3619                           
  3620                           ;ADC.c: 55:             break;
  3621  0257  2AA6               	goto	l263
  3622  0258                     l267:	
  3623                           ;ADC.c: 56:         case 4:
  3624                           
  3625                           
  3626                           ;ADC.c: 57:             TRISAbits.TRISA5 = 1;
  3627  0258  1685               	bsf	5,5	;volatile
  3628                           
  3629                           ;ADC.c: 58:             ANSELbits.ANS4 = 1;
  3630  0259  1683               	bsf	3,5	;RP0=1, select bank3
  3631  025A  1703               	bsf	3,6	;RP1=1, select bank3
  3632  025B  1608               	bsf	8,4	;volatile
  3633  025C                     l1695:
  3634                           
  3635                           ;ADC.c: 59:             ADCON0bits.CHS = 3;
  3636  025C  1283               	bcf	3,5	;RP0=0, select bank0
  3637  025D  1303               	bcf	3,6	;RP1=0, select bank0
  3638  025E  081F               	movf	31,w	;volatile
  3639  025F  39C3               	andlw	-61
  3640  0260  380C               	iorlw	12
  3641  0261  009F               	movwf	31	;volatile
  3642                           
  3643                           ;ADC.c: 60:             break;
  3644  0262  2AA6               	goto	l263
  3645  0263                     l268:	
  3646                           ;ADC.c: 61:         case 5:
  3647                           
  3648                           
  3649                           ;ADC.c: 62:             TRISEbits.TRISE0 = 1;
  3650  0263  1409               	bsf	9,0	;volatile
  3651                           
  3652                           ;ADC.c: 63:             ANSELbits.ANS5 = 1;
  3653  0264  1683               	bsf	3,5	;RP0=1, select bank3
  3654  0265  1703               	bsf	3,6	;RP1=1, select bank3
  3655  0266  1688               	bsf	8,5	;volatile
  3656  0267                     l1697:
  3657                           
  3658                           ;ADC.c: 64:             ADCON0bits.CHS = 5;
  3659  0267  1283               	bcf	3,5	;RP0=0, select bank0
  3660  0268  1303               	bcf	3,6	;RP1=0, select bank0
  3661  0269  081F               	movf	31,w	;volatile
  3662  026A  39C3               	andlw	-61
  3663  026B  3814               	iorlw	20
  3664  026C  009F               	movwf	31	;volatile
  3665                           
  3666                           ;ADC.c: 65:             break;
  3667  026D  2AA6               	goto	l263
  3668  026E                     l269:	
  3669                           ;ADC.c: 66:         case 6:
  3670                           
  3671                           
  3672                           ;ADC.c: 67:             TRISEbits.TRISE1 = 1;
  3673  026E  1489               	bsf	9,1	;volatile
  3674                           
  3675                           ;ADC.c: 68:             ANSELbits.ANS6 = 1;
  3676  026F  1683               	bsf	3,5	;RP0=1, select bank3
  3677  0270  1703               	bsf	3,6	;RP1=1, select bank3
  3678  0271  1708               	bsf	8,6	;volatile
  3679  0272                     l1699:
  3680                           
  3681                           ;ADC.c: 69:             ADCON0bits.CHS = 6;
  3682  0272  1283               	bcf	3,5	;RP0=0, select bank0
  3683  0273  1303               	bcf	3,6	;RP1=0, select bank0
  3684  0274  081F               	movf	31,w	;volatile
  3685  0275  39C3               	andlw	-61
  3686  0276  3818               	iorlw	24
  3687  0277  009F               	movwf	31	;volatile
  3688                           
  3689                           ;ADC.c: 70:             break;
  3690  0278  2AA6               	goto	l263
  3691  0279                     l270:	
  3692                           ;ADC.c: 71:         case 7:
  3693                           
  3694                           
  3695                           ;ADC.c: 72:             TRISEbits.TRISE2 = 1;
  3696  0279  1509               	bsf	9,2	;volatile
  3697                           
  3698                           ;ADC.c: 73:             ANSELbits.ANS7 = 1;
  3699  027A  1683               	bsf	3,5	;RP0=1, select bank3
  3700  027B  1703               	bsf	3,6	;RP1=1, select bank3
  3701  027C  1788               	bsf	8,7	;volatile
  3702  027D                     l1701:
  3703                           
  3704                           ;ADC.c: 74:             ADCON0bits.CHS = 7;
  3705  027D  1283               	bcf	3,5	;RP0=0, select bank0
  3706  027E  1303               	bcf	3,6	;RP1=0, select bank0
  3707  027F  081F               	movf	31,w	;volatile
  3708  0280  39C3               	andlw	-61
  3709  0281  381C               	iorlw	28
  3710  0282  009F               	movwf	31	;volatile
  3711                           
  3712                           ;ADC.c: 75:             break;
  3713  0283  2AA6               	goto	l263
  3714  0284                     l1705:
  3715  0284  0872               	movf	ADConfig@canal,w
  3716  0285  00F4               	movwf	??_ADConfig
  3717  0286  01F5               	clrf	??_ADConfig+1
  3718                           
  3719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3720                           ; Switch size 1, requested type "simple"
  3721                           ; Number of cases is 1, Range of values is 0 to 0
  3722                           ; switch strategies available:
  3723                           ; Name         Instructions Cycles
  3724                           ; simple_byte            4     3 (average)
  3725                           ; direct_byte           11     8 (fixed)
  3726                           ; jumptable            260     6 (fixed)
  3727                           ;	Chosen strategy is simple_byte
  3728  0287  0875               	movf	??_ADConfig+1,w
  3729  0288  3A00               	xorlw	0	; case 0
  3730  0289  1903               	skipnz
  3731  028A  2A8C               	goto	l2597
  3732  028B  2AA6               	goto	l263
  3733  028C                     l2597:
  3734                           
  3735                           ; Switch size 1, requested type "simple"
  3736                           ; Number of cases is 8, Range of values is 0 to 7
  3737                           ; switch strategies available:
  3738                           ; Name         Instructions Cycles
  3739                           ; simple_byte           25    13 (average)
  3740                           ; direct_byte           32     8 (fixed)
  3741                           ; jumptable            260     6 (fixed)
  3742                           ;	Chosen strategy is simple_byte
  3743  028C  0874               	movf	??_ADConfig,w
  3744  028D  3A00               	xorlw	0	; case 0
  3745  028E  1903               	skipnz
  3746  028F  2A2E               	goto	l262
  3747  0290  3A01               	xorlw	1	; case 1
  3748  0291  1903               	skipnz
  3749  0292  2A37               	goto	l264
  3750  0293  3A03               	xorlw	3	; case 2
  3751  0294  1903               	skipnz
  3752  0295  2A42               	goto	l265
  3753  0296  3A01               	xorlw	1	; case 3
  3754  0297  1903               	skipnz
  3755  0298  2A4D               	goto	l266
  3756  0299  3A07               	xorlw	7	; case 4
  3757  029A  1903               	skipnz
  3758  029B  2A58               	goto	l267
  3759  029C  3A01               	xorlw	1	; case 5
  3760  029D  1903               	skipnz
  3761  029E  2A63               	goto	l268
  3762  029F  3A03               	xorlw	3	; case 6
  3763  02A0  1903               	skipnz
  3764  02A1  2A6E               	goto	l269
  3765  02A2  3A01               	xorlw	1	; case 7
  3766  02A3  1903               	skipnz
  3767  02A4  2A79               	goto	l270
  3768  02A5  2AA6               	goto	l263
  3769  02A6                     l263:
  3770                           
  3771                           ;ADC.c: 80:     ADCON0bits.ADON = 1;
  3772  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  3773  02A7  141F               	bsf	31,0	;volatile
  3774                           
  3775                           ;ADC.c: 81:     PIR1bits.ADIF = 0;
  3776  02A8  130C               	bcf	12,6	;volatile
  3777                           
  3778                           ;ADC.c: 82:     PIE1bits.ADIE = 1;
  3779  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  3780  02AA  1303               	bcf	3,6	;RP1=0, select bank1
  3781  02AB  170C               	bsf	12,6	;volatile
  3782                           
  3783                           ;ADC.c: 83:     INTCONbits.PEIE = 1;
  3784  02AC  170B               	bsf	11,6	;volatile
  3785                           
  3786                           ;ADC.c: 84:     INTCONbits.GIE = 1;
  3787  02AD  178B               	bsf	11,7	;volatile
  3788  02AE                     l1707:
  3789                           
  3790                           ;ADC.c: 85:     _delay((unsigned long)((30)*(4000000/4000.0)));
  3791  02AE  3027               	movlw	39
  3792  02AF  00F5               	movwf	??_ADConfig+1
  3793  02B0  30F5               	movlw	245
  3794  02B1  00F4               	movwf	??_ADConfig
  3795  02B2                     u977:
  3796  02B2  0BF4               	decfsz	??_ADConfig,f
  3797  02B3  2AB2               	goto	u977
  3798  02B4  0BF5               	decfsz	??_ADConfig+1,f
  3799  02B5  2AB2               	goto	u977
  3800  02B6                     l1709:
  3801                           
  3802                           ;ADC.c: 86:     ADCON0bits.GO_nDONE = 1;
  3803  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  3804  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  3805  02B8  149F               	bsf	31,1	;volatile
  3806  02B9                     l271:
  3807  02B9  0008               	return
  3808  02BA                     __end_of_ADConfig:
  3809                           
  3810                           	psect	text16
  3811  035E                     __ptext16:	
  3812 ;; *************** function _ADC_CHselect *****************
  3813 ;; Defined at:
  3814 ;;		line 113 in file "ADC.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  canal           1    wreg     unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  canal           1    4[COMMON] unsigned char 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3828 ;;      Params:         0       0       0       0       0
  3829 ;;      Locals:         1       0       0       0       0
  3830 ;;      Temps:          2       0       0       0       0
  3831 ;;      Totals:         3       0       0       0       0
  3832 ;;Total ram usage:        3 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    1
  3835 ;; This function calls:
  3836 ;;		Nothing
  3837 ;; This function is called by:
  3838 ;;		_main
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           
  3843                           ;psect for function _ADC_CHselect
  3844  035E                     _ADC_CHselect:
  3845                           
  3846                           ;incstack = 0
  3847                           ; Regs used in _ADC_CHselect: [wreg-fsr0h+status,2+status,0]
  3848                           ;ADC_CHselect@canal stored from wreg
  3849  035E  00F4               	movwf	ADC_CHselect@canal
  3850  035F                     l1821:
  3851                           
  3852                           ;ADC.c: 114:     switch (canal){
  3853  035F  2BC6               	goto	l1841
  3854  0360                     l286:	
  3855                           ;ADC.c: 115:         case 0:
  3856                           
  3857                           
  3858                           ;ADC.c: 116:             TRISAbits.TRISA0 = 1;
  3859  0360  1683               	bsf	3,5	;RP0=1, select bank1
  3860  0361  1303               	bcf	3,6	;RP1=0, select bank1
  3861  0362  1405               	bsf	5,0	;volatile
  3862                           
  3863                           ;ADC.c: 117:             ANSELbits.ANS0 = 1;
  3864  0363  1683               	bsf	3,5	;RP0=1, select bank3
  3865  0364  1703               	bsf	3,6	;RP1=1, select bank3
  3866  0365  1408               	bsf	8,0	;volatile
  3867  0366                     l1823:
  3868                           
  3869                           ;ADC.c: 118:             ADCON0bits.CHS = 0;
  3870  0366  30C3               	movlw	-61
  3871  0367  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0368  1303               	bcf	3,6	;RP1=0, select bank0
  3873  0369  059F               	andwf	31,f	;volatile
  3874                           
  3875                           ;ADC.c: 119:             break;
  3876  036A  2BE8               	goto	l295
  3877  036B                     l288:	
  3878                           ;ADC.c: 120:         case 1:
  3879                           
  3880                           
  3881                           ;ADC.c: 121:             TRISAbits.TRISA1 = 1;
  3882  036B  1683               	bsf	3,5	;RP0=1, select bank1
  3883  036C  1303               	bcf	3,6	;RP1=0, select bank1
  3884  036D  1485               	bsf	5,1	;volatile
  3885                           
  3886                           ;ADC.c: 122:             ANSELbits.ANS1 = 1;
  3887  036E  1683               	bsf	3,5	;RP0=1, select bank3
  3888  036F  1703               	bsf	3,6	;RP1=1, select bank3
  3889  0370  1488               	bsf	8,1	;volatile
  3890  0371                     l1825:
  3891                           
  3892                           ;ADC.c: 123:             ADCON0bits.CHS = 1;
  3893  0371  1283               	bcf	3,5	;RP0=0, select bank0
  3894  0372  1303               	bcf	3,6	;RP1=0, select bank0
  3895  0373  081F               	movf	31,w	;volatile
  3896  0374  39C3               	andlw	-61
  3897  0375  3804               	iorlw	4
  3898  0376  009F               	movwf	31	;volatile
  3899                           
  3900                           ;ADC.c: 124:             break;
  3901  0377  2BE8               	goto	l295
  3902  0378                     l289:	
  3903                           ;ADC.c: 125:         case 2:
  3904                           
  3905                           
  3906                           ;ADC.c: 126:             TRISAbits.TRISA2 = 1;
  3907  0378  1683               	bsf	3,5	;RP0=1, select bank1
  3908  0379  1303               	bcf	3,6	;RP1=0, select bank1
  3909  037A  1505               	bsf	5,2	;volatile
  3910                           
  3911                           ;ADC.c: 127:             ANSELbits.ANS2 = 1;
  3912  037B  1683               	bsf	3,5	;RP0=1, select bank3
  3913  037C  1703               	bsf	3,6	;RP1=1, select bank3
  3914  037D  1508               	bsf	8,2	;volatile
  3915  037E                     l1827:
  3916                           
  3917                           ;ADC.c: 128:             ADCON0bits.CHS = 2;
  3918  037E  1283               	bcf	3,5	;RP0=0, select bank0
  3919  037F  1303               	bcf	3,6	;RP1=0, select bank0
  3920  0380  081F               	movf	31,w	;volatile
  3921  0381  39C3               	andlw	-61
  3922  0382  3808               	iorlw	8
  3923  0383  009F               	movwf	31	;volatile
  3924                           
  3925                           ;ADC.c: 129:             break;
  3926  0384  2BE8               	goto	l295
  3927  0385                     l290:	
  3928                           ;ADC.c: 130:         case 3:
  3929                           
  3930                           
  3931                           ;ADC.c: 131:             TRISAbits.TRISA3 = 1;
  3932  0385  1683               	bsf	3,5	;RP0=1, select bank1
  3933  0386  1303               	bcf	3,6	;RP1=0, select bank1
  3934  0387  1585               	bsf	5,3	;volatile
  3935                           
  3936                           ;ADC.c: 132:             ANSELbits.ANS3 = 1;
  3937  0388  1683               	bsf	3,5	;RP0=1, select bank3
  3938  0389  1703               	bsf	3,6	;RP1=1, select bank3
  3939  038A  1588               	bsf	8,3	;volatile
  3940  038B                     l1829:
  3941                           
  3942                           ;ADC.c: 133:             ADCON0bits.CHS = 3;
  3943  038B  1283               	bcf	3,5	;RP0=0, select bank0
  3944  038C  1303               	bcf	3,6	;RP1=0, select bank0
  3945  038D  081F               	movf	31,w	;volatile
  3946  038E  39C3               	andlw	-61
  3947  038F  380C               	iorlw	12
  3948  0390  009F               	movwf	31	;volatile
  3949                           
  3950                           ;ADC.c: 134:             break;
  3951  0391  2BE8               	goto	l295
  3952  0392                     l291:	
  3953                           ;ADC.c: 135:         case 4:
  3954                           
  3955                           
  3956                           ;ADC.c: 136:             TRISAbits.TRISA5 = 1;
  3957  0392  1683               	bsf	3,5	;RP0=1, select bank1
  3958  0393  1303               	bcf	3,6	;RP1=0, select bank1
  3959  0394  1685               	bsf	5,5	;volatile
  3960                           
  3961                           ;ADC.c: 137:             ANSELbits.ANS4 = 1;
  3962  0395  1683               	bsf	3,5	;RP0=1, select bank3
  3963  0396  1703               	bsf	3,6	;RP1=1, select bank3
  3964  0397  1608               	bsf	8,4	;volatile
  3965  0398                     l1831:
  3966                           
  3967                           ;ADC.c: 138:             ADCON0bits.CHS = 3;
  3968  0398  1283               	bcf	3,5	;RP0=0, select bank0
  3969  0399  1303               	bcf	3,6	;RP1=0, select bank0
  3970  039A  081F               	movf	31,w	;volatile
  3971  039B  39C3               	andlw	-61
  3972  039C  380C               	iorlw	12
  3973  039D  009F               	movwf	31	;volatile
  3974                           
  3975                           ;ADC.c: 139:             break;
  3976  039E  2BE8               	goto	l295
  3977  039F                     l292:	
  3978                           ;ADC.c: 140:         case 5:
  3979                           
  3980                           
  3981                           ;ADC.c: 141:             TRISEbits.TRISE0 = 1;
  3982  039F  1683               	bsf	3,5	;RP0=1, select bank1
  3983  03A0  1303               	bcf	3,6	;RP1=0, select bank1
  3984  03A1  1409               	bsf	9,0	;volatile
  3985                           
  3986                           ;ADC.c: 142:             ANSELbits.ANS5 = 1;
  3987  03A2  1683               	bsf	3,5	;RP0=1, select bank3
  3988  03A3  1703               	bsf	3,6	;RP1=1, select bank3
  3989  03A4  1688               	bsf	8,5	;volatile
  3990  03A5                     l1833:
  3991                           
  3992                           ;ADC.c: 143:             ADCON0bits.CHS = 5;
  3993  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3994  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3995  03A7  081F               	movf	31,w	;volatile
  3996  03A8  39C3               	andlw	-61
  3997  03A9  3814               	iorlw	20
  3998  03AA  009F               	movwf	31	;volatile
  3999                           
  4000                           ;ADC.c: 144:             break;
  4001  03AB  2BE8               	goto	l295
  4002  03AC                     l293:	
  4003                           ;ADC.c: 145:         case 6:
  4004                           
  4005                           
  4006                           ;ADC.c: 146:             TRISEbits.TRISE1 = 1;
  4007  03AC  1683               	bsf	3,5	;RP0=1, select bank1
  4008  03AD  1303               	bcf	3,6	;RP1=0, select bank1
  4009  03AE  1489               	bsf	9,1	;volatile
  4010                           
  4011                           ;ADC.c: 147:             ANSELbits.ANS6 = 1;
  4012  03AF  1683               	bsf	3,5	;RP0=1, select bank3
  4013  03B0  1703               	bsf	3,6	;RP1=1, select bank3
  4014  03B1  1708               	bsf	8,6	;volatile
  4015  03B2                     l1835:
  4016                           
  4017                           ;ADC.c: 148:             ADCON0bits.CHS = 6;
  4018  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  4019  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  4020  03B4  081F               	movf	31,w	;volatile
  4021  03B5  39C3               	andlw	-61
  4022  03B6  3818               	iorlw	24
  4023  03B7  009F               	movwf	31	;volatile
  4024                           
  4025                           ;ADC.c: 149:             break;
  4026  03B8  2BE8               	goto	l295
  4027  03B9                     l294:	
  4028                           ;ADC.c: 150:         case 7:
  4029                           
  4030                           
  4031                           ;ADC.c: 151:             TRISEbits.TRISE2 = 1;
  4032  03B9  1683               	bsf	3,5	;RP0=1, select bank1
  4033  03BA  1303               	bcf	3,6	;RP1=0, select bank1
  4034  03BB  1509               	bsf	9,2	;volatile
  4035                           
  4036                           ;ADC.c: 152:             ANSELbits.ANS7 = 1;
  4037  03BC  1683               	bsf	3,5	;RP0=1, select bank3
  4038  03BD  1703               	bsf	3,6	;RP1=1, select bank3
  4039  03BE  1788               	bsf	8,7	;volatile
  4040  03BF                     l1837:
  4041                           
  4042                           ;ADC.c: 153:             ADCON0bits.CHS = 7;
  4043  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  4044  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  4045  03C1  081F               	movf	31,w	;volatile
  4046  03C2  39C3               	andlw	-61
  4047  03C3  381C               	iorlw	28
  4048  03C4  009F               	movwf	31	;volatile
  4049                           
  4050                           ;ADC.c: 154:             break;
  4051  03C5  2BE8               	goto	l295
  4052  03C6                     l1841:
  4053  03C6  0874               	movf	ADC_CHselect@canal,w
  4054  03C7  00F2               	movwf	??_ADC_CHselect
  4055  03C8  01F3               	clrf	??_ADC_CHselect+1
  4056                           
  4057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4058                           ; Switch size 1, requested type "simple"
  4059                           ; Number of cases is 1, Range of values is 0 to 0
  4060                           ; switch strategies available:
  4061                           ; Name         Instructions Cycles
  4062                           ; simple_byte            4     3 (average)
  4063                           ; direct_byte           11     8 (fixed)
  4064                           ; jumptable            260     6 (fixed)
  4065                           ;	Chosen strategy is simple_byte
  4066  03C9  0873               	movf	??_ADC_CHselect+1,w
  4067  03CA  3A00               	xorlw	0	; case 0
  4068  03CB  1903               	skipnz
  4069  03CC  2BCE               	goto	l2599
  4070  03CD  2BE8               	goto	l295
  4071  03CE                     l2599:
  4072                           
  4073                           ; Switch size 1, requested type "simple"
  4074                           ; Number of cases is 8, Range of values is 0 to 7
  4075                           ; switch strategies available:
  4076                           ; Name         Instructions Cycles
  4077                           ; simple_byte           25    13 (average)
  4078                           ; direct_byte           32     8 (fixed)
  4079                           ; jumptable            260     6 (fixed)
  4080                           ;	Chosen strategy is simple_byte
  4081  03CE  0872               	movf	??_ADC_CHselect,w
  4082  03CF  3A00               	xorlw	0	; case 0
  4083  03D0  1903               	skipnz
  4084  03D1  2B60               	goto	l286
  4085  03D2  3A01               	xorlw	1	; case 1
  4086  03D3  1903               	skipnz
  4087  03D4  2B6B               	goto	l288
  4088  03D5  3A03               	xorlw	3	; case 2
  4089  03D6  1903               	skipnz
  4090  03D7  2B78               	goto	l289
  4091  03D8  3A01               	xorlw	1	; case 3
  4092  03D9  1903               	skipnz
  4093  03DA  2B85               	goto	l290
  4094  03DB  3A07               	xorlw	7	; case 4
  4095  03DC  1903               	skipnz
  4096  03DD  2B92               	goto	l291
  4097  03DE  3A01               	xorlw	1	; case 5
  4098  03DF  1903               	skipnz
  4099  03E0  2B9F               	goto	l292
  4100  03E1  3A03               	xorlw	3	; case 6
  4101  03E2  1903               	skipnz
  4102  03E3  2BAC               	goto	l293
  4103  03E4  3A01               	xorlw	1	; case 7
  4104  03E5  1903               	skipnz
  4105  03E6  2BB9               	goto	l294
  4106  03E7  2BE8               	goto	l295
  4107  03E8                     l295:
  4108  03E8  0008               	return
  4109  03E9                     __end_of_ADC_CHselect:
  4110                           
  4111                           	psect	text17
  4112  06EA                     __ptext17:	
  4113 ;; *************** function _ISR_ADC *****************
  4114 ;; Defined at:
  4115 ;;		line 52 in file "Principal3.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		None
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4129 ;;      Params:         0       0       0       0       0
  4130 ;;      Locals:         0       0       0       0       0
  4131 ;;      Temps:          2       0       0       0       0
  4132 ;;      Totals:         2       0       0       0       0
  4133 ;;Total ram usage:        2 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; This function calls:
  4136 ;;		Nothing
  4137 ;; This function is called by:
  4138 ;;		Interrupt level 1
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           
  4143                           ;psect for function _ISR_ADC
  4144  06EA                     _ISR_ADC:
  4145  06EA                     i1l1921:
  4146                           
  4147                           ;Principal3.c: 53:             switch (ADCON0bits.CHS){
  4148  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  4149  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  4150  06EC  1F0C               	btfss	12,6	;volatile
  4151  06ED  2EEF               	goto	u56_21
  4152  06EE  2EF0               	goto	u56_20
  4153  06EF                     u56_21:
  4154  06EF  2EFB               	goto	i1l72
  4155  06F0                     u56_20:
  4156  06F0                     i1l1923:
  4157  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  4158  06F1  1303               	bcf	3,6	;RP1=0, select bank1
  4159  06F2  1F0C               	btfss	12,6	;volatile
  4160  06F3  2EF5               	goto	u57_21
  4161  06F4  2EF6               	goto	u57_20
  4162  06F5                     u57_21:
  4163  06F5  2EFB               	goto	i1l72
  4164  06F6                     u57_20:
  4165  06F6                     i1l1925:
  4166                           
  4167                           ;Principal3.c: 54:                 case 5:
  4168  06F6  130C               	bcf	12,6	;volatile
  4169                           
  4170                           ;Principal3.c: 55:                     valorADC_CH5 = AnalogRead_8('H');
  4171  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  4172  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  4173  06F9  01E0               	clrf	_banderaADC
  4174  06FA  0AE0               	incf	_banderaADC,f
  4175  06FB                     i1l72:
  4176  06FB  0871               	movf	??_ISR_ADC+1,w
  4177  06FC  008A               	movwf	10
  4178  06FD  0E70               	swapf	??_ISR_ADC,w
  4179  06FE  0083               	movwf	3
  4180  06FF  0EFE               	swapf	btemp,f
  4181  0700  0E7E               	swapf	btemp,w
  4182  0701  0009               	retfie
  4183  0702                     __end_of_ISR_ADC:
  4184  007E                     btemp	set	126	;btemp
  4185  007E                     wtemp0	set	126
  4186                           
  4187                           	psect	intentry
  4188  0004                     __pintentry:	
  4189                           ;incstack = 0
  4190                           ; Regs used in _ISR_ADC: []
  4191                           
  4192  0004                     interrupt_function:
  4193  007E                     saved_w	set	btemp
  4194  0004  00FE               	movwf	btemp
  4195  0005  0E03               	swapf	3,w
  4196  0006  00F0               	movwf	??_ISR_ADC
  4197  0007  080A               	movf	10,w
  4198  0008  00F1               	movwf	??_ISR_ADC+1
  4199  0009  120A  118A  2EEA   	ljmp	_ISR_ADC
  4200                           
  4201                           	psect	config
  4202                           
  4203                           ;Config register CONFIG1 @ 0x2007
  4204                           ;	Oscillator Selection bits
  4205                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4206                           ;	Watchdog Timer Enable bit
  4207                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4208                           ;	Power-up Timer Enable bit
  4209                           ;	PWRTE = OFF, PWRT disabled
  4210                           ;	RE3/MCLR pin function select bit
  4211                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4212                           ;	Code Protection bit
  4213                           ;	CP = OFF, Program memory code protection is disabled
  4214                           ;	Data Code Protection bit
  4215                           ;	CPD = OFF, Data memory code protection is disabled
  4216                           ;	Brown Out Reset Selection bits
  4217                           ;	BOREN = OFF, BOR disabled
  4218                           ;	Internal External Switchover bit
  4219                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4220                           ;	Fail-Safe Clock Monitor Enabled bit
  4221                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4222                           ;	Low Voltage Programming Enable bit
  4223                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4224                           ;	In-Circuit Debugger Mode bit
  4225                           ;	DEBUG = 0x1, unprogrammed default
  4226  2007                     	org	8199
  4227  2007  20D4               	dw	8404
  4228                           
  4229                           ;Config register CONFIG2 @ 0x2008
  4230                           ;	Brown-out Reset Selection bit
  4231                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4232                           ;	Flash Program Memory Self Write Enable bits
  4233                           ;	WRT = OFF, Write protection off
  4234  2008                     	org	8200
  4235  2008  3FFF               	dw	16383

Data Sizes:
    Strings     15
    Constant    0
    Data        2
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     26      65
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 

    sp__uint_to_array	PTR unsigned int  size(1) Largest target is 6
		 -> uint_to_array@resultado(BANK0[6]), 

    num3	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), uint_to_array@resultado(BANK0[6]), 

    num2	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 

    sp__mapear	PTR unsigned int  size(1) Largest target is 6
		 -> mapear@resultado(BANK0[6]), 

    num1	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_LCD_Set_Cursor
    _main->_mapear
    _uint_to_array->___awdiv
    ___awdiv->___wmul
    _mapear->___wmul
    _LCD_init->_LCD_Cmd
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd

Critical Paths under _ISR_ADC in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_uint_to_array
    _uint_to_array->___awdiv

Critical Paths under _ISR_ADC in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_ADC in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_ADC in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_ADC in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    5236
                                             23 BANK0      3     3      0
                       _ADC_CHselect
                           _ADConfig
                       _AnalogRead_8
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                           _LCD_init
                             _enviar
                             _mapear
                      _uint_to_array
                       _uint_to_char
                       _usartRC_Read
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _usartRC_Read                                         3     3      0      24
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _uint_to_char                                         4     4      0      56
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _uint_to_array                                       15    15      0    2186
                                              8 BANK0     15    15      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     805
                                              8 COMMON     1     1      0
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _mapear                                              15    13      2    1812
                                              8 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1004
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _enviar                                               3     2      1     242
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              5 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     145
                                              4 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     439
                                              5 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _AnalogRead_8                                         4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADConfig                                             5     3      2     218
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CHselect                                         3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR_ADC                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CHselect
   _ADConfig
   _AnalogRead_8
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_Character
   _LCD_Write_String
     _LCD_Write_Character
   _LCD_init
     _LCD_Cmd
   _enviar
   _mapear
     ___wmul
   _uint_to_array
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _uint_to_char
   _usartRC_Read
   _usart_init

 _ISR_ADC (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      41       5       81.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4D      12        0.0%
ABS                  0      0      4D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Feb 07 23:10:25 2021

                           pc 0002         __size_of_usartRC_Read 002E                  ___awdiv@sign 004A  
             mapear@resultado 004A                            fsr 0004           ___wmul@multiplicand 0074  
                         l102 035D                           l111 064F                           l120 053F  
                         l201 072A                           l123 0739                           l224 05EE  
                         l137 0620                           l129 06C7                           l209 067D  
                         l171 05A2                           l260 021A                           l270 0279  
                         l262 022E                           l271 02B9                           l263 02A6  
                         l264 0237                           l176 046F                           l265 0242  
                         l257 0212                           l290 0385                           l266 024D  
                         l291 0392                           l267 0258                           l259 0216  
                         l292 039F                           l268 0263                           l293 03AC  
                         l269 026E                           l381 068A                           l294 03B9  
                         l286 0360                           l534 04D8                           l295 03E8  
                         l279 06E9                           l383 06A2                           l288 036B  
                         l289 0378                           u320 0684                           u321 0683  
                         u500 05EE                           u501 05ED                           u350 069E  
                         u510 02C1                           u351 069D                           u335 068B  
                         u520 02FC                           u345 0692                           u521 02FB  
                         u530 032C                           u531 032B                           u460 06C7  
                         u540 035C                           u461 06C6                           u541 035B  
                         u525 02F8                           u470 05B9                           u710 04CA  
                         u630 0477                           u471 05B8                           u535 0328  
                         u711 04C9                           u631 0476                           u480 05C9  
                         u720 04CF                           u640 0482                           u481 05C8  
                         u545 0358                           u721 04CE                           u705 04BE  
                         u641 0481                           u490 05DE                           u650 0493  
                         u730 03F0                           u491 05DD                           u651 0492  
                         u740 0061                           u741 0060                           u670 04A5  
                         u750 0077                           u807 05C0                           u671 04A4  
                         u751 0076                           u760 0088                           u817 05D5  
                         u665 0497                           u761 0087                           u690 04B6  
                         u907 0531                           u827 05E5                           u691 04B5  
                         u917 053C                           u837 04DD                           u685 04A6  
                         u927 0734                           u847 04EC                           u695 04B2  
                         u937 0629                           u857 04F8                           u777 006C  
                         u947 0634                           u867 0502                           u787 065A  
                         u957 0640                           u877 050C                           u797 05B0  
                         u967 064B                           u887 0517                           u977 02B2  
                         u897 0524                  _uint_to_char 0540                           fsr0 0004  
                         _str 002C                           indf 0000         __size_of_ADC_CHselect 008B  
__size_of_LCD_Write_Character 000F               __end_of_LCD_Cmd 0650                _LCD_Set_Cursor 05EF  
                        l2301 002D                          l2311 0048                          l2303 002F  
                        l2241 0473                          l2321 0066                          l2313 0050  
                        l2305 0032                          l2251 0487                          l2243 0477  
                        l2331 0089                          l2323 0071                          l2315 0056  
                        l2307 0033                          l1701 027D                          l2261 049D  
                        l2253 048B                          l2245 047C                          l2341 00CC  
                        l2333 009A                          l2325 0077                          l2317 005B  
                        l2309 0038                          l2271 04BD                          l2263 04A1  
                        l2255 048D                          l2247 047E                          l2239 0470  
                        l2351 011B                          l2343 00DD                          l2335 00AF  
                        l2327 0081                          l2319 0061                          l1705 0284  
                        l1801 05E8                          l2273 04C4                          l2265 04A5  
                        l2257 0493                          l2249 0482                          l2361 015D  
                        l2353 0125                          l2345 00EE                          l2337 00B6  
                        l1707 02AE                          l1811 06D8                          l1803 06C9  
                        l1731 0602                          l1723 05F0                          l1651 04E8  
                        l2267 04B6                          l2259 0496                          l2275 04CA  
                        l2291 0437                          l2283 03EC                          l2371 017E  
                        l2363 0164                          l2355 0135                          l2347 00F5  
                        l2339 00C6                          l1821 035F                          l1709 02B6  
                        l1813 06E8                          l1805 06CA                          l1581 0622  
                        l1733 0609                          l1725 05F1                          l1573 072C  
                        l1741 06A4                          l1661 0515                          l1653 04F6  
                        l2277 04CF                          l2269 04BC                          l2293 043B  
                        l2285 03F5                          l2381 01A9                          l2373 0181  
                        l2357 013B                          l2349 0106                          l2365 0167  
                        l1831 0398                          l1823 0366                          l1671 01DC  
                        l1807 06D1                          l1583 0625                          l1727 05F6  
                        l1735 0610                          l1575 072F                          l1743 06A7  
                        l1663 051A                          l1655 04FA                          l1647 04D9  
                        l1591 0680                          l2279 04D4                          l2295 046E  
                        l2287 040B                          l1751 071F                          l2383 01BA  
                        l2359 014C                          l2367 017A                          l2375 0184  
                        l1833 03A5                          l1825 0371                          l1841 03C6  
                        l1681 01F5                          l1673 01DD                          l1585 062D  
                        l1729 05FD                          l1577 0731                          l1745 06B4  
                        l1665 0529                          l1657 0504                          l1649 04E2  
                        l1593 0684                          l2289 040F                          l1761 0729  
                        l1753 0723                          l2385 01CB                          l2377 018F  
                        l2369 017D                          l1835 03B2                          l1827 037E  
                        l1691 0246                          l1675 01E2                          l1683 01FC  
                        l1587 0644                          l1579 0736                          l1747 06BA  
                        l1667 052F                          l1659 050A                          l1595 0691  
                        l1851 02E0                          l1763 0650                          l1755 0724  
                        l2379 0199                          l2299 002A                          l1837 03BF  
                        l1829 038B                          l1693 0251                          l1677 01E9  
                        l1685 021E                          l1669 053A                          l1781 05B3  
                        l1597 0698                          l1589 067E                          l1861 032C  
                        l1853 02EF                          l1765 0665                          l1757 0725  
                        l1749 0717                          l1695 025C                          l1687 0232  
                        l1679 01F0                          l2591 06E0                          l1791 05CE  
                        l1783 05B9                          l1775 05A4                          l1599 069E  
                        l1863 0340                          l1855 02FC                          l1847 02BD  
                        l1871 0541                          l1767 066A                          l1759 0728  
                        l2583 0172                          l1697 0267                          l1689 023B  
                        l2593 0204                          l1793 05D3                          l1785 05BE  
                        l1777 05A9                          l1865 034F                          l1857 0310  
                        l1849 02C6                          l1881 0556                          l1873 0542  
                        l2585 0675                          l1769 066D                          l1699 0272  
                        l2595 0226                          l1795 05D8                          l1787 05C3  
                        l1779 05AE                          l1867 035C                          l1859 031F  
                        l2587 0581                          l1891 056F                          l1883 055B  
                        l1875 0547                          l2597 028C                          l2589 0618  
                        l1797 05DE                          l1789 05C9                          l1893 0574  
                        l1885 0560                          l1877 054C                          l2599 03CE  
                        l1799 05E3                          l1887 0565                          l1879 0551  
                        l1895 0579                          l1889 056A                          l1897 05A1  
                        STR_1 0708                          i1l72 06FB               __end_of_ISR_ADC 0702  
           ?_LCD_Write_String 0070                          _main 002A                          _num1 0044  
                        _num2 0043                          _num3 0042                          _pot1 0041  
                        _pot2 0040                          btemp 007E                 _uint_to_array 03E9  
                        start 000C            ??_LCD_Write_String 0074                  _usartRC_Read 0650  
            __end_of_ADConfig 02BA              __end_of_LCD_init 0540                         ?_main 0070  
                _ADC_CHselect 035E               __end_of___awdiv 04D9            uint_to_char@numChr 0075  
             ___awdiv@divisor 0045            uint_to_char@numero 0074               ___awdiv@counter 0049  
                       _RCREG 001A                         _SPBRG 0099                         _PORTC 0007  
                       _PORTD 0008                         u56_20 06F0                         u56_21 06EF  
                       u57_20 06F6                         u57_21 06F5                         _TRISC 0087  
                       _TRISD 0088                         _TXREG 0019        __end_of_LCD_Set_Cursor 0621  
                 mapear@F1350 0038                         pclath 000A                ?_uint_to_array 0070  
                       status 0003                         wtemp0 007E                   mapear@valor 0049  
             __initialization 000F                  __end_of_main 01DB                        ??_main 005C  
                   ??_LCD_Cmd 0072         __size_of_AnalogRead_8 0022                     ??_ISR_ADC 0070  
             ?_LCD_Set_Cursor 0075                        _ADRESH 001E                        _ADRESL 009E  
            ___awdiv@dividend 0047                        i1l1921 06EA                        i1l1923 06F0  
                      i1l1925 06F6                        _SPBRGH 009A            uint_to_array@F1341 0032  
 LCD_Write_Character@caracter 0073                        ___wmul 067E                     ??___awdiv 0078  
                      _mapear 02BA                  _AnalogRead_8 06C8                        _linea2 0020  
                      _enviar 05A3              ___awdiv@quotient 004B                        saved_w 007E  
                   ?_ADConfig 0072               ??_uint_to_array 004D                  mapear@limSup 0079  
     __end_of__initialization 0026                     ?_LCD_init 0070                __pcstackCOMMON 0070  
         _LCD_Write_Character 072B                  __pidataBANK0 0742                  enviar@valor1 0074  
                enviar@valor2 0072                    _banderaADC 0060          ?_LCD_Write_Character 0070  
                  ??_ADConfig 0074                LCD_Cmd@comando 0074                    __pbssBANK0 0020  
   LCD_Set_Cursor@corrimiento 0079                    ??_LCD_init 0075                    __pmaintext 002A  
               ADConfig@canal 0072                       ?___wmul 0072                    __pintentry 0004  
                     ?_mapear 0078                       ?_enviar 0072     __size_of_LCD_Write_String 0025  
             ADConfig@oscFreq 0076                       _LCD_Cmd 0621                 _banderaSerial 003F  
                     _ISR_ADC 06EA         ??_LCD_Write_Character 0072                    __stringtab 0702  
      AnalogRead_8@conversion 0075        uint_to_array@resultado 0054                       ___awdiv 0470  
             __size_of___wmul 0025               __size_of_mapear 00A4               __size_of_enviar 004C  
                   _ANSELbits 0188              ??_LCD_Set_Cursor 0076                       __ptext1 0717  
                     __ptext2 0650                       __ptext3 0540                       __ptext4 03E9  
                     __ptext5 0470                       __ptext6 02BA                       __ptext7 067E  
                     __ptext8 05A3                       __ptext9 04D9           uint_to_array@numero 005B  
                     clrloop0 073B          end_of_initialization 0026                     _RCSTAbits 0018  
                   _PORTCbits 0007                 mapear@limReal 0078                     _TRISAbits 0085  
                   _TRISEbits 0089             LCD_Write_String@a 0076             LCD_Write_String@n 0074  
           __size_of_ADConfig 00DF                     _TXSTAbits 0098                    _usart_init 0717  
           __size_of_LCD_init 0067         LCD_Set_Cursor@columna 0075                __end_of___wmul 06A3  
            _LCD_Write_String 06A3                   _BAUDCTLbits 0187                __end_of_mapear 035E  
              __end_of_enviar 05EF                 ?_uint_to_char 0070           start_initialization 000F  
       __end_of_uint_to_array 0470                 ?_usartRC_Read 0070                      ??___wmul 0076  
                 __pdataBANK0 005F                      ??_mapear 0045                      ??_enviar 0073  
               ?_ADC_CHselect 0070                ??_uint_to_char 0072                      ?_LCD_Cmd 0070  
                 __pbssCOMMON 007A                     ___latbits 0002                 __pcstackBANK0 0045  
                    ?_ISR_ADC 0070                ??_usartRC_Read 0072                   ?_usart_init 0070  
       uint_to_array@centenas 005A                      ?___awdiv 0045                ??_ADC_CHselect 0072  
                   __pstrings 0702   __end_of_LCD_Write_Character 073A           usartRC_Read@lectura 0074  
                    _ADConfig 01DB             interrupt_function 0004                ___wmul@product 0076  
                    _LCD_init 04D9                     clear_ram0 073A                      _PIE1bits 008C  
                    _PIR1bits 000C                 ?_AnalogRead_8 0070                    _ADCON0bits 001F  
                 __stringbase 0707                    _ADCON1bits 009F             ___wmul@multiplier 0072  
         ADConfig@justificado 0073           __size_of_usart_init 0014              __size_of_LCD_Cmd 002F  
            __size_of_ISR_ADC 0018      __end_of_LCD_Write_String 06C8          __end_of_uint_to_char 05A3  
              ??_AnalogRead_8 0072              __size_of___awdiv 0069            __end_of__stringtab 0708  
        __end_of_usartRC_Read 067E          uint_to_array@decenas 0053                      __ptext10 06A3  
                    __ptext11 072B                      __ptext12 05EF                      __ptext13 0621  
                    __ptext14 06C8                      __ptext15 01DB                      __ptext16 035E  
                    __ptext17 06EA                  _valorADC_CH0 007A                  _valorADC_CH5 007B  
           ADC_CHselect@canal 0074       __size_of_LCD_Set_Cursor 0032                      _contador 003E  
        __end_of_ADC_CHselect 03E9                 __size_of_main 01B1           LCD_Set_Cursor@linea 0078  
                  _INTCONbits 000B                      intlevel1 0000                  ??_usart_init 0072  
                   stringcode 0702              AnalogRead_8@just 0074                   _valorSerial 005F  
             mapear@dividendo 0050        __size_of_uint_to_array 0087                      stringdir 0702  
                    stringtab 0702            __end_of_usart_init 072B          __end_of_AnalogRead_8 06EA  
       __size_of_uint_to_char 0063  
